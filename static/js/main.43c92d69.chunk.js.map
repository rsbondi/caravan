{"version":3,"sources":["../../unchained-wallets/lib/trezor.js","../../unchained-wallets/lib/ledger.js","../../unchained-wallets/lib/hermit.js","images/logo.png","utils/index.js","components/Disclaimer.jsx","components/Help.jsx","actions/settingsActions.js","components/NetworkPicker.jsx","components/QuorumPicker.jsx","components/AddressTypePicker.jsx","actions/utils.js","actions/clientActions.jsx","components/ClientPicker.jsx","block_explorer.js","bitcoind.js","blockchain.js","components/Wallet/ConfirmWallet.jsx","actions/walletActions.jsx","actions/transactionActions.jsx","components/Copyable.jsx","components/Wallet/WalletDeposit.jsx","components/Spend/UTXOSet.jsx","components/MultisigDetails.jsx","components/Wallet/Node.jsx","components/BitcoindAddressImporter.jsx","components/Wallet/NodeSet.jsx","components/Spend/OutputEntry.jsx","components/Spend/OutputsForm.jsx","components/Spend/TextSignatureImporter.jsx","components/Hermit/HermitReader.jsx","components/Hermit/HermitDisplayer.jsx","components/WalletFeedback.jsx","components/Spend/HermitSignatureImporter.jsx","components/Spend/HardwareWalletSignatureImporter.jsx","components/EditableName.jsx","actions/signatureImporterActions.jsx","components/Spend/SignatureImporter.jsx","components/Spend/Transaction.jsx","components/Wallet/ExtendedPublicKeySelector.jsx","components/Wallet/WalletSign.jsx","components/Wallet/WalletSpend.jsx","components/Wallet/WalletView.jsx","components/Wallet/WalletControl.jsx","actions/extendedPublicKeyImporterActions.js","components/Wallet/WalletGenerator.jsx","components/Wallet/ExtendedPublicKeyExtendedPublicKeyImporter.jsx","components/Wallet/TextExtendedPublicKeyImporter.jsx","components/Wallet/HermitExtendedPublicKeyImporter.jsx","components/Wallet/HardwareWalletExtendedPublicKeyImporter.jsx","components/CreateAddress/Conflict.jsx","components/Wallet/ExtendedPublicKeyImporter.jsx","components/Wallet/index.jsx","actions/publicKeyImporterActions.js","components/CreateAddress/AddressGenerator.jsx","components/CreateAddress/TextPublicKeyImporter.jsx","components/CreateAddress/ExtendedPublicKeyPublicKeyImporter.jsx","components/CreateAddress/HermitPublicKeyImporter.jsx","components/CreateAddress/HardwareWalletPublicKeyImporter.jsx","components/CreateAddress/PublicKeyImporter.jsx","components/CreateAddress/index.jsx","actions/ownershipActions.jsx","components/Spend/ScriptEntry.jsx","components/Spend/ConfirmOwnership.jsx","components/Spend/index.jsx","components/Navbar.jsx","components/Footer.jsx","components/ErrorBoundry.js","components/App.jsx","registerServiceWorker.js","reducers/utils.js","reducers/settingsReducer.jsx","reducers/clientReducer.jsx","reducers/braidReducer.jsx","reducers/quorumReducer.jsx","reducers/addressReducer.jsx","reducers/walletReducer.jsx","reducers/ownershipReducer.jsx","reducers/signatureImportersReducer.js","reducers/transactionReducer.js","reducers/index.js","index.jsx","components/Spend/styles.module.scss","../../unchained-bitcoin/lib/utils.js","../../unchained-bitcoin/lib/networks.js","../../unchained-wallets/lib/interaction.js","../../unchained-bitcoin/lib/index.js","../../unchained-bitcoin/lib/script.js","../../unchained-bitcoin/lib/bip32.js","../../unchained-wallets/lib/index.js","../../unchained-bitcoin/lib/keys.js","../../unchained-bitcoin/lib/addresses.js","../../unchained-bitcoin/lib/transactions.js","../../unchained-bitcoin/lib/multisig.js","../../unchained-bitcoin/lib/p2sh.js","../../unchained-bitcoin/lib/p2sh_p2wsh.js","../../unchained-bitcoin/lib/p2wsh.js","../../unchained-bitcoin/lib/block_explorer.js"],"names":["_regeneratorRuntime","__webpack_require__","Object","defineProperty","exports","value","TrezorSignMultisigTransaction","TrezorExportExtendedPublicKey","TrezorExportPublicKey","TrezorExportHDNode","TrezorInteraction","_addressScriptTypes","_unchainedBitcoin","_interaction","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperty","key","enumerable","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","call","ReferenceError","_assertThisInitialized","_get","property","receiver","Reflect","get","base","object","hasOwnProperty","_getPrototypeOf","_superPropBase","desc","getOwnPropertyDescriptor","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","TrezorConnect","manifest","email","appUrl","_WalletInteraction","_ref","_this","network","this","trezorCoin","coin","WalletInteraction","messages","PENDING","push","level","INFO","text","code","ACTIVE","_TrezorInteraction","_ref2","_this2","bip32Path","bip32Paths","bip32PathSegments","split","ERROR","coinPath","NETWORKS","MAINNET","match","TESTNET","result","async","_context","prev","next","awrap","getPublicKey","bundle","map","bip32path","path","sent","Error","success","payload","error","abrupt","stop","_TrezorExportHDNode","apply","arguments","_context2","Array","isArray","publicKey","_TrezorExportHDNode2","_context3","xpub","_TrezorInteraction2","_ref3","_this3","inputs","outputs","concat","trezorInputs","trezorOutputs","transaction","_this4","_context4","input","inputIndex","trezorInput","output","trezorOutput","signTransaction","signatures","addressScriptTypes","MULTISIG_ADDRESS_TYPES","P2WSH","P2SH","P2SH_P2WSH","requiredSigners","multisigRequiredSigners","multisig","addressType","multisigAddressType","script_type","m","pubkeys","multisigPublicKeys","address_n","node","depth","child_num","fingerprint","chain_code","repeat","public_key","trezorPublicKey","fill","prev_hash","txid","prev_index","index","bip32PathToSequence","amount","amountSats","toString","toFixed","address","Buffer","exportLedgerPubKey","ledgerbtc","compressedPublicKey","_context5","getWalletPublicKey","verify","compressPublicKey","t0","message","signMultisigSpendLedger","LedgerSignMultisigTransaction","LedgerExportExtendedPublicKey","LedgerExportPublicKey","LedgerExportHDNode","LedgerInteraction","bitcoin","bip32","TransportU2F","LedgerBtc","_LedgerInteraction","WARNING","transport","publicKeys","_result","_LedgerExportHDNode","publicKeyObject","_LedgerExportHDNode2","key_path","parent_path","parent_res","slice","join","generateXPub","isTestnet","toBase58","_LedgerInteraction2","setExchangeTimeout","testnet","txTmp","j","txToSign","txHex","segwit","splitTx","outputScriptHex","ledgerIns","ledgerKeySets","_context6","TransactionBuilder","setVersion","networks","addOutput","toNumber","addInput","buildIncomplete","toHex","splitTransaction","serializeTransactionOutputs","ledgerInput","signP2SHTransaction","tx","transactionHex","scriptToHex","multisigRedeemScript","multisigWitnessScript","parent","child","child_path","parent_compressed_pubkey","compressed_pubkey","fromPublicKey","from","chainCode","pnode","parentFingerprint","sequence","HermitSignTransaction","HermitExportExtendedPublicKey","HermitExportPublicKey","HermitExport","HermitInteraction","_hiBase","_interopRequireDefault","_pako","__esModule","default","encodedString","compressedBytes","decode","asBytes","_decompressAndParseJSON","base32DecodingError","decompressedJSON","inflate","to","_parseJSON","decompressError","json","JSON","parse","parseJSONError","data","jsonString","stringify","_compressAndBase32Encode","encodeJSONError","console","deflate","gzip","_base32Encode","compressionError","encode","base32EncodingError","_HermitInteraction","_HermitExport","instructions","command","mode","_parseQRCodeData","pubkey","_HermitExport2","_HermitExport3","supported","inputAddressType","inputsAreSupported","outputsAreSupported","UNSUPPORTED","signatureRequestData","encodedData","_encodeQRCodeData","hermitInputsByRedeemScript","redeemScriptHex","values","module","externalLink","url","react_default","a","createElement","href","rel","downloadFile","body","filename","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","URL","createObjectURL","download","appendChild","click","removeChild","naiveCoinSelection","spendableInputs","outputTotal","selectedUtxos","inputTotal","BigNumber","_loop","spendableInput","utxos","forEach","utxo","objectSpread","change","plus","balanceSats","isGreaterThanOrEqualTo","Disclaimer","Card","CardHeader","title","CardContent","Help","Box","mt","mb","Typography","variant","Grid","container","spacing","item","md","direction","List","ListItem","ListItemIcon","Description","ListItemText","YouTube","GitHub","CardActions","Button","BugReport","components_Disclaimer","SET_NETWORK","SET_TOTAL_SIGNERS","SET_REQUIRED_SIGNERS","SET_ADDRESS_TYPE","SET_FROZEN","setFrozen","NetworkPicker","handleNetworkChange","event","setNetwork","_this$props","frozen","FormControl","component","RadioGroup","FormControlLabel","id","control","Radio","color","name","label","onChange","checked","disabled","FormHelperText","React","Component","mapDispatchToProps","connect","state","settings","MAX_TOTAL_SIGNERS","QuorumPicker","renderIncrementRequiredSigners","totalSigners","IconButton","onClick","handleIncrementRequiredSigners","AddCircle","renderDecrementRequiredSigners","_this$props2","handleDecrementRequiredSigners","RemoveCircle","renderIncrementTotalSigners","_this$props3","handleIncrementTotalSigners","renderDecrementTotalSigners","_this$props4","handleDecrementTotalSigners","_this$props5","setRequiredSigners","preventDefault","_this$props6","_this$props7","setTotalSigners","_this$props8","_this$props9","justify","xs","alignItems","number","AddressTypePicker","handleTypeChange","setType","actionWrapper","numberedActionWrapper","wrappedNumberedActions","mapping","actionIndex","wrappedMapping","actionFunctionNames","keys","actionFunctionName","actionType","ClientPicker","url_edited","setUrl","handleUrlChange","setUrlError","validateUrl","setState","handleUsernameChange","setUsername","setUsernameError","username","validateUsername","handlePasswordChange","setPassword","setPasswordError","password","validatePassword","toggle","client","charAt","toUpperCase","Switch_Switch","host","exec","pass","url_error","username_error","password_error","publicNotes","TextField","fullWidth","helperText","privateNotes","wrappedActions","setStatus","_callee2","utxosResult","regenerator_default","wrap","axios","blockExplorerAPIURL","Promise","all","asyncToGenerator","mark","_callee","transactionResult","confirmed","status","vout","satoshisToBitcoins","_x8","response","_callee3","addressesult","addressData","used","chain_stats","funded_txo_count","mempool_stats","_callee4","feeEstimatesResult","feeEstimates","Math","ceil","_callee5","broadcastResult","post","callBitcoind","auth","method","params","_args2","undefined","_ref6","resolve","reject","headers","Accept","Content-Type","jsonrpc","then","resp","catch","_x9","isWalletAddressNotFoundError","e","bitcoindParams","addresses","_ref7","addressParam","promises","previousTransactions","mapindex","confirmations","bitcoinsToSatoshis","_x10","bitcoindGetAddressStatus","_x5","_bitcoindGetAddressStatus","_callee6","_ref3$numBlocks","numBlocks","feeRate","feerate","_callee7","_ref4","hex","_context7","log","BLOCK_EXPLORER","fetchAddressUTXOs","_x","_x2","_blockExplorerGetAddresesUTXOs","blockExplorerGetAddresesUTXOs","_x4","_bitcoindListUnspent","bitcoindListUnspent","getAddressStatus","_x3","_blockExplorerGetAddressStatus","blockExplorerGetAddressStatus","fetchFeeEstimate","_blockExplorerGetFeeEstimate","blockExplorerGetFeeEstimate","_x6","_bitcoindEstimateSmartFee","bitcoindEstimateSmartFee","broadcastTransaction","_x7","_blockExplorerBroadcastTransaction","blockExplorerBroadcastTransaction","_bitcoindSendRawTransaction","bitcoindSendRawTransaction","WalletConfirmation","render","Table","TableHead","TableRow","TableCell","TableBody","renderConfirmationInfo","extendedPublicKeyImporters","importer","extendedPublicKey","quorum","UPDATE_DEPOSIT_NODE","UPDATE_CHANGE_NODE","RESET_NODES_SPEND","UPDATE_AUTO_SPEND","UPDATE_WALLET_NAME","UPDATE_WALLET_MODE","RESET_WALLET_VIEW","SPEND_NODES","WALLET_MODES","VIEW","DEPOSIT","SPEND","updateDepositNodeAction","updateChangeNodeAction","updateAutoSpendAction","resetWalletView","CHOOSE_PERFORM_SPEND","SET_INPUTS","ADD_OUTPUT","SET_OUTPUT_ADDRESS","SET_OUTPUT_AMOUNT","DELETE_OUTPUT","SET_FEE_RATE","SET_FEE","FINALIZE_OUTPUTS","RESET_OUTPUTS","SET_TXID","RESET_TRANSACTION","SET_IS_WALLET","SET_CHANGE_OUTPUT_INDEX","setInputs","setOutputAddress","setOutputAmount","amountString","setFeeRate","valueString","finalizeOutputs","finalized","Copyable","copied","timer","componentWillUnmount","clearTimeout","newline","children","stopPropagation","react_copy_to_clipboard_lib_default","onCopy","options","format","className","badge","FileCopy","fontSize","setTimeout","defaultProps","icon","depositTimer","WalletDeposit","amountError","showReceived","getDepositAddress","depositNode","updateDepositNode","setInterval","clearInterval","reduce","accumulator","currentValue","fetchedUTXOs","fetchUTXOsError","renderReceived","ml","handleAmountChange","decimal","qrString","_this$state","_this$state2","components_Copyable","qrcode_react_lib_default","size","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","ContentProps","aria-describedby","wallet","deposits","nextNode","UTXOSet","renderInputs","confirmedStyle","styles","utxoTxid","unconfirmed","confirmedTitle","hover","blockExplorerTransactionURL","OpenInNew","inputsTotalSats","TableFooter","colSpan","MultisigDetails","renderScript","script","ops","scriptToOps","sm","redeemScript","witnessScript","align","blockExplorerAddressURL","Chip","networkLabel","multisigTotalSigners","Node","componentDidMount","generate","spend","walletMode","addressKnown","spending","Checkbox","handleSpend","isEqualTo","renderAddress","addressContent","addressUsed","spent","Launch_default","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","ExpansionPanelDetails","components_MultisigDetails","isGreaterThan","Spend_UTXOSet","present","addNode","updateNode","updateAutoSpend","filter","interval","ownProps","braid","nodes","info","BitcoindAddressImporter","imported","importError","rescan","addressesError","addressPresent","autoImport","checkAddress","handleRescan","_status","import","statusText","importCallback","_ref5","imports","scriptPubKey","timestamp","bitcoindImportMulti","responseError","c","prevProps","pluralOrSingularAddress","NodeSet","page","nodesPerPage","filterIncludeSpent","filterIncludeZeroBalance","unknownAddresses","renderFilters","FormGroup","row","FormLabel","mr","filterAddresses","_this$setState","getUnknownAddressNodes","changeNodes","depositNodes","addressesImported","unknown","addr","addressStatus","updates","getNodeSet","nodeSet","nodesObject","currentNode","renderNodes","_this$state3","startingIndex","nodesRows","whichOne","nodeRow","Wallet_Node","handlePageChange","selected","handleChangeRowsPerPage","pageCount","rowCount","generateAnotherPage","_this$state4","toggleChange","_this$state5","canLoad","useAddressImporter","components_BitcoindAddressImporter","style","tableLayout","width","TablePagination","count","rowsPerPage","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage","OutputEntry","addChangeAddress","changeNode","setAddress","setChangeOutput","handleBalance","renderChangeAdornment","changeOutputIndex","disable","endAdornment","InputAdornment","position","Tooltip","placement","AccountBalanceWallet_default","handleAddressChange","hasAddressError","addressError","setAmount","hasAmountError","isNotBalanceable","feeError","newAmount","autoBalancedAmount","validateOutputAmountBTC","isBalanceable","hasBalanceError","balanceError","fee","outputTotalSats","feeSats","minus","balanceAction","hasError","handleDelete","remove","_this$props10","finalizedOutputs","placeholder","outputsFormInput","InputProps","Delete","OutputsForm","titleRef","createRef","feeRateFetchError","initialOutputState","scrollToTitle","componentDidUpdate","signatureImporters","k","current","scrollIntoView","behavior","renderOutputs","Spend_OutputEntry","inputsTotal","outputsAndFeeTotal","hasFeeRateFetchError","hasFeeRateError","feeRateError","hasFeeError","handleAddOutput","handleFeeRateChange","handleFeeChange","setFee","handleFinalize","handleReset","resetOutputs","getFeeEstimate","newFeeRate","finish","gatherSignaturesDisabled","outputAmount","ref","Speed","readOnly","TextSignatureImporter","signatureJSON","multiline","rows","handleChange","finalize","setError","parseError","validateAndSetSignature","QR_CODE_READER_DELAY","HermitReader","walletState","interaction","startText","commandMessage","messageFor","handleStart","react_qr_reader_lib_default","delay","onError","handleError","onScan","handleScan","facingMode","handleStop","onStart","onClear","onSuccess","HermitDisplayer","errorMessage","string","WalletFeedback","filteredMessages","renderMessage","messageIcon","excludeCodes","excludeCode","includes","Info","Warning","esm_Error","messageColrName","HermitSignatureImporter","classCallCheck","possibleConstructorReturn","signatureImporter","disableChangeMethod","resetBIP32Path","bip32PathError","signatureError","components_WalletFeedback","messagesFor","handleBIP32PathChange","hasBIP32PathError","bip32PathIsDefault","Hermit_HermitDisplayer","Hermit_HermitReader","clear","signature","enableChangeMethod","validateAndSetBIP32Path","defaultBIP32Path","bip32PathFinalized","isSupported","HardwareWalletSignatureImporter","inConstructor","verified","walletType","HardwareWalletSignMultisigTransaction","HardwareWalletExportPublicKey","messageTextFor","renderAction","renderDeviceConfirmInfo","renderTargets","verifyError","sign","hasMessagesFor","setBIP32PathError","run","verifyPublicKey","publicKeyIndex","indexOf","signatureImporterNum","otherSignatureImporter","otherPublicKeyIndex","stateUpdate","EditableName","editing","newName","submit","Check","cancel","Clear","startEditing","Edit","setName","setSignatureImporterName","setSignatureImporterMethod","setSignatureImporterBIP32Path","setSignatureImporterPublicKeys","setSignatureImporterSignature","setSignatureImporterFinalized","setSignatureImporterComplete","TEXT","SignatureImporter","showUnsignedTransaction","getCurrent","components_EditableName","renderImport","notMyTurn","labelId","InputLabel","Select","handleMethodChange","MenuItem","TREZOR","LEDGER","HERMIT","renderImportByMethod","Spend_TextSignatureImporter","Spend_HermitSignatureImporter","Spend_HardwareWalletSignatureImporter","setMethod","reset","renderUnsignedTransaction","unsignedTransaction","handleHideUnsignedTransaction","handleShowUnsignedTransaction","setSignature","setPublicKeys","setFinalized","isWallet","multisigBIP32Root","multisigBIP32Path","setBIP32Path","callback","errback","validateBIP32Path","renderSignature","inputsSignatures","setComplete","finalizedSignatureImporters","inputNumber","inputSignature","validateHex","validateMultisigSignature","finalizedSignatureImporterNum","finalizedSignatureImporter","Transaction","broadcasting","buildSignedTransaction","inputsSignaturesByPublicKey","inputSignaturesByPublicKey","signerInputPublicKey","signerInputSignature","signedMultisigTransaction","handleBroadcast","setTxid","signedTransaction","transactionURL","signedTransactionHex","ExtendedPublicKeySelector","selection","renderKeySelectorMenu","renderSignatureImporter","Spend_SignatureImporter","handleKeyChange","renderKeySelectorMenuItems","extendedPublicKeys","extendedPublicKeyImporterNum","extendedPublicKeyImporter","importMethod","WalletSign","handleCancel","renderKeySelectors","signaturesFinalized","Spend_Transaction","transactionFinalized","handleReturn","keySelectors","keySelectorNum","Wallet_ExtendedPublicKeySelector","renderSignatureImporters","every","spendNodes","updateChangeNode","changeAddress","resetTransaction","coinSelectTimer","WalletSpend","outputsAmount","feeAmount","renderSpend","autoSpend","handleSpendMode","Wallet_NodeSet","selectCoins","resetNodesSpend","coinSelection","sum","isNaN","selectedInputs","selectedUtxo","nextProps","Spend_OutputsForm","Wallet_WalletSign","WalletView","WalletControl","scrollRef","totalBalance","Tabs","handleModeChange","indicatorColor","textColor","Tab","renderModeComponent","Wallet_WalletDeposit","Wallet_WalletSpend","Wallet_WalletView","setMode","SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE","setExtendedPublicKeyImporterName","resetExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterMethod","setExtendedPublicKeyImporterExtendedPublicKey","setExtendedPublicKeyImporterFinalized","MAX_TRAILING_EMPTY_NODES","MAX_FETCH_UTXOS_ERRORS","WalletGenerator","generating","extendedPublicKeyCount","downloadWalletDetails","walletDetailsText","walletDetailsFilename","walletName","extendedPublicKeyImporterBIP32Paths","extendedPublicKeyImporterBIP32Path","toggleImporters","setImportersVisible","configuring","freeze","isChange","update","attemptToKeepGenerating","multisigUpdates","generateMultisig","extendedPublicKeyImporterNumber","utxoUpdates","deriveChildPublicKey","sort","generateMultisigFromPublicKeys","fetchUTXOs","generateNextNodeIfNecessary","trailingEmptyNodes","fetchUTXOsErrors","allBIP32Paths","p1","p2","p1Segments","p2Segments","parseInt","pathSegments","maxIndex","nextBIP32Path","setIsWallet","Wallet_WalletControl","ConfirmWallet","updateAutoSpned","DEFAULT_BIP32_PATH","ExtendedPublicKeyExtendedPublicKeyImporter","setBIP32PathToDefault","extendedPublicKeyError","handleExtendedPublicKeyChange","hasExtendedPublicKeyError","validateAndSetExtendedPublicKey","deriveChildExtendedPublicKey","validateExtendedPublicKey","find","TextExtendedPublicKeyImporter","HermitExtendedPublicKeyImporter","bip32_path","HardwareWalletExtendedPublicKeyImporter","HardwareWalletExportExtendedPublicKey","Conflict","XPUB","ExtendedPublicKeyImporter","conversionMessage","Wallet_HardwareWalletExtendedPublicKeyImporter","Wallet_HermitExtendedPublicKeyImporter","Wallet_ExtendedPublicKeyExtendedPublicKeyImporter","Wallet_TextExtendedPublicKeyImporter","setExtendedPublicKey","moveUp","moveDown","renderBIP32Path","renderExtendedPublicKey","_this$props11","conversionAppend","_this$props12","convertedPublicKey","convertAndValidateExtendedPublicKey","extendedPublicKeyImporterIndex","_this$props13","finalizedNetwork","hasConflict","conflict","conflictMessage","CreateAddress_Conflict","require","CreateWallet","showSettings","renderExtendedPublicKeyImporters","Wallet_WalletGenerator","renderSettings","components_QuorumPicker","components_AddressTypePicker","components_NetworkPicker","components_ClientPicker","right","toggleDrawer","Settings","Drawer","anchor","onClose","display","Wallet_ExtendedPublicKeyImporter","SORT_PUBLIC_KEY_IMPORTERS","UPDATE_MULTISIG_ADDRESS","setPublicKeyImporterName","resetPublicKeyImporterBIP32Path","setPublicKeyImporterBIP32Path","setPublicKeyImporterMethod","setPublicKeyImporterPublicKey","setPublicKeyImporterFinalized","movePublicKeyImporterUp","movePublicKeyImporterDown","AddressGenerator","publicKeyCount","isInConflict","publicKeyImporters","some","publicKeyImporter","publicKeysAreCanonicallySorted","sortedPublicKeys","canonicallySortPublicKeys","sortPublicKeyImporters","setMultisigAddress","publicKeyImporterNum","downloadAddressDetails","addressDetailsText","addressDetailsFilename","redeemScriptLine","witnessScriptLine","scriptsSpacer","publicKeyImporterBIP32Paths","publicKeyImporterBIP32Path","canonicallySorted","TextPublicKeyImporter","validateAndSetPublicKey","validatePublicKey","ExtendedPublicKeyPublicKeyImporter","HermitPublicKeyImporter","publicKeyError","HardwareWalletPublicKeyImporter","PublicKeyImporter","ArrowUpward","ArrowDownward","CreateAddress_HardwareWalletPublicKeyImporter","CreateAddress_HermitPublicKeyImporter","CreateAddress_ExtendedPublicKeyPublicKeyImporter","CreateAddress_TextPublicKeyImporter","setPublicKey","renderPublicKey","publicKeyImporterIndex","CreateAddress","renderPublicKeyImporters","CreateAddress_AddressGenerator","renderClientPicker","CreateAddress_PublicKeyImporter","CHOOSE_CONFIRM_OWNERSHIP","SET_OWNERSHIP_MULTISIG","RESET_PUBLIC_KEY_IMPORTER","RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_METHOD","SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY","ScriptEntry","scriptHex","scriptError","hasScriptError","hasFetchUTXOsError","scriptName","scriptTitle","substring","handleScriptChange","generateMultisigFromHex","renderDetails","chosePerformSpend","choseConfirmOwnership","buttonsDisabled","performSpend","confirmOwnership","choosePerformSpend","fetchUTXOsResult","isLessThanOrEqualTo","chooseConfirmOwnership","setOwnershipMultisig","autoFocus","ownership","chosen","ConfirmOwnership","renderConfirmation","GreenListItemIcon","styled","Check_default","Clear_default","role","Spend","Spend_ScriptEntry","renderBody","Spend_ConfirmOwnership","spendable","addressFinalized","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","Navbar","classes","AppBar","Toolbar","logo","Footer","src","alt","height","version","ErrorBoundary","errorInfo","mx","my","whiteSpace","componentStack","App","CssBaseline","Container","maxWidth","components_Navbar","ErrorBoundry_ErrorBoundary","HashRouter","Switch","Route","Wallet","components_Footer","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","updateState","initialState","initialNodeState","spendingSats","action","newNodes","updatedState","nodeFoundWithValue","otherNode","getNextNode","braidReducer","resetSpend","Date","getTime","initialExtendedPublicKeyImporterState","bip32PathModified","confliect","1","2","3","finalizedAddressType","updateExtendedPublicKeyImporterState","field","extendedPublicKeyImporterChange","newState","setConflict","updateImporterPaths","initialPublicKeyImporterState","updatePublicKeyImporterState","publicKeyImporterChange","initialSignatureImporterState","updateSignatureImporterState","signatureImporterChange","sortInputs","b","x","toLowerCase","y","n","initialOutputsState","validateTransaction","diff","isLessThan","absoluteValue","setFeeForRate","feeRateString","nout","estimateMultisigTransactionFee","numInputs","numOutputs","feesPerByteInSatoshis","spendReducers","combineReducers","updateMultisig","keyResetState","updateInputs","newOutputs","toConsumableArray","validateAddress","outputIndex","updateOutputAddress","updateOutputAmount","deleteOutput","validateFeeRate","updateFeeRate","feeString","validateFeeBTC","estimateMultisigTransactionFeeRate","feesInSatoshis","updateFee","unsignedMultisigTransaction","finalizeSignatureImporterState","walletReducers","resetWalletViews","rootReducers","updateNetwork","updateAddressType","stub","updateTotalSigners","updateFinalizedSettings","abovePublicKeyImporter","belowPublicKeyImporter","sortedPublicKeyImporters","publicKeyImportersChange","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","logger","ReduxPromise","thunk","ReactDOM","es","components_App","getElementById","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","feeMagicBtn","toHexString","byteArray","_byte","inputString","test","num","_bignumber","shiftedBy","networkData","UnsupportedInteraction","_bowser","environment","getParser","userAgent","failureText","failureCode","pending","active","unsupported","allMessages","matchingMessages","_utils","_bip","_keys","_networks","_script","_addresses","_transactions","_multisig","_block_explorer","toASM","pathString","splice","pathSegment","substr","HARDENING_OFFSET","bip32SequenceToPath","BIP32_PATH_REGEX","BIP32_HARDENED_PATH_REGEX","BIP32_UNHARDENED_PATH_REGEX","segmentStrings","segmentString","validateBIP32PathSegment","validateBIP32PathSegments","fromBase58","derivePath","pow","MAX_BIP32_HARDENED_NODE_INDEX","MAX_BIP32_NODE_INDEX","numberString","hardened","numberError","Number","_exportNames","_trezor","_ledger","_hermit","extendedPublicKeyConvert","targetPrefix","preliminaryErrors","preExtendedPublicKeyValidation","networkError","extendedPublicKeyNetworkValidateion","extendedPublicKeyValidation","convertedExtendedPublicKey","_extendedPublicKeyValidation","_bitcoinjsLib","ECPair","pubkeyBuffer","prefix","prefixBuffer","alloc","extendedPublicKeyVersions","bs58check","ypub","zpub","Ypub","Zpub","tpub","upub","vpub","Upub","Vpub","validatePrefix","prefixType","targetError","sourcePrefix","sourceError","extendedPublicKeyNoPrefix","trim","extendedPublicKeyNewPrefix","err","requiredPrefix","notXpubError","magic_byte_regex","TESTNET_ADDRESS_MAGIC_BYTE_PATTERN","MAINNET_ADDRESS_MAGIC_BYTE_PATTERN","isBech32","BECH32_ADDRESS_MAGIC_BYTE_REGEX","address_regex","BECH32_ADDRESS_BODY_PATTERN","ADDRESS_BODY_PATTERN","_bitcoinAddressValidation","ZERO","MAX_FEE_RATE","feeBTCString","MAX_FEE_BTC","DUST_LIMIT_SATS","dp","redeem","multisigAddress","_len","_key","payments","p2ms","generateMultisigFromRedeemScript","config","dividedBy","estimateMultisigTransactionLength","multipliedBy","transactionBuilder","hash","hashForWitnessV0","SIGHASH_ALL","hashForSignature","multisigSignatureHash","signatureBuffer","encodedSignerInputSignatureBuffer","decodedSignerInputSignatureBuffer","r","s","rToUse","byteLength","set","multisigSignatureBuffer","signatureNoSighashType","publicKeyBuffer","keyPair","fromHex","arr","inputPublicKeys","sortedSignatures","witness","multisigWitnessField","setWitness","_witness","scriptSig","ins","arr2","_arrayWithoutHoles","iter","_iterableToArray","_nonIterableSpread","_scriptSig","signersInputSignatures","signatureOps","inputScript","inputScriptBuffer","fromASM","multisigScriptSig","_p2sh","_p2sh_p2wsh","_p2wsh","p2sh","p2wsh","estimateMultisigP2SHTransactionLength","estimateMultisigP2SHP2WSHTransactionLength","estimateMultisigP2WSHTransactionLength","wit","baseSize","sigSize","witnessSize","blockExplorerURL","blockExplorerBaseURL","BASE_URL_MAINNET","BASE_URL_TESTNET"],"mappings":"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","file":"static/js/main.43c92d69.chunk.js","sourcesContent":["\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrezorSignMultisigTransaction = exports.TrezorExportExtendedPublicKey = exports.TrezorExportPublicKey = exports.TrezorExportHDNode = exports.TrezorInteraction = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nvar _addressScriptTypes;\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar TrezorConnect = require(\"trezor-connect\")[\"default\"];\n\nTrezorConnect.manifest({\n  email: \"foo@bar.com\",\n  appUrl: \"https://localhost:3000\"\n});\n/**\n * Interaction with Trezor hardware wallets\n * @extends {module:interaction.WalletInteraction}\n */\n\nvar TrezorInteraction =\n/*#__PURE__*/\nfunction (_WalletInteraction) {\n  _inherits(TrezorInteraction, _WalletInteraction);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   */\n\n\n  function TrezorInteraction(_ref) {\n    var _this;\n\n    var network = _ref.network;\n\n    _classCallCheck(this, TrezorInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrezorInteraction).call(this, {\n      network: network\n    }));\n    _this.trezorCoin = coin(network);\n    return _this;\n  } // installInstructions() {\n  //   return [\"Make sure you have installed the Trezor bridge software.  Test your installation at https://trezor.io/start\"];\n  // }\n\n\n  _createClass(TrezorInteraction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorInteraction.prototype), \"messages\", this).call(this);\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        text: \"Make sure your Trezor hardware wallet is plugged in.\",\n        code: \"trezor.device.connect\"\n      });\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"Your browser should open a new Trezor Connect window.  If you do not see this window, ensure you have enabled popups for this site.\",\n        code: \"trezor.popup.generic\"\n      });\n\n      return messages;\n    }\n  }]);\n\n  return TrezorInteraction;\n}(_interaction.WalletInteraction);\n/**\n * Class for wallet interaction at a given BIP32 path.\n * @extends {module:trezor.TrezorInteraction}\n */\n\n\nexports.TrezorInteraction = TrezorInteraction;\n\nvar TrezorExportHDNode =\n/*#__PURE__*/\nfunction (_TrezorInteraction) {\n  _inherits(TrezorExportHDNode, _TrezorInteraction);\n  /**\n   *\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {string} [bip32Path] - the BIP32 path from which to retrieve a single public key.  Note, you must provide either the bip32Path or the bip32Paths argument.\n   * @param {Array<string>} [bip32Paths] - the BIP32 path from which to retrieve a multiple public keys\n   * @example\n   * const trezorNode = new TrezorExportHDNode({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"})\n   */\n\n\n  function TrezorExportHDNode(_ref2) {\n    var _this2;\n\n    var network = _ref2.network,\n        bip32Path = _ref2.bip32Path,\n        bip32Paths = _ref2.bip32Paths;\n\n    _classCallCheck(this, TrezorExportHDNode);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportHDNode).call(this, {\n      network: network\n    }));\n    _this2.bip32Paths = bip32Paths || [bip32Path];\n    return _this2;\n  }\n\n  _createClass(TrezorExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorExportHDNode.prototype), \"messages\", this).call(this);\n\n      for (var i = 0; i < this.bip32Paths.length; i++) {\n        var bip32Path = this.bip32Paths[i];\n        var bip32PathSegments = (bip32Path || '').split('/');\n\n        if (bip32PathSegments.length < 4) {\n          // m, 45', 0', 0', ...\n          messages[_interaction.PENDING].push({\n            level: _interaction.ERROR,\n            text: \"BIP32 path must be at least depth 3.\",\n            code: \"trezor.bip32_path.minimum\"\n          });\n\n          break;\n        } else {\n          var coinPath = bip32PathSegments[2];\n\n          if (this.network === _unchainedBitcoin.NETWORKS.MAINNET) {\n            if (!coinPath.match(/^0'/)) {\n              messages[_interaction.PENDING].push({\n                level: _interaction.ERROR,\n                text: \"Mainnet BIP32 path must have a second component of 0'\",\n                code: \"trezor.bip32_path.mismatch\"\n              });\n\n              break;\n            }\n          }\n\n          if (this.network === _unchainedBitcoin.NETWORKS.TESTNET) {\n            if (!coinPath.match(/^1'/)) {\n              messages[_interaction.PENDING].push({\n                level: _interaction.ERROR,\n                text: \"Testnet BIP32 path must have a second component of 1'\",\n                code: \"trezor.bip32_path.mismatch\"\n              });\n\n              break;\n            }\n          }\n        }\n      }\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Export public key'.  You may be prompted to enter your PIN.\",\n        code: \"trezor.popup.export_hdnode\"\n      });\n\n      return messages;\n    }\n    /**\n     * Retrieve key from Trezor device for a given instance\n     * @override\n     * @example\n     * const trezorNode = new TrezorExportHDNode({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"});\n     * const result = await trezorNode.run();\n     * console.log(result.publicKey);\n     * @returns {Object|Array<object>} object or array of objects containing public key and extended public key for the BIP32 path of a given instance\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var result;\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(this.bip32Paths.length > 1)) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(TrezorConnect.getPublicKey({\n                bundle: this.bip32Paths.map(function (bip32path) {\n                  return {\n                    path: bip32path\n                  };\n                }),\n                coin: this.trezorCoin\n              }));\n\n            case 3:\n              result = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 6:\n              if (!(this.bip32Paths.length === 1)) {\n                _context.next = 12;\n                break;\n              }\n\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(TrezorConnect.getPublicKey({\n                path: this.bip32Paths[0],\n                coin: this.trezorCoin\n              }));\n\n            case 9:\n              result = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 12:\n              throw new Error(\"You must provide a bip32 path string or an array of bip32 paths\");\n\n            case 13:\n              if (result.success) {\n                _context.next = 15;\n                break;\n              }\n\n              throw new Error(result.payload.error);\n\n            case 15:\n              return _context.abrupt(\"return\", result.payload);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return TrezorExportHDNode;\n}(TrezorInteraction);\n/**\n * Class for wallet public key interaction at a given BIP32 path.\n * @extends {module:trezor.TrezorExportHDNode}\n */\n\n\nexports.TrezorExportHDNode = TrezorExportHDNode;\n\nvar TrezorExportPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode) {\n  _inherits(TrezorExportPublicKey, _TrezorExportHDNode);\n\n  function TrezorExportPublicKey() {\n    _classCallCheck(this, TrezorExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Retrieve public key from Trezor device for a given instance\n     * @example\n     * const trezorNode = new TrezorExportPublicKey({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"});\n     * const publicKey = await trezorNode.run();\n     * console.log(publicKey);\n     * @returns {string|Array<string>} public key or keys for the BIP32 paths of a given instance\n     */\n    value: function run() {\n      var payload;\n      return _regeneratorRuntime.async(function run$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(TrezorExportPublicKey.prototype), \"run\", this).call(this));\n\n            case 2:\n              payload = _context2.sent;\n\n              if (!Array.isArray(payload)) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", payload.map(function (key) {\n                return key.publicKey;\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", payload.publicKey);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return TrezorExportPublicKey;\n}(TrezorExportHDNode);\n/**\n * Class for wallet extended public key interaction at a given BIP32 path.\n * @extends {module:trezor.TrezorExportHDNode}\n */\n\n\nexports.TrezorExportPublicKey = TrezorExportPublicKey;\n\nvar TrezorExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode2) {\n  _inherits(TrezorExportExtendedPublicKey, _TrezorExportHDNode2);\n\n  function TrezorExportExtendedPublicKey() {\n    _classCallCheck(this, TrezorExportExtendedPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportExtendedPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportExtendedPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Retrieve extended public key from Trezor device for a given instance\n     * @example\n     * const trezorNode = new TrezorExportExtendedPublicKey({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"});\n     * const xpub = await trezorNode.run();\n     * console.log(xpub);\n     * @returns {string} extended public key for the BIP32 path of a given instance\n     */\n    value: function run() {\n      var payload;\n      return _regeneratorRuntime.async(function run$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(TrezorExportExtendedPublicKey.prototype), \"run\", this).call(this));\n\n            case 2:\n              payload = _context3.sent;\n              return _context3.abrupt(\"return\", payload.xpub);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return TrezorExportExtendedPublicKey;\n}(TrezorExportHDNode);\n/**\n * Class for wallet signing interaction.\n * @extends {module:trezor.TrezorInteraction}\n */\n\n\nexports.TrezorExportExtendedPublicKey = TrezorExportExtendedPublicKey;\n\nvar TrezorSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_TrezorInteraction2) {\n  _inherits(TrezorSignMultisigTransaction, _TrezorInteraction2);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n\n\n  function TrezorSignMultisigTransaction(_ref3) {\n    var _this3;\n\n    var network = _ref3.network,\n        inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, TrezorSignMultisigTransaction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorSignMultisigTransaction).call(this, {\n      network: network\n    }));\n    _this3.inputs = inputs;\n    _this3.outputs = outputs;\n    _this3.bip32Paths = bip32Paths;\n    return _this3;\n  }\n\n  _createClass(TrezorSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorSignMultisigTransaction.prototype), \"messages\", this).call(this);\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Sign \".concat(this.network, \" transaction'.  You may be prompted to enter your PIN.\"),\n        code: \"trezor.popup.sign\"\n      });\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"You Trezor device will ask you to confirm each output address above with its corresponding output amount.  Check each address and amount carefully against both the values displayed in this application and your own expectations.\",\n        code: \"trezor.signing.outputs\"\n      });\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"Finally, your Trezor device will ask you to confirm the overall transaction output amount and fee.  Check both carefully against both the values displayed in this application and your own expectations.\",\n        code: \"trezor.signing.final\"\n      });\n\n      return messages;\n    }\n    /**\n     * Retrieve extended public key from Trezor device for a given instance\n     * @example\n     * import {generateMultisigFromHex, NETWORKS, MULTISIG_ADDRESS_TYPES} from \"unchained-bitcoin\";\n     * ...\n     * const input = {\n     *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n     *     index: 1,\n     *     multisig: generateMultisigFromHex(NETWORKS.TESTNET, MULTISIG_ADDRESS_TYPES.P2SH, redeemScript),\n     *     amountSats: BigNumber(1234000)\n     * }\n     * const output = {\n     *     amountSats: BigNumber(1299659),\n     *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n     * }\n     * const trezorSigner = new TrezorSignMultisigTransaction({\n     *   network: \"testnet\",\n     *   inputs: [input],\n     *   outputs: [output],\n     *   bip32Paths: [\"m/45'/0'/0'/0\"]\n     * });\n     * const signatures = await trezorSigner.run();\n     * console.log(signatures);\n     * @returns {string} string representation of an array of signatures\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this4 = this;\n\n      var trezorInputs, trezorOutputs, transaction, result;\n      return _regeneratorRuntime.async(function run$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              trezorInputs = this.inputs.map(function (input, inputIndex) {\n                return trezorInput(input, _this4.bip32Paths[inputIndex]);\n              });\n              trezorOutputs = this.outputs.map(function (output) {\n                return trezorOutput(output);\n              });\n              transaction = {\n                inputs: trezorInputs,\n                outputs: trezorOutputs,\n                coin: coin(this.network)\n              };\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(TrezorConnect.signTransaction(transaction));\n\n            case 5:\n              result = _context4.sent;\n\n              if (result.success) {\n                _context4.next = 8;\n                break;\n              }\n\n              throw new Error(result.payload.error);\n\n            case 8:\n              return _context4.abrupt(\"return\", result.payload.signatures);\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return TrezorSignMultisigTransaction;\n}(TrezorInteraction);\n/**\n * Retrieve Trezor format for network constant\n * @param {string} network - bitcoin network\n * @private\n * @returns {string} Trezor format of bitcoin network\n */\n\n\nexports.TrezorSignMultisigTransaction = TrezorSignMultisigTransaction;\n\nfunction coin(network) {\n  return network === _unchainedBitcoin.NETWORKS.MAINNET ? \"Bitcoin\" : \"Testnet\";\n}\n\nvar addressScriptTypes = (_addressScriptTypes = {}, _defineProperty(_addressScriptTypes, _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2WSH, 'SPENDWITNESS'), _defineProperty(_addressScriptTypes, _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH, 'SPENDMULTISIG'), _defineProperty(_addressScriptTypes, _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH_P2WSH, 'SPENDP2SHWITNESS'), _addressScriptTypes);\n\nfunction trezorInput(input, bip32Path) {\n  var requiredSigners = (0, _unchainedBitcoin.multisigRequiredSigners)(input.multisig);\n  var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n  var spendType = addressScriptTypes[addressType];\n  return {\n    script_type: spendType,\n    multisig: {\n      m: requiredSigners,\n      pubkeys: (0, _unchainedBitcoin.multisigPublicKeys)(input.multisig).map(function (publicKey) {\n        return trezorPublicKey(publicKey);\n      }),\n      signatures: Array(requiredSigners).fill('')\n    },\n    prev_hash: input.txid,\n    prev_index: input.index,\n    address_n: (0, _unchainedBitcoin.bip32PathToSequence)(bip32Path),\n    amount: input.amountSats.toString()\n  };\n}\n/**\n * Retrieve Trezor formatted input object\n * @param {string} publicKey\n * @private\n * @returns {object} Trezor formatted input\n */\n\n\nfunction trezorPublicKey(publicKey) {\n  return {\n    address_n: [],\n    node: {\n      // FIXME are all these 0's OK?\n      depth: 0,\n      child_num: 0,\n      fingerprint: 0,\n      chain_code: '0'.repeat(64),\n      public_key: publicKey\n    }\n  };\n}\n/**\n * Retrieve Trezor formatted output object\n * @param {object} output\n * @private\n * @returns {object} Trezor formatted output\n */\n\n\nfunction trezorOutput(output) {\n  return {\n    amount: output.amountSats.toFixed(0),\n    address: output.address,\n    script_type: 'PAYTOADDRESS'\n  };\n}","\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exportLedgerPubKey = exportLedgerPubKey;\nexports.signMultisigSpendLedger = signMultisigSpendLedger;\nexports.LedgerSignMultisigTransaction = exports.LedgerExportExtendedPublicKey = exports.LedgerExportPublicKey = exports.LedgerExportHDNode = exports.LedgerInteraction = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nvar bitcoin = require('bitcoinjs-lib');\n\nvar bip32 = require('bip32');\n\nvar TransportU2F = require(\"@ledgerhq/hw-transport-u2f\")[\"default\"];\n\nvar LedgerBtc = require(\"@ledgerhq/hw-app-btc\")[\"default\"];\n/**\n * Interaction with Ledger hardware wallets\n * @extends {module:interaction.WalletInteraction}\n */\n\n\nvar LedgerInteraction =\n/*#__PURE__*/\nfunction (_WalletInteraction) {\n  _inherits(LedgerInteraction, _WalletInteraction);\n\n  function LedgerInteraction() {\n    _classCallCheck(this, LedgerInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerInteraction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerInteraction.prototype), \"messages\", this).call(this);\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        text: \"Make sure your Ledger hardware wallet is plugged in.\",\n        code: \"ledger.device.connect\"\n      });\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        text: \"Make sure you have unlocked your Ledger hardware wallet.\",\n        code: \"ledger.device.unlocked\"\n      });\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        text: \"Make sure you have opened your Ledger hardware wallet to the Bitcoin app.\",\n        code: \"ledger.app.bitcoin\"\n      });\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        text: \"Communicating with Ledger hardware wallet...\",\n        code: \"ledger.active\"\n      });\n\n      return messages;\n    }\n  }]);\n\n  return LedgerInteraction;\n}(_interaction.WalletInteraction);\n/**\n * Class for wallet interaction at a given BIP32 path.\n * @extends {module:ledger.LedgerInteraction}\n */\n\n\nexports.LedgerInteraction = LedgerInteraction;\n\nvar LedgerExportHDNode =\n/*#__PURE__*/\nfunction (_LedgerInteraction) {\n  _inherits(LedgerExportHDNode, _LedgerInteraction);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {string} [bip32Path] - the BIP32 path from which to retrieve a single public key.  Note, you must provide either the bip32Path or the bip32Paths argument.\n   * @param {Array<string>} [bip32Paths] - the BIP32 path from which to retrieve a multiple public keys\n   * @example\n   * const ledgerNode = new LedgerExportHDNode({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"})\n   */\n\n\n  function LedgerExportHDNode(_ref) {\n    var _this;\n\n    var network = _ref.network,\n        bip32Path = _ref.bip32Path,\n        bip32Paths = _ref.bip32Paths;\n\n    _classCallCheck(this, LedgerExportHDNode);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportHDNode).call(this, {\n      network: network\n    }));\n    _this.bip32Paths = bip32Paths || [bip32Path];\n    return _this;\n  }\n\n  _createClass(LedgerExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerExportHDNode.prototype), \"messages\", this).call(this);\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.WARNING,\n        text: \"Your Ledger's screen  may display a 'WARNING!' message.  Click both buttons on your Ledger to proceed to confirming the BIP32 path.\",\n        code: \"ledger.bip32.warning\"\n      });\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.WARNING,\n        text: \"Your Ledger will display part of the BIP32 path \".concat(this.bip32Path, \" and claim it is 'unusual'.  Click both buttons on your Ledger to proceed.  You may need to do this multiple times.\"),\n        code: \"ledger.bip32.instructions\"\n      });\n\n      return messages;\n    }\n    /**\n     * Retrieve key from Ledger device for a given instance\n     * @override\n     * @example\n     * const ledgerNode = new LedgerExportHDNode({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"});\n     * const result = await ledgerNode.run();\n     * console.log(result.publicKey);\n     * @returns {object|Array<object>} object or array containing public key and extended public key for the BIP32 path of a given instance\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var transport, ledgerbtc, result, publicKeys, i, _result;\n\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(TransportU2F.create());\n\n            case 2:\n              transport = _context.sent;\n              ledgerbtc = new LedgerBtc(transport);\n\n              if (!(this.bip32Paths.length === 1)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(ledgerbtc.getWalletPublicKey(this.bip32Paths[0], {\n                verify: true\n              }));\n\n            case 7:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result);\n\n            case 11:\n              if (!(this.bip32Paths.length > 1)) {\n                _context.next = 25;\n                break;\n              }\n\n              publicKeys = [];\n              i = 0;\n\n            case 14:\n              if (!(i < this.bip32Paths.length)) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(ledgerbtc.getWalletPublicKey(this.bip32Paths[i], {\n                verify: i === 0\n              }));\n\n            case 17:\n              _result = _context.sent;\n              publicKeys.push(_result);\n\n            case 19:\n              i++;\n              _context.next = 14;\n              break;\n\n            case 22:\n              return _context.abrupt(\"return\", publicKeys);\n\n            case 25:\n              throw new Error(\"You must provide a bip32 path string or an array of bip32 paths\");\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerExportHDNode;\n}(LedgerInteraction);\n/**\n * Class for wallet public key interaction at a given BIP32 path.\n * @extends {module:ledger.LedgerExportHDNode}\n */\n\n\nexports.LedgerExportHDNode = LedgerExportHDNode;\n\nvar LedgerExportPublicKey =\n/*#__PURE__*/\nfunction (_LedgerExportHDNode) {\n  _inherits(LedgerExportPublicKey, _LedgerExportHDNode);\n\n  function LedgerExportPublicKey() {\n    _classCallCheck(this, LedgerExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(LedgerExportPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Retrieve public key from Ledger device for a given instance\n     * @example\n     * const ledgerKeyExporter = new LedgerExportPublicKey({network: \"mainnet\", bip32Path: \"m/48'/0'/0'/2'/0\"});\n     * const publicKey = await ledgerKeyExporter.run();\n     * console.log(publicKey);\n     * @returns {string|Array<string>} public key or keys for the BIP32 paths of a given instance\n     */\n    value: function run() {\n      var result, compressedPublicKey;\n      return _regeneratorRuntime.async(function run$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(LedgerExportPublicKey.prototype), \"run\", this).call(this));\n\n            case 2:\n              result = _context2.sent;\n\n              if (!result.publicKey) {\n                _context2.next = 8;\n                break;\n              }\n\n              compressedPublicKey = (0, _unchainedBitcoin.compressPublicKey)(result.publicKey);\n              return _context2.abrupt(\"return\", compressedPublicKey);\n\n            case 8:\n              if (!Array.isArray(result)) {\n                _context2.next = 12;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", result.map(function (publicKeyObject) {\n                var compressedPublicKey = (0, _unchainedBitcoin.compressPublicKey)(publicKeyObject.publicKey);\n                return compressedPublicKey;\n              }));\n\n            case 12:\n              throw new {\n                message: \"Unable to export public key.\"\n              }();\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerExportPublicKey;\n}(LedgerExportHDNode);\n/**\n * Class for wallet extended public key(xpub) interaction at a given BIP32 path.\n * @extends {module:ledger.LedgerExportHDNode}\n */\n\n\nexports.LedgerExportPublicKey = LedgerExportPublicKey;\n\nvar LedgerExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_LedgerExportHDNode2) {\n  _inherits(LedgerExportExtendedPublicKey, _LedgerExportHDNode2);\n\n  function LedgerExportExtendedPublicKey() {\n    _classCallCheck(this, LedgerExportExtendedPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportExtendedPublicKey).apply(this, arguments));\n  }\n\n  _createClass(LedgerExportExtendedPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Retrieve extended public key(xpub) from Ledger device for a given instance\n     * @example\n     * const ledgerXpubExporter = new LedgerExportExtendedPublicKey({network, bip32Path});\n     * const xpub = await ledgerXpubExporter.run();\n     * console.log(xpub);\n     * @returns {string} extended public key(xpub) for the BIP32 path of a given instance\n     */\n    value: function run() {\n      var result, transport, key_path, parent_path, ledgerbtc, parent_res, node;\n      return _regeneratorRuntime.async(function run$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (typeof this.bip32Path === 'undefined') this.bip32Path = this.bip32Paths[0];\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(LedgerExportExtendedPublicKey.prototype), \"run\", this).call(this));\n\n            case 3:\n              result = _context3.sent;\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(TransportU2F.create());\n\n            case 6:\n              transport = _context3.sent;\n              key_path = this.bip32Path.split(\"/\").slice(1).join(\"/\");\n              parent_path = this.bip32Path.split(\"/\").slice(1, -1).join(\"/\");\n              ledgerbtc = new LedgerBtc(transport);\n              _context3.next = 12;\n              return _regeneratorRuntime.awrap(ledgerbtc.getWalletPublicKey(parent_path, false));\n\n            case 12:\n              parent_res = _context3.sent;\n              node = generateXPub(parent_res, result, key_path);\n              node.network.bip32[\"public\"] = isTestnet(this.network) ? 0x043587cf : 0x0488b21e;\n              return _context3.abrupt(\"return\", node.toBase58());\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerExportExtendedPublicKey;\n}(LedgerExportHDNode);\n/**\n * Class for wallet signing interaction.\n * @extends {module:ledger.LedgerInteraction}\n */\n\n\nexports.LedgerExportExtendedPublicKey = LedgerExportExtendedPublicKey;\n\nvar LedgerSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_LedgerInteraction2) {\n  _inherits(LedgerSignMultisigTransaction, _LedgerInteraction2);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n\n\n  function LedgerSignMultisigTransaction(_ref2) {\n    var _this2;\n\n    var network = _ref2.network,\n        inputs = _ref2.inputs,\n        outputs = _ref2.outputs,\n        bip32Paths = _ref2.bip32Paths;\n\n    _classCallCheck(this, LedgerSignMultisigTransaction);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerSignMultisigTransaction).call(this, {\n      network: network\n    }));\n    _this2.inputs = inputs;\n    _this2.outputs = outputs;\n    _this2.bip32Paths = bip32Paths;\n    return _this2;\n  }\n\n  _createClass(LedgerSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerSignMultisigTransaction.prototype), \"messages\", this).call(this); // TODO: what is needed here?\n\n\n      return messages;\n    }\n    /**\n     * Retrieve signatures from Ledger device for a given transaction\n     * @example\n     * import {generateMultisigFromHex, NETWORKS, MULTISIG_ADDRESS_TYPES} from \"unchained-bitcoin\";\n     * ...\n     * const input = {\n     *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n     *     index: 1,\n     *     multisig: generateMultisigFromHex(NETWORKS.TESTNET, MULTISIG_ADDRESS_TYPES.P2SH, redeemScript),\n     *     amountSats: BigNumber(1234000)\n     * }\n     * const output = {\n     *     amountSats: BigNumber(1299659),\n     *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n     * }\n     * const ledgerSigner = new LedgerSignMultisigTransaction({\n     *   network: \"testnet\",\n     *   inputs: [input],\n     *   outputs: [output],\n     *   bip32Paths: [\"m/45'/0'/0'/0\"]\n     * });\n     * const signatures = await ledgerSigner.run();\n     * console.log(signatures);\n     * @returns {string} string representation of an array of signatures\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var transport, ledgerbtc;\n      return _regeneratorRuntime.async(function run$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(TransportU2F.create());\n\n            case 2:\n              transport = _context4.sent;\n              transport.setExchangeTimeout(20000 * this.outputs.length);\n              ledgerbtc = new LedgerBtc(transport);\n              return _context4.abrupt(\"return\", signMultisigSpendLedger(this.bip32Paths, this.inputs, this.outputs, isTestnet(this.network), ledgerbtc));\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerSignMultisigTransaction;\n}(LedgerInteraction);\n\nexports.LedgerSignMultisigTransaction = LedgerSignMultisigTransaction;\n\nfunction isTestnet(network) {\n  return network === _unchainedBitcoin.NETWORKS.TESTNET;\n}\n\nfunction exportLedgerPubKey(path, ledgerbtc) {\n  var result, compressedPublicKey;\n  return _regeneratorRuntime.async(function exportLedgerPubKey$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return _regeneratorRuntime.awrap(ledgerbtc.getWalletPublicKey(path, {\n            verify: true\n          }));\n\n        case 3:\n          result = _context5.sent;\n\n          if (!result.publicKey) {\n            _context5.next = 9;\n            break;\n          }\n\n          compressedPublicKey = (0, _unchainedBitcoin.compressPublicKey)(result.publicKey);\n          return _context5.abrupt(\"return\", {\n            success: true,\n            publicKey: compressedPublicKey\n          });\n\n        case 9:\n          return _context5.abrupt(\"return\", null);\n\n        case 10:\n          _context5.next = 15;\n          break;\n\n        case 12:\n          _context5.prev = 12;\n          _context5.t0 = _context5[\"catch\"](0);\n          return _context5.abrupt(\"return\", {\n            success: false,\n            text: _context5.t0.message\n          });\n\n        case 15:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, [[0, 12]]);\n}\n\nfunction signMultisigSpendLedger(bip32Paths, inputs, outputs, testnet, ledgerbtc) {\n  var txTmp, i, j, txToSign, txHex, addressType, segwit, splitTx, outputScriptHex, ledgerIns, ledgerKeySets, signatures;\n  return _regeneratorRuntime.async(function signMultisigSpendLedger$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          // OUTPUTS\n          txTmp = new bitcoin.TransactionBuilder();\n          txTmp.setVersion(1);\n\n          if (testnet) {\n            txTmp.network = bitcoin.networks.testnet;\n          }\n\n          for (i = 0; i < outputs.length; i++) {\n            txTmp.addOutput(outputs[i].address, outputs[i].amountSats.toNumber());\n          }\n\n          for (j = 0; j < inputs.length; j++) {\n            txTmp.addInput(inputs[j].txid, inputs[j].index);\n          }\n\n          txToSign = txTmp.buildIncomplete();\n          txHex = txToSign.toHex();\n          addressType = (0, _unchainedBitcoin.multisigAddressType)(inputs[0].multisig); // TODO: multiple inputs?\n\n          segwit = addressType == _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH_P2WSH || addressType == _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2WSH;\n          _context6.next = 11;\n          return _regeneratorRuntime.awrap(ledgerbtc.splitTransaction(txHex, segwit));\n\n        case 11:\n          splitTx = _context6.sent;\n          _context6.next = 14;\n          return _regeneratorRuntime.awrap(ledgerbtc.serializeTransactionOutputs(splitTx).toString('hex'));\n\n        case 14:\n          outputScriptHex = _context6.sent;\n          ledgerIns = inputs.map(function (input) {\n            return ledgerInput(ledgerbtc, input);\n          }); // BIP32 PATH\n\n          ledgerKeySets = bip32Paths.map(function (bip32Path) {\n            return bip32Path.split(\"/\").slice(1).join(\"/\");\n          }); // SIGN\n\n          _context6.next = 19;\n          return _regeneratorRuntime.awrap(ledgerbtc.signP2SHTransaction(ledgerIns, ledgerKeySets, outputScriptHex, 0, // locktime\n          1, // sighash type\n          segwit, 1 // tx version\n          ));\n\n        case 19:\n          signatures = _context6.sent;\n          return _context6.abrupt(\"return\", signatures);\n\n        case 21:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  });\n}\n\nfunction ledgerInput(ledgerbtc, input) {\n  var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n  var tx = ledgerbtc.splitTransaction(input.transactionHex, true);\n\n  if (addressType == _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH) {\n    return [tx, input.index, (0, _unchainedBitcoin.scriptToHex)((0, _unchainedBitcoin.multisigRedeemScript)(input.multisig))];\n  } else {\n    return [tx, input.index, (0, _unchainedBitcoin.scriptToHex)((0, _unchainedBitcoin.multisigWitnessScript)(input.multisig))];\n  }\n}\n\nfunction generateXPub(parent, child, child_path) {\n  // parent and child are data structures returned from getWalletPublicKey()\n  // ledger methods\n  // e.g. {publicKey: \"048998c3655b16e1d74f6cab21651eb1be67394b2726356...,\n  //       bitcoinAddress: \"1A92zVckrWBk1abTjBqndd3Axr7ijtuWd9\",\n  //       chainCode: \"8f16c9fc56caa5ece39b485c990e0f934146f4a9fa7bb0a...\n  //      }\n  // child_path is bip32 path with m, e.g. \"m/45'/0'/\n  var parent_compressed_pubkey = (0, _unchainedBitcoin.compressPublicKey)(parent.publicKey);\n  var compressed_pubkey = (0, _unchainedBitcoin.compressPublicKey)(child.publicKey);\n  var node = bip32.fromPublicKey(Buffer.from(compressed_pubkey, 'hex'), Buffer.from(child.chainCode, 'hex'));\n  var pnode = bip32.fromPublicKey(Buffer.from(parent_compressed_pubkey, 'hex'), Buffer.from(parent.chainCode, 'hex'));\n  node.parentFingerprint = pnode.fingerprint;\n  node.depth = child_path.split(\"/\").length - 1;\n  var sequence = (0, _unchainedBitcoin.bip32PathToSequence)(child_path);\n  node.index = sequence.slice(-1)[0];\n  node.path = child_path;\n  return node;\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HermitSignTransaction = exports.HermitExportExtendedPublicKey = exports.HermitExportPublicKey = exports.HermitExport = exports.HermitInteraction = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.object.values\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nvar _hiBase = _interopRequireDefault(require(\"hi-base32\"));\n\nvar _pako = _interopRequireDefault(require(\"pako\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Interaction with Hermit (SLIP39) sharded wallet\n * @extends {module:interaction.WalletInteraction}\n */\n\n\nvar HermitInteraction =\n/*#__PURE__*/\nfunction (_WalletInteraction) {\n  _inherits(HermitInteraction, _WalletInteraction);\n\n  function HermitInteraction() {\n    _classCallCheck(this, HermitInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HermitInteraction).apply(this, arguments));\n  }\n\n  _createClass(HermitInteraction, [{\n    key: \"_parseQRCodeData\",\n    //\n    // Encoded string from QR code => JavaScript Object\n    //\n    value: function _parseQRCodeData(encodedString) {\n      try {\n        var compressedBytes = _hiBase[\"default\"].decode.asBytes(encodedString);\n\n        return this._decompressAndParseJSON(compressedBytes);\n      } catch (base32DecodingError) {\n        throw new Error(\"Unable to parse QR code (Base32 decode error).\");\n      }\n    }\n  }, {\n    key: \"_decompressAndParseJSON\",\n    value: function _decompressAndParseJSON(compressedBytes) {\n      try {\n        var decompressedJSON = _pako[\"default\"].inflate(compressedBytes, {\n          to: 'string'\n        });\n\n        return this._parseJSON(decompressedJSON);\n      } catch (decompressError) {\n        throw new Error(\"Unable to parse QR code (gzip decompress error).\");\n      }\n    }\n  }, {\n    key: \"_parseJSON\",\n    value: function _parseJSON(json) {\n      try {\n        return JSON.parse(json);\n      } catch (parseJSONError) {\n        throw new Error(\"Unable to parse QR code (JSON parse error).\");\n      }\n    } //\n    // JavaScript object => encoded string for QR code\n    //\n\n  }, {\n    key: \"_encodeQRCodeData\",\n    value: function _encodeQRCodeData(data) {\n      try {\n        var jsonString = JSON.stringify(data);\n        return this._compressAndBase32Encode(jsonString);\n      } catch (encodeJSONError) {\n        console.error(encodeJSONError);\n        throw new Error(\"Unable to create QR code (JSON encode error).\");\n      }\n    }\n  }, {\n    key: \"_compressAndBase32Encode\",\n    value: function _compressAndBase32Encode(jsonString) {\n      try {\n        var compressedBytes = _pako[\"default\"].deflate(jsonString, {\n          gzip: true\n        });\n\n        return this._base32Encode(compressedBytes);\n      } catch (compressionError) {\n        console.error(compressionError);\n        throw new Error(\"Unable to create QR code (gzip compress error).\");\n      }\n    }\n  }, {\n    key: \"_base32Encode\",\n    value: function _base32Encode(compressedBytes) {\n      try {\n        var encodedData = _hiBase[\"default\"].encode(compressedBytes);\n\n        return encodedData;\n      } catch (base32EncodingError) {\n        console.error(base32EncodingError);\n        throw new Error(\"Unable to create QR code (Base32 encode error).\");\n      }\n    }\n  }]);\n\n  return HermitInteraction;\n}(_interaction.WalletInteraction);\n/**\n * Base class for exports from Hermit (SLIP39) sharded wallet\n * Adds message for extended classes, mainly for internal use\n * @extends {module:hermit.HermitInteraction}\n */\n\n\nexports.HermitInteraction = HermitInteraction;\n\nvar HermitExport =\n/*#__PURE__*/\nfunction (_HermitInteraction) {\n  _inherits(HermitExport, _HermitInteraction);\n\n  function HermitExport() {\n    _classCallCheck(this, HermitExport);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HermitExport).apply(this, arguments));\n  }\n\n  _createClass(HermitExport, [{\n    key: \"messages\",\n    // TODO: should this be exported?\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExport.prototype), \"messages\", this).call(this);\n\n      messages[_interaction.ACTIVE].push({\n        level: _interaction.INFO,\n        code: \"hermit.scanning\",\n        text: \"Scan Hermit QR code now.\"\n      });\n\n      return messages;\n    }\n  }]);\n\n  return HermitExport;\n}(HermitInteraction);\n/**\n * Class for wallet public key interaction for use with QR scanner\n * @extends {module:hermit.HermitExport}\n */\n\n\nexports.HermitExport = HermitExport;\n\nvar HermitExportPublicKey =\n/*#__PURE__*/\nfunction (_HermitExport) {\n  _inherits(HermitExportPublicKey, _HermitExport);\n  /**\n   * @example\n   * const hermitKeyExporter = new HermitExportPublicKey()\n   */\n\n\n  function HermitExportPublicKey(_ref) {\n    var _this;\n\n    var network = _ref.network,\n        bip32Path = _ref.bip32Path;\n\n    _classCallCheck(this, HermitExportPublicKey); // TODO: are these really needed?  The path seems to come from QR and the network is not referred to.\n\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportPublicKey).call(this, {\n      network: network\n    }));\n    _this.bip32Path = bip32Path;\n    return _this;\n  }\n\n  _createClass(HermitExportPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportPublicKey.prototype), \"messages\", this).call(this);\n\n      var instructions = \"Run the following Hermit command, replacing the BIP32 path if you need to:\";\n      var mode = \"wallet\";\n      var command = \"export-pub \".concat(this.bip32Path);\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        code: \"hermit.command\",\n        instructions: instructions,\n        mode: mode,\n        command: command,\n        text: \"\".concat(instructions, \" '\").concat(command, \"'\")\n      });\n\n      return messages;\n    }\n    /**\n     * Convert base64 encoded QR code to public key and BIP32 path\n     * @param {string} encodedString - base64 encoded QR code from Hermit\n     * @returns {object} public key and BIP32 path\n     * @example\n     * const keyInfo = hermitKeyExporter.run();\n     * console.log(keyInfo);\n     * // {pubkey:\"...\", bip32Path:\"m/48'...\"}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = this._parseQRCodeData(encodedString);\n\n      var xpub = result.xpub,\n          pubkey = result.pubkey;\n\n      if (!pubkey) {\n        if (xpub) {\n          throw new Error(\"Make sure you export a plain public key and NOT an extended public key.\");\n        } else {\n          throw new Error(\"Did not receive a public key.\");\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return HermitExportPublicKey;\n}(HermitExport);\n/**\n * Class for wallet extended public key interaction for use with QR scanner\n * @extends {module:hermit.HermitExport}\n */\n\n\nexports.HermitExportPublicKey = HermitExportPublicKey;\n\nvar HermitExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_HermitExport2) {\n  _inherits(HermitExportExtendedPublicKey, _HermitExport2);\n\n  function HermitExportExtendedPublicKey(_ref2) {\n    var _this2;\n\n    var network = _ref2.network,\n        bip32Path = _ref2.bip32Path;\n\n    _classCallCheck(this, HermitExportExtendedPublicKey); // TODO: I don't think network is needed here either, encoded in QR\n\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportExtendedPublicKey).call(this, {\n      network: network\n    }));\n    _this2.bip32Path = bip32Path;\n    return _this2;\n  }\n\n  _createClass(HermitExportExtendedPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportExtendedPublicKey.prototype), \"messages\", this).call(this);\n\n      var instructions = \"Run the following Hermit command, replacing the BIP32 path if you need to:\";\n      var mode = \"wallet\";\n      var command = \"export-xpub \".concat(this.bip32Path);\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        code: \"hermit.command\",\n        instructions: instructions,\n        mode: mode,\n        command: command,\n        text: \"\".concat(instructions, \" '\").concat(command, \"'\")\n      });\n\n      return messages;\n    }\n    /**\n     * Convert base64 encoded QR code to an extended public key and BIP32 path\n     * @param {string} encodedString - base64 encoded QR code from Hermit\n     * @returns {object} extended public key and BIP32 path\n     * @example\n     * const keyInfo = hermitKeyExporter.parse();\n     * console.log(keyInfo);\n     * // {xpub:\"...\", bip32Path:\"m/48'/...\"}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = this._parseQRCodeData(encodedString);\n\n      var xpub = result.xpub,\n          pubkey = result.pubkey;\n\n      if (!xpub) {\n        if (pubkey) {\n          throw new Error(\"Make sure you export an extended public key and NOT a plain public key.\");\n        } else {\n          throw new Error(\"Did not receive an extended public key.\");\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return HermitExportExtendedPublicKey;\n}(HermitExport);\n/**\n * @extends {module:hermit.HermitExport}\n */\n\n\nexports.HermitExportExtendedPublicKey = HermitExportExtendedPublicKey;\n\nvar HermitSignTransaction =\n/*#__PURE__*/\nfunction (_HermitExport3) {\n  _inherits(HermitSignTransaction, _HermitExport3);\n  /**\n   *\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n\n\n  function HermitSignTransaction(_ref3) {\n    var _this3;\n\n    var network = _ref3.network,\n        inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, HermitSignTransaction); // TODO: check params here also\n\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(HermitSignTransaction).call(this, {\n      network: network\n    }));\n    _this3.inputs = inputs;\n    _this3.outputs = outputs;\n    _this3.bip32Paths = bip32Paths;\n    _this3.supported = true;\n    _this3.inputAddressType = '';\n    return _this3;\n  }\n  /**\n   * Determine if a transaction is supported by Hermit signing\n   * @override\n   * @returns {boolean}\n   */\n\n\n  _createClass(HermitSignTransaction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return this.inputsAreSupported() && this.outputsAreSupported();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"outputsAreSupported\",\n    value: function outputsAreSupported() {\n      if (this.outputs && this.outputs.length) {\n        for (var i = 0; i < this.outputs.length; i++) {\n          var output = this.outputs[i];\n\n          if (output.address.match(/^(tb|bc)/)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"inputsAreSupported\",\n    value: function inputsAreSupported() {\n      if (this.inputs && this.inputs.length) {\n        for (var i = 0; i < this.inputs.length; i++) {\n          var input = this.inputs[i];\n          var inputAddressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n\n          if (inputAddressType !== _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH) {\n            this.inputAddressType = inputAddressType;\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitSignTransaction.prototype), \"messages\", this).call(this);\n\n      if (!this.inputsAreSupported()) {\n        messages[_interaction.UNSUPPORTED].push({\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.inputaddress\",\n          text: \"Unsupported input address type \".concat(this.inputAddressType, \", must be P2SH.\")\n        });\n      }\n\n      if (!this.outputsAreSupported()) {\n        messages[_interaction.UNSUPPORTED].push({\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.outputaddress\",\n          text: \"Unsupported output address type. bech32 addresses are unsupported.\"\n        });\n      }\n\n      if (!this.inputsAreSupported() || !this.outputsAreSupported()) return messages;\n      var instructions = \"Scan this QR code into Hermit by running the following command:\";\n      var mode = \"wallet\";\n      var command = \"sign-bitcoin\";\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        code: \"hermit.command\",\n        instructions: instructions,\n        mode: mode,\n        command: command,\n        text: \"\".concat(instructions, \" '\").concat(command, \"'\")\n      });\n\n      var data = this.signatureRequestData();\n\n      var encodedData = this._encodeQRCodeData(data);\n\n      messages[_interaction.PENDING].push({\n        level: _interaction.INFO,\n        code: \"hermit.signature_request\",\n        data: data,\n        encodedData: encodedData,\n        text: \"Signature Request\"\n      });\n\n      return messages;\n    }\n  }, {\n    key: \"signatureRequestData\",\n    value: function signatureRequestData() {\n      var hermitInputsByRedeemScript = {};\n\n      for (var i = 0; i < this.inputs.length; i++) {\n        var input = this.inputs[i];\n        var bip32Path = this.bip32Paths[i];\n        var redeemScriptHex = (0, _unchainedBitcoin.scriptToHex)((0, _unchainedBitcoin.multisigRedeemScript)(input.multisig));\n\n        if (!hermitInputsByRedeemScript[redeemScriptHex]) {\n          hermitInputsByRedeemScript[redeemScriptHex] = [redeemScriptHex, bip32Path];\n        }\n\n        hermitInputsByRedeemScript[redeemScriptHex].push({\n          txid: input.txid,\n          index: input.index,\n          amount: input.amountSats.toNumber()\n        });\n      }\n\n      return {\n        inputs: Object.values(hermitInputsByRedeemScript),\n        outputs: this.outputs.map(function (output) {\n          return {\n            address: output.address,\n            amount: output.amountSats.toNumber()\n          };\n        })\n      };\n    }\n    /**\n     * Retrieve signatures from Hermit generated QR code for a given transaction\n     * @example\n     * import {generateMultisigFromHex, NETWORKS, MULTISIG_ADDRESS_TYPES} from \"unchained-bitcoin\";\n     * ...\n     * const input = {\n     *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n     *     index: 1,\n     *     multisig: generateMultisigFromHex(NETWORKS.TESTNET, MULTISIG_ADDRESS_TYPES.P2SH, redeemScript),\n     *     amountSats: BigNumber(1234000)\n     * }\n     * const output = {\n     *     amountSats: BigNumber(1299659),\n     *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n     * }\n     * const hermitSigner = new HermitSignTransaction({\n     *   network: \"testnet\",\n     *   inputs: [input],\n     *   outputs: [output],\n     *   bip32Paths: [\"m/45'/0'/0'/0\"]\n     * });\n     * const signatures = await hermitSigner.parse();\n     * console.log(signatures);\n     * @returns {string} string representation of an array of signatures\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = this._parseQRCodeData(encodedString);\n\n      var signatures = result.signatures;\n      return signatures;\n    }\n  }]);\n\n  return HermitSignTransaction;\n}(HermitExport);\n\nexports.HermitSignTransaction = HermitSignTransaction;","module.exports = __webpack_public_path__ + \"static/media/logo.66481e66.png\";","import React from \"react\";\nimport BigNumber from 'bignumber.js'\n\nexport function externalLink(url, text) {\n  return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{text}</a>;\n}\n\nexport function wrapText(text, columns) {\n  let lines   = [];\n  let index   = 0;\n  let element = 0;\n  while (index <= text.length) {\n    lines.push(<span key={element}>{text.slice(index, index += (columns || 64))}</span>);\n    lines.push(<br key={element + 1}/>);\n    element += 2;\n  }\n  return lines;\n}\n\nexport function validatePositiveInteger(numberString) {\n  if (numberString === null || numberString === undefined || numberString === '') {\n    return \"Cannot be blank.\";\n  }\n  const number = parseInt(numberString, 10);\n  if (Number.isNaN(number) || number.toString().length !== numberString.length || number <= 0) {\n    return \"Must be a positive whole number.\";\n  }\n\n  return '';\n\n}\n\nexport function downloadFile(body, filename) {\n  const blob = new Blob([body], {type: 'text/plain'});\n  if(window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveBlob(blob, filename);\n  }\n  else{\n      var elem = window.document.createElement('a');\n      elem.href = window.URL.createObjectURL(blob);\n      elem.download = filename;\n      document.body.appendChild(elem);\n      elem.click();\n      document.body.removeChild(elem);\n  }\n}\n\n/**\n * simple coin selection\n * @param {Array<object>} spendableInputs - available addresses with balanceSats property as a BigNumber\n * @param {BigNumber} outputTotal - how much is being spent including estimated fees\n * @returns {Array<object>} list of address objects meeting the outputTotal or all if insufficient.\n */\nexport function naiveCoinSelection(spendableInputs, outputTotal) {\n  let selectedUtxos = [];\n  let inputTotal = new BigNumber(0);\n  for (let inputIndex=0; inputIndex < spendableInputs.length; inputIndex++) {\n    const spendableInput = spendableInputs[inputIndex];\n    spendableInput.utxos.forEach(utxo => {\n      selectedUtxos.push({...utxo, multisig: spendableInput.multisig, bip32Path: spendableInput.bip32Path, change: spendableInput.change});\n    })\n    inputTotal = inputTotal.plus(spendableInput.balanceSats);\n    if (inputTotal.isGreaterThanOrEqualTo(outputTotal)) {\n      break;\n    }\n  }\n  return selectedUtxos;\n}\n","import React from 'react';\n\n// Components\nimport { Card, CardHeader, CardContent, } from \"@material-ui/core\";\n\nconst Disclaimer = () => (\n  <Card>\n    <CardHeader title=\"Disclaimer\"/>\n    <CardContent>\n      <small>\n        This application is in “alpha” state and is presented\n        for evaluation and testing only. It is provided “as is,”\n        and any express or implied warranties, including but not\n        limited to the implied warranties of merchantability and\n        fitness for a particular purpose, are disclaimed. By\n        using this application, you accept all risks of such\n        use, including full responsibility for any direct or\n        indirect loss of any kind resulting from the use of this\n        application, which may involve complete loss of any\n        Bitcoin or other coins associated with addresses used\n        with this application. In no event shall Unchained\n        Capital, Inc., its employees and affiliates, or\n        developers of this application be liable for any direct,\n        indirect, incidental, special, exemplary, or\n        consequential damages (including, but not limited to,\n        procurement of substitute goods or services; loss of\n        use, data, or profits; or business interruption) however\n        caused and on any theory of liability, whether in\n        contract, strict liability, or tort (including\n        negligence or otherwise) arising in any way out of the\n        use of this application, even if advised of the\n        possibility of such damage.\n      </small>\n        \n      </CardContent>\n    </Card>\n);\n\nexport default Disclaimer;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\n\n// Components\nimport {\n  Box, Typography, CardHeader, CardContent, Grid, Card, Button,\n  List, ListItem, ListItemText, ListItemIcon, CardActions,\n} from \"@material-ui/core\";\nimport {Description, GitHub, YouTube, BugReport} from \"@material-ui/icons\";\nimport Disclaimer from \"./Disclaimer\";\n\nconst Help = () => (\n  <div>\n\n    <Box mt={4} mb={2}>\n      <Typography variant=\"h2\">Welcome to Caravan!</Typography>\n    </Box>\n\n    <Grid container spacing={3}>\n\n      <Grid container item md={8} spacing={2} direction=\"column\">\n\n        <Grid item>\n          <Card>\n\n            <CardHeader title=\"Stateless Multisig Coordinator\"/>\n\n            <CardContent>\n\n              <p>\n                Caravan is making bitcoin <strong>multisig</strong> custody easier and safer through transparency and standards.\n              </p>\n\n              <p>\n                Caravan is a <strong>coordination</strong> software.  It connects to a source of consensus and your keys to build and interact with multisig bitcoin addresses.\n              </p>\n\n              <p>Caravan is also <strong>stateless</strong>.  It does not itself store any data.  You must safekeep the addresses (and redeem scripts & BIP32 paths) you create.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keys\"/>\n            <CardContent>\n\n              <p>All bitcoin is ultimately protected by private keys.</p>\n\n              <p>Your private key may live on a piece of paper, a hardware wallet, some software on a laptop, or even just in your mind.  Caravan, being stateless, cannot store your private key but it can talk to hardware devices or software applications which do.</p>\n\n              <p>Caravan supports entering public keys and signatures via text, so any wallet which can export such data can be made compatible with Caravan.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Consensus\"/>\n            <CardContent>\n\n              <p>In order to look up address balances and broadcast transactions, Caravan requires knowledge of the constantly changing bitcoin network.</p>\n\n              <p>Running a full bitcoin node is the best way to determine the current state of the bitcoin network.  Caravan can be easily configured to use your own bitcoin node for consensus information and broadcasting transactions.</p>\n\n              <p>If you don't want to or cannot run your own full node, Caravan defaults to using the freely available API at <code>blockstream.info</code>.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n      </Grid>\n\n      <Grid container item md={4} spacing={4} direction=\"column\">\n\n        <Grid item>\n\n          <Card>\n            <CardHeader title=\"Learn More\"></CardHeader>\n            <CardContent>\n\n              <List>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <Description />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.unchained-capital.com/blog/the-caravan-arrives/\", \"Blog Post\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <YouTube />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.youtube.com/playlist?list=PLUM8mrUjWoPRsVGEZ1gTntqPd4xrQZoiH\", \"Video Tutorials\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <GitHub />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://github.com/unchained-capital/caravan\", \"Source Code\")}\n                  </ListItemText>\n                </ListItem>\n\n              </List>\n            </CardContent>\n          </Card>\n\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Supported Devices\"></CardHeader>\n            <CardContent>\n              Caravan has been tested with the following hardware wallets:\n              <ul>\n                <li>{externalLink(\"https://shop.trezor.io/product/trezor-one-white\", \"Trezor One\")}</li>\n                <li>{externalLink(\"https://www.ledger.com/products/ledger-nano-s\", \"Ledger Nano S\")}</li>\n              </ul>\n              And web browsers:\n              <ul>\n                <li>{externalLink(\"https://www.google.com/chrome/\", \"Chrome\")}</li>\n                <li>{externalLink(\"https://www.mozilla.org/en-US/firefox/new/\", \"Firefox\")}</li>\n              </ul>\n              Seeing a bug or need a feature?\n            </CardContent>\n            <CardActions>\n\n              <Button href=\"https://github.com/unchained-capital/caravan/issues\"><BugReport /> &nbsp; Report Issue</Button>\n\n            </CardActions>\n          </Card>\n\n        </Grid>\n\n      </Grid>\n    </Grid>\n\n\n    <Box mt={2}>\n      <Disclaimer />\n    </Box>\n\n  </div>\n);\n\nexport default Help;\n","export const SET_NETWORK = 'SET_NETWORK';\nexport const SET_TOTAL_SIGNERS    = \"SET_TOTAL_SIGNERS\";\nexport const SET_REQUIRED_SIGNERS = \"SET_REQUIRED_SIGNERS\";\nexport const SET_ADDRESS_TYPE = 'SET_ADDRESS_TYPE';\nexport const SET_FROZEN = 'SET_FROZEN';\n\nexport function setNetwork(value) {\n  return {\n    type: SET_NETWORK,\n    value: value,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setAddressType(value) {\n  return {\n    type: SET_ADDRESS_TYPE,\n    value: value,\n  };\n}\n\n\nexport function setFrozen(value) {\n  return {\n    type: SET_FROZEN,\n    value: value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  TESTNET,\n  MAINNET,\n} from \"unchained-bitcoin\";\n\n// Components\n\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n         Radio, FormHelperText } from '@material-ui/core';\n\n// Actions\nimport { setNetwork } from '../actions/settingsActions';\n\nclass NetworkPicker extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setNetwork: PropTypes.func.isRequired,\n  };\n\n  handleNetworkChange = (event) => {\n    const { setNetwork } = this.props;\n    setNetwork(event.target.value);\n  };\n\n  render() {\n    const { network, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Network\"/>\n        <CardContent>\n\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id=\"mainnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"mainnet\"\n            label={(<strong>Mainnet</strong>)}\n            onChange={this.handleNetworkChange}\n            checked={network === MAINNET}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id=\"testnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"testnet\"\n            label=\"Testnet\"\n            onChange={this.handleNetworkChange}\n            checked={network === TESTNET}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>{'Choose \\'Mainnet\\' if you don\\'t understand the difference.'}</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { \n    network: state.settings.network, \n    frozen: state.settings.frozen,\n  };\n}\n\nconst mapDispatchToProps = {\n  setNetwork,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Actions\nimport {\n  setTotalSigners,\n  setRequiredSigners,\n} from \"../actions/settingsActions\";\n\n// Components\nimport {\n  Typography, Grid, IconButton,\n  Card, CardHeader, CardContent, Box,\n} from '@material-ui/core';\nimport { AddCircle, RemoveCircle } from '@material-ui/icons';\nimport './styles.css';\n\nconst MAX_TOTAL_SIGNERS = 7;\n\nclass QuorumPicker extends React.Component {\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {requiredSigners, totalSigners} = this.props;\n\n    return (\n      <Card>\n        <CardHeader title=\"Quorum\"></CardHeader>\n        <CardContent>\n\n          <Box>\n            <Grid container justify=\"center\">\n\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n              <Grid container item xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementRequiredSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{requiredSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Required</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementRequiredSigners()}\n                </Grid>\n\n              </Grid>\n\n              <Grid container item xs={2} direction=\"column\" alignItems=\"center\" justify=\"center\">\n\n                <Grid item>\n                  <Typography variant=\"h6\">of</Typography>\n                </Grid>\n\n              </Grid>\n\n              <Grid item container xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementTotalSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{totalSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Total</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementTotalSigners()}\n                </Grid>\n\n              </Grid>\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n            </Grid>\n\n          </Box>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n\n  renderIncrementRequiredSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (requiredSigners === totalSigners || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementRequiredSigners} disabled={disabled}>\n        <AddCircle/>\n      </IconButton>\n    );\n  }\n\n  renderDecrementRequiredSigners = () => {\n    const {requiredSigners, frozen} = this.props;\n    const disabled = (requiredSigners === 1 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementRequiredSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  renderIncrementTotalSigners = () => {\n    const {totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === MAX_TOTAL_SIGNERS || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementTotalSigners} disabled={disabled}>\n        <AddCircle />\n      </IconButton>\n    );\n  }\n\n  renderDecrementTotalSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === requiredSigners || totalSigners === 2 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementTotalSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  handleIncrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners - 1);\n    event.preventDefault();\n  }\n\n  handleIncrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners - 1);\n    event.preventDefault();\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n  setTotalSigners,\n  setRequiredSigners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuorumPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n          Radio, FormHelperText } from '@material-ui/core';\n// Actions\nimport {\n    setAddressType,\n} from '../actions/settingsActions';\n\n\nclass AddressTypePicker extends React.Component {\n\n  static propTypes = {\n    addressType: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setType: PropTypes.func.isRequired,\n  };\n\n  handleTypeChange = (event) => {\n    const { setType } = this.props;\n    setType(event.target.value);\n  };\n\n  render() {\n    const { addressType, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Address Type\"/>\n        <CardContent>\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id={P2SH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH}\n            label={P2SH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2SH_P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH_P2WSH}\n            label={P2SH_P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH_P2WSH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2WSH}\n            label={P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2WSH}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>Choose '{P2WSH}' for best practices, '{P2SH}' for greatest compatibility.</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n        </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\n\nconst mapDispatchToProps = {\n    setType: setAddressType,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressTypePicker);\n","function actionWrapper(type) {\n  return (value) => {\n    return  {type, value,};\n  };\n}\n\nexport function wrappedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = actionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n\nfunction numberedActionWrapper(type) {\n  return (number, value) => {\n    return  {type, number, value,};\n  };\n}\n\nexport function wrappedNumberedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = numberedActionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n","export const SET_CLIENT_TYPE = 'SET_CLIENT_TYPE';\nexport const SET_CLIENT_URL = 'SET_CLIENT_URL';\nexport const SET_CLIENT_USERNAME = 'SET_CLIENT_USERNAME';\nexport const SET_CLIENT_PASSWORD = 'SET_CLIENT_PASSWORD';\n\nexport const SET_CLIENT_URL_ERROR = 'SET_CLIENT_URL_ERROR';\nexport const SET_CLIENT_USERNAME_ERROR = 'SET_CLIENT_USERNAME_ERROR';\nexport const SET_CLIENT_PASSWORD_ERROR = 'SET_CLIENT_PASSWORD_ERROR';\n\nexport const SET_CLIENT_STATUS = 'SET_CLIENT_STATUS';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {externalLink} from \"../utils\";\n\n// Components\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControlLabel,\n  TextField,\n  Switch,\n} from '@material-ui/core';\n\n// Actions\nimport { wrappedActions } from '../actions/utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst propTypes = {\n  client: PropTypes.shape({}).isRequired,\n  network: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n  setPasswordError: PropTypes.func.isRequired,\n  setType: PropTypes.func.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  setUsernameError: PropTypes.func.isRequired,\n};\n\nclass ClientPicker extends React.Component {\n  state = {\n    url_edited: false\n  }\n\n  handleTypeChange = (event) => {\n    const { setType, network, setUrl } = this.props;\n    const type = event.target.checked ? 'private' : 'public';\n    if (type === 'private' && !this.state.url_edited) {\n      setUrl(`http://localhost:${network === 'mainnet' ? 8332 : 18332}`)\n    }\n    setType(type);\n  }\n\n  handleUrlChange = (event) => {\n    const { setUrl, setUrlError } = this.props;\n    const url = event.target.value;\n    const error = this.validateUrl(url);\n    if (!this.state.url_edited && !error) this.setState({url_edited: true});\n    setUrl(url);\n    setUrlError(error);\n  };\n\n  handleUsernameChange = (event) => {\n    const { setUsername, setUsernameError } = this.props;\n    const username = event.target.value;\n    const error = this.validateUsername(username);\n    setUsername(username);\n    setUsernameError(error);\n  };\n\n  handlePasswordChange = (event) => {\n    const { setPassword, setPasswordError } = this.props;\n    const password = event.target.value;\n    const error = this.validatePassword(password);\n    setPassword(password);\n    setPasswordError(error);\n  };\n\n  validateUrl(host) {\n    const validhost = /^http(s)?:\\/\\/[^\\s]+$/.exec(host);\n    if (!validhost) return 'Must be a valid URL.'\n    return '';\n  }\n\n  validatePassword(pass) {\n    return '';\n  }\n\n  validateUsername(username) {\n    return '';\n  }\n\n  toggle = () => {\n    const { client } = this.props;\n    const label = client.type.charAt(0).toUpperCase() + client.type.slice(1);\n    return (\n      <FormControlLabel\n        control={\n          <Switch\n            color=\"primary\"\n            checked={client.type === 'private'}\n            onChange={this.handleTypeChange}\n            value=\"private\" />\n        }\n        label={label}\n      />\n    );\n  }\n\n  title = () => (\n    <Grid container justify=\"space-between\">\n      <Grid item>Consensus</Grid>\n      <Grid item>{this.toggle()}</Grid>\n    </Grid>\n  )\n\n  disabled = () => (false);\n\n  render() {\n    const { client, url_error, username_error, password_error } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {(client.type === 'public')\n           ? (\n             <div>\n              <p>\n                {\"'Public' uses the \"}\n                <code>blockstream.info</code>\n                {' API. Switch to private to use a '}\n                <code>bitcoind</code>\n                {' node.'}\n              </p>\n              {typeof this.props.publicNotes !== 'undefined' && this.props.publicNotes}\n             </div>\n           ) : (\n             <div>\n              <p>A <code>bitcoind</code>-compatible client is required to query UTXO data, estimate fees, and broadcast transactions.</p>\n              <p>\n                <small>\n                  {'Due to CORS requirements, you must use a proxy around the node. Instructions are available '}\n                  {externalLink(\"https://github.com/unchained-capital/caravan#adding-cors-headers\", \"here\")}\n                  {'.'}\n                </small>\n              </p>\n               <form>\n\n                 <Grid container direction=\"column\">\n\n                   <Grid item>\n                     <TextField\n                       fullWidth\n                       label=\"URL\"\n                       value={client.url}\n                       onChange={this.handleUrlChange}\n                       disabled={this.disabled()}\n                       error={url_error !== ''}\n                       helperText={url_error}\n                     />\n                   </Grid>\n\n                   <Grid item>\n\n\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       id=\"bitcoind-username\"\n                       fullWidth\n                       label=\"Username\"\n                       value={client.username}\n                       onChange={this.handleUsernameChange}\n                       disabled={this.disabled()}\n                       error={username_error}\n                       helperText={username_error}\n                     />\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       id=\"bitcoind-password\"\n                       fullWidth\n                       type=\"password\"\n                       label=\"Password\"\n                       value={client.password}\n                       onChange={this.handlePasswordChange}\n                       disabled={this.disabled()}\n                       error={password_error}\n                       helperText={password_error}\n                     />\n                   </Grid>\n                 </Grid>\n               </form>\n               {typeof this.props.privateNotes !== 'undefined' && this.props.privateNotes}\n             </div>\n           )}\n        </CardContent>\n      </Card>\n    );\n  }\n}\nClientPicker.propTypes = propTypes;\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    url_error: state.client.url_error,\n    url: state.client.url,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  wrappedActions({\n    setType: SET_CLIENT_TYPE,\n    setUrl: SET_CLIENT_URL,\n    setUsername: SET_CLIENT_USERNAME,\n    setPassword: SET_CLIENT_PASSWORD,\n\n    setUrlError: SET_CLIENT_URL_ERROR,\n    setUsernameError: SET_CLIENT_USERNAME_ERROR,\n    setPasswordError: SET_CLIENT_PASSWORD_ERROR,\n\n    setStatus: SET_CLIENT_STATUS,\n  }),\n)(ClientPicker);\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {\n  satoshisToBitcoins,\n  blockExplorerAPIURL,\n} from \"unchained-bitcoin\";\n\n/**\n * Fetch information for signing transactions from block explorer API\n * @param {string} address - The address from which to obtain the information\n * @param {string} network - The network for the transaction to sign (mainnet|testnet)\n * @returns {multisig.UTXO} object for signing transaction inputs\n */\nexport async function blockExplorerGetAddresesUTXOs(address, network) {\n  try {\n    const utxosResult = await axios.get(blockExplorerAPIURL(`/address/${address}/utxo`, network));\n    const utxos = utxosResult.data;\n    return await Promise.all(utxos.map(async (utxo) => {\n      // FIXME: inefficient, need to cache here by utxo.txid\n      const transactionResult = await axios.get(blockExplorerAPIURL(`/tx/${utxo.txid}/hex`, network));\n      const transactionHex = transactionResult.data;\n      const amount = new BigNumber(utxo.value);\n      return {\n        confirmed: utxo.status.confirmed,\n        txid: utxo.txid,\n        index: utxo.vout,\n        amount: satoshisToBitcoins(amount).toFixed(8),\n        amountSats: amount,\n        transactionHex,\n      };\n    }));\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerGetAddressStatus(address, network) {\n  try {\n    const addressesult = await axios.get(blockExplorerAPIURL(`/address/${address}`, network));\n    const addressData = addressesult.data;\n    return {\n      used: addressData.chain_stats.funded_txo_count > 0 || addressData.mempool_stats.funded_txo_count > 0\n    }\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerGetFeeEstimate(network) {\n  try {\n    const feeEstimatesResult = await axios.get(blockExplorerAPIURL('/fee-estimates', network));\n    const feeEstimates = feeEstimatesResult.data;\n    return Math.ceil(feeEstimates[2]);\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerBroadcastTransaction(transactionHex, network) {\n  try {\n    const broadcastResult = await axios.post(blockExplorerAPIURL('/tx', network), transactionHex);\n    return broadcastResult.data;\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\n/**\n * @module block_explorer\n */\n\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {bitcoinsToSatoshis} from \"unchained-bitcoin\";\n\nasync function callBitcoind(url, auth, method, params = []) {\n  return new Promise(async (resolve, reject) => {\n    axios(url, {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      auth,\n      data: {\n        jsonrpc: '2.0',\n        id: 0,\n        method: `${method}`,\n        params,\n      },\n    }).then(resp => resolve(resp.data)).catch(reject);\n  });\n}\n\n/**\n * check if error from bitcoind is address not found in wallet\n * this allows client side interpretation of the error\n * @param {Error} e - the error object to check\n * @returns {boolean} true if the desired error\n */\nexport function isWalletAddressNotFoundError(e) {\n  return e.response &&\n  e.response.data &&\n  e.response.data.error &&\n  e.response.data.error.code === -4;\n}\n\nexport function bitcoindParams(client) {\n  const {url, username, password} = client;\n  const auth = { username, password };\n  return {url, auth};\n}\n\n/**\n * Fetch information for signing transactions from bitcoind RPC\n * @param {Object} options - what is needed to communicate with the RPC\n * @param {string} options.url - where to connect\n * @param {AxiosBasicCredentials} options.auth - username and password\n * @param {string} options.address - The address from which to obtain the information\n * @returns {UTXO} object for signing transaction inputs\n */\nexport async function bitcoindListUnspent({url, auth, address, addresses}) {\n  return new Promise(async (resolve) => {\n    try {\n      const addressParam = addresses || [address]\n      const resp = await callBitcoind(url, auth, 'listunspent', [0, 9999999, addressParam], );\n      const promises = [];\n      resp.result.forEach(utxo => {\n        promises.push(callBitcoind(url, auth, 'getrawtransaction', [utxo.txid]))\n      })\n      const previousTransactions = await Promise.all(promises)\n      resolve(resp.result.map((utxo, mapindex) => {\n        const amount = new BigNumber(utxo.amount);\n        return {\n          confirmed: (utxo.confirmations || 0) > 0,\n          txid: utxo.txid,\n          index: utxo.vout,\n          amount: amount.toFixed(8),\n          amountSats: bitcoinsToSatoshis(amount),\n          transactionHex: previousTransactions[mapindex].result\n        };\n      }));\n\n    } catch(e) {throw(e)}\n  });\n}\n\nexport async function bitcoindGetAddressStatus({url, auth, address}) {\n  try {\n    const resp = await callBitcoind(url, auth, 'getreceivedbyaddress', [address] );\n    if (typeof resp.result === 'undefined') {\n      throw(new Error(\"Error: invalid response from \"+url))\n    }\n    return {\n      used: resp.result > 0\n    }\n  } catch(e) {\n    throw(e);\n  }\n}\n\nexport async function bitcoindEstimateSmartFee({url, auth, numBlocks = 2}) {\n  const resp = await callBitcoind(url, auth, 'estimatesmartfee', [numBlocks]);\n  const feeRate = resp.result.feerate;\n  return Math.ceil(feeRate * 100000);\n}\n\nexport async function bitcoindSendRawTransaction({url, auth, hex}) {\n  try {\n    const resp = await callBitcoind(url, auth, 'sendrawtransaction', [hex]);\n    return resp.result;\n    } catch(e) {\n      console.log('send tx error', e)\n      throw((e.response && e.response.data.error.message) || e);\n  }\n\n}\n\nexport function bitcoindImportMulti({url, auth, addresses, label, rescan}) {\n  const imports = addresses.map(address => {\n    return {\n      scriptPubKey: {\n        address: address\n      },\n      label: label,\n      timestamp: 0 // TODO: better option to ensure address history is picked up?\n    }\n  });\n  if (rescan) {\n    callBitcoind(url, auth, 'importmulti', [imports, {rescan: rescan}]); // TODO: what to do on catch?\n    return new Promise(resolve => resolve({result:[]}));\n  } else {\n    return callBitcoind(url, auth, 'importmulti', [imports, {rescan: rescan}]);\n  }\n}","import {\n  blockExplorerGetAddresesUTXOs,\n  blockExplorerGetFeeEstimate,\n  blockExplorerBroadcastTransaction,\n  blockExplorerGetAddressStatus,\n} from \"./block_explorer\";\nimport {\n  bitcoindListUnspent,\n  bitcoindEstimateSmartFee,\n  bitcoindSendRawTransaction,\n  bitcoindParams,\n  bitcoindGetAddressStatus,\n} from \"./bitcoind\";\n\nexport const BLOCK_EXPLORER = 'public';\nexport const BITCOIND = 'private';\n\nexport function fetchAddressUTXOs(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddresesUTXOs(address, network);\n  } else {\n    return bitcoindListUnspent({\n      ...bitcoindParams(client),\n      ...{address}\n    });\n  }\n}\n\nexport function getAddressStatus(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddressStatus(address, network);\n  } else {\n    return bitcoindGetAddressStatus({\n      ...bitcoindParams(client),\n      ...{address}\n    });\n  }\n}\n\nexport function fetchFeeEstimate(network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetFeeEstimate(network);\n  } else {\n    return bitcoindEstimateSmartFee({\n      ...bitcoindParams(client),\n      ...{numBlocks: 1}\n    });\n  }\n}\n\nexport function broadcastTransaction(transactionHex, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerBroadcastTransaction(transactionHex, network);\n  } else {\n    return bitcoindSendRawTransaction({\n      ...bitcoindParams(client),\n      ...{hex: transactionHex}\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n    Table, TableHead, TableBody,\n    TableRow, TableCell,\n    Box\n  } from '@material-ui/core';\n\n  class WalletConfirmation extends React.Component {\n\n    static propTypes = {\n        extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n      };\n\n        render = () => {\n        return (\n          <Box>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell>BIP32 Path</TableCell>\n                  <TableCell>Extended Public Key</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {this.renderConfirmationInfo()}\n              </TableBody>\n            </Table>\n          </Box>\n        )\n      }\n\n      renderConfirmationInfo = () => {\n        const { extendedPublicKeyImporters } = this.props;\n        return Object.values(extendedPublicKeyImporters).map((importer, i) => (\n          <TableRow key={i}>\n            <TableCell>{importer.name}</TableCell>\n            <TableCell>{importer.method === 'text' ? 'N/A' : importer.bip32Path}</TableCell>\n            <TableCell>{importer.extendedPublicKey}</TableCell>\n          </TableRow>\n        ))\n      }\n  }\n\n  function mapStateToProps(state) {\n    return { extendedPublicKeyImporters: state.quorum.extendedPublicKeyImporters };\n  }\n\n  const mapDispatchToProps = {};\n\n  export default connect(mapStateToProps, mapDispatchToProps)(WalletConfirmation);\n","export const UPDATE_DEPOSIT_NODE = \"UPDATE_DEPOSIT_NODE\";\nexport const UPDATE_CHANGE_NODE = \"UPDATE_CHANGE_NODE\";\nexport const RESET_NODES_SPEND = \"RESET_NODES_SPEND\";\nexport const UPDATE_AUTO_SPEND = \"UPDATE_AUTO_SPEND\";\nexport const UPDATE_WALLET_NAME = \"UPDATE_WALLET_NAME\";\nexport const UPDATE_WALLET_MODE = \"UPDATE_WALLET_MODE\";\nexport const RESET_WALLET_VIEW = \"RESET_WALLET_VIEW\";\nexport const SPEND_NODES = \"SPEND_NODES\";\n\nexport const WALLET_MODES = {\n  VIEW: 0,\n  DEPOSIT: 1,\n  SPEND: 2,\n}\n\n\nexport function updateDepositNodeAction(value) {\n  return {\n    type: UPDATE_DEPOSIT_NODE,\n    value: {\n      ...value,\n      ...{change: false}\n    },\n  };\n}\n\nexport function updateChangeNodeAction(value) {\n  return {\n    type: UPDATE_CHANGE_NODE,\n    value: {\n      ...value,\n      ...{change: true}\n    },\n  };\n}\n\nexport function resetNodesSpend() {\n  return {\n    type: RESET_NODES_SPEND\n  }\n}\n\nexport function spendNodes() {\n  return {\n    type: SPEND_NODES\n  }\n}\n\nexport function updateAutoSpendAction(value) {\n  return {\n    type: UPDATE_AUTO_SPEND,\n    value: value\n  };\n}\n\nexport function setWalletModeAction(value) {\n  return  {\n    type: UPDATE_WALLET_MODE,\n    value: value\n  }\n}\n\nexport function updateWalletNameAction(number, value) {\n  return {\n    type: UPDATE_WALLET_NAME,\n    value: value\n  };\n}\n\nexport function resetWalletView() {\n  return {\n    type: RESET_WALLET_VIEW\n  }\n}\n\n","export const CHOOSE_PERFORM_SPEND = \"CHOOSE_PERFORM_SPEND\";\n\nexport const SET_REQUIRED_SIGNERS = 'SET_REQUIRED_SIGNERS';\nexport const SET_TOTAL_SIGNERS = 'SET_TOTAL_SIGNERS';\n\nexport const SET_INPUTS = 'SET_INPUTS';\n\nexport const ADD_OUTPUT = 'ADD_OUTPUT';\nexport const SET_OUTPUT_ADDRESS = 'SET_OUTPUT_ADDRESS';\nexport const SET_OUTPUT_AMOUNT = 'SET_OUTPUT_AMOUNT';\nexport const DELETE_OUTPUT = 'DELETE_OUTPUT';\n\nexport const SET_FEE_RATE = 'SET_FEE_RATE';\nexport const SET_FEE = 'SET_FEE';\n\nexport const FINALIZE_OUTPUTS = 'FINALIZE_OUTPUTS';\nexport const RESET_OUTPUTS = 'RESET_OUTPUTS';\n\nexport const SET_TXID = 'SET_TXID';\nexport const RESET_TRANSACTION = 'RESET_TRANSACTION';\nexport const SET_IS_WALLET = 'SET_IS_WALLET';\nexport const SET_CHANGE_OUTPUT_INDEX = 'SET_CHANGE_OUTPUT_INDEX';\n\nexport function choosePerformSpend() {\n  return {\n    type: CHOOSE_PERFORM_SPEND,\n  };\n}\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setInputs(inputs) {\n  return {\n    type: SET_INPUTS,\n    value: inputs,\n  };\n}\n\nexport function addOutput() {\n  return {\n    type: ADD_OUTPUT,\n  };\n}\n\nexport function setChangeOutputIndex(number) {\n  return {\n    type: SET_CHANGE_OUTPUT_INDEX,\n    value: number,\n  };\n}\n\n\nexport function setOutputAddress(number, address) {\n  return {\n    type: SET_OUTPUT_ADDRESS,\n    number: number,\n    value: address,\n  };\n}\n\nexport function setOutputAmount(number, amountString) {\n  return {\n    type: SET_OUTPUT_AMOUNT,\n    number: number,\n    value: amountString,\n  };\n}\n\nexport function deleteOutput(number) {\n  return {\n    type: DELETE_OUTPUT,\n    number: number,\n  };\n}\n\nexport function setFeeRate(valueString) {\n  return {\n    type: SET_FEE_RATE,\n    value: valueString,\n  };\n}\n\nexport function setFee(valueString) {\n  return {\n    type: SET_FEE,\n    value: valueString,\n  };\n}\n\nexport function finalizeOutputs(finalized) {\n  return {\n    type: FINALIZE_OUTPUTS,\n    value: finalized\n  };\n}\n\nexport function resetOutputs() {\n  return {\n    type: RESET_OUTPUTS,\n  };\n}\n\nexport function resetTransaction() {\n  return {\n    type: RESET_TRANSACTION,\n  };\n}\n\n\nexport function setTXID(txid) {\n  return {\n    type: SET_TXID,\n    value: txid,\n  };\n}\n\nexport function setIsWallet() {\n  return {\n    type: SET_IS_WALLET,\n  };\n}\n","import PropTypes from 'prop-types';\nimport React       from \"react\";\n\n// Components\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {FileCopy} from '@material-ui/icons';\n\nclass Copyable extends React.Component {\n\n  state = {\n    copied: false,\n    timer: null,\n  };\n\n  componentWillUnmount = () => {\n    const {timer} = this.state;\n    if (timer) {\n      clearTimeout(timer);\n    }\n  }\n\n  render = () => {\n    const {newline, text, children} = this.props;\n    return (\n      <span onClick={e => e.stopPropagation()}>\n        <CopyToClipboard text={text} onCopy={this.onCopy} options={{format: \"text/plain\"}}>\n          <span className=\"copyable\">\n            {children || text}\n            {newline && <br />}\n            {/* {this.props.icon && <span>&nbsp;</span>} */}\n            {/* {this.props.icon && <FAIcon name=\"clipboard\" />} */}\n            {this.badge()}\n          </span>\n        </CopyToClipboard>\n      </span>\n    );\n  }\n\n  badge = () => {\n    const {copied} = this.state;\n    if (copied) {\n      //return (<span>&nbsp; <span className=\"badge badge-success\">Copied</span></span>);\n      return <FileCopy fontSize=\"small\"/>;\n    } else { return null; }\n  }\n\n  onCopy = () => {\n    const timer = setTimeout(() => {\n      this.setState({copied: false, timer: null});\n    }, 1000);\n    this.setState({copied: true, timer});\n  }\n}\n\nCopyable.defaultProps = {\n  newline: false,\n  icon: true,\n}\n\nCopyable.propTypes = {\n  // defaults\n  newline:   PropTypes.bool.isRequired,\n  icon: PropTypes.bool.isRequired,\n  // parent\n  text:     PropTypes.string,\n  children: PropTypes.any,\n};\n\nexport default Copyable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { fetchAddressUTXOs } from \"../../blockchain\"\nimport {\n  updateDepositNodeAction,\n  resetWalletView,\n} from \"../../actions/walletActions\";\nimport BigNumber from \"bignumber.js\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\nimport {\n  Card, CardHeader,\n  CardContent, TextField,\n  Snackbar,\n  Button,\n  Box,\n} from '@material-ui/core';\n\nlet depositTimer;\n\nclass WalletDeposit extends React.Component {\n  state = {\n    address: \"\",\n    bip32Path: \"\",\n    amount: 0,\n    amountError: \"\",\n    showReceived: false,\n  }\n\n  static propTypes = {\n    deposits: PropTypes.object.isRequired,\n    client: PropTypes.object.isRequired,\n    updateDepositNode: PropTypes.func.isRequired,\n  }\n\n  componentDidMount() {\n    this.getDepositAddress()\n  }\n\n  componentWillUnmount() {\n    clearInterval(depositTimer)\n  }\n\n  getDepositAddress = () => {\n    const { depositNode, network, client, updateDepositNode } = this.props;\n\n    this.setState({address: depositNode.multisig.address, bip32Path: depositNode.bip32Path, showReceived: false});\n\n    depositTimer = setInterval(async () => {\n      let utxos;\n      try {\n        utxos = await fetchAddressUTXOs(this.state.address, network, client);\n        if (utxos.length) {\n          clearInterval(depositTimer)\n          const balanceSats = utxos\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue.amountSats),\n            new BigNumber(0));\n\n          updateDepositNode({\n            change: false,\n            bip32Path: this.state.bip32Path,\n            utxos,\n            balanceSats,\n            fetchedUTXOs: true,\n            fetchUTXOsError: ''\n          })\n          this.setState({showReceived: true});\n          // setTimeout(resetWalletView, 5000);\n        }\n      } catch(e) {\n        console.error(e);\n      }\n\n    }, 2000)\n  }\n\n  render() {\n    const { amount, amountError, address, showReceived } = this.state;\n    return (\n      <div>\n        <Card>\n          <CardHeader title=\"Deposit\"/>\n          <CardContent>\n            <Copyable text={this.qrString()} newline={true}>\n              <p><code>{address}</code></p>\n              <QRCode size={300} value={this.qrString()} level={'L'} />\n              <p>Scan QR code or click to copy address to clipboard.</p>\n            </Copyable>\n            <TextField\n              fullWidth\n              label=\"Amount BTC\"\n              name=\"depositAmount\"\n              onChange={this.handleAmountChange}\n              value={amount}\n              error={amountError !== \"\"}\n              helperText={amountError}\n            />\n            { this.renderReceived() }\n          </CardContent>\n        </Card>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={showReceived}\n          autoHideDuration={3000}\n          // onClose={() => this.setState({showReceived: false})}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">Deposit received</span>}\n        />\n      </div>\n    )\n  }\n\n  renderReceived = () => {\n    const { showReceived } = this.state;\n    const { resetWalletView } = this.props;\n    if (showReceived) {\n      return (\n        <Box mt={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.getDepositAddress}>Make another deposit</Button>\n          <Box ml={2} component=\"span\">\n            <Button variant=\"contained\" onClick={resetWalletView}>Return</Button>\n          </Box>\n        </Box>\n      )\n    }\n  }\n\n  handleAmountChange = (event)=> {\n    const amount = event.target.value;\n    let error = \"\"\n\n    if (amount.length && !amount.match(/^[0-9.]+$/)) {\n      error = \"Amount must be numeric\";\n    }\n    const decimal = amount.split('.');\n    if (decimal.length > 2) {\n      error = \"Amount must be numeric\";\n    } else if (decimal.length === 2 && decimal[1].length > 8) {\n      error = \"Amount must have maximum precision of 8 decimal places\";\n    }\n\n    this.setState({amount: event.target.value, amountError: error})\n  }\n\n  qrString = () => {\n    const {address, amount} = this.state;\n    return `bitcoin:${address}${amount ? '?amount='+amount : ''}`\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.settings,\n    depositNode: state.wallet.deposits.nextNode,\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateDepositNode: updateDepositNodeAction,\n  resetWalletView,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletDeposit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  blockExplorerTransactionURL,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\nimport {externalLink} from \"../../utils\";\nimport Copyable from \"../Copyable\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  Table, TableHead, TableBody, TableFooter,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\n// Assets\nimport 'react-table/react-table.css';\nimport styles from './styles.module.scss';\n\nclass UTXOSet extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {inputs, inputsTotalSats} = this.props;\n    return (\n      <Card >\n        <CardHeader title={`Available Inputs (${inputs.length})`} />\n        <CardContent>\n          <p>The following UTXOs will be spent as inputs in a new transaction.</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                <TableCell>Number</TableCell>\n                <TableCell>TXID</TableCell>\n                <TableCell>Index</TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n                <TableCell>View</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderInputs()}\n            </TableBody>\n            <TableFooter>\n              <TableRow hover>\n                <TableCell colSpan={3}>\n                  TOTAL:\n                </TableCell>\n                <TableCell colSpan={2}>\n                  {satoshisToBitcoins(inputsTotalSats).toString()}\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderInputs = () => {\n    const { inputs, network } = this.props;\n    return inputs.map((input, inputIndex) => {\n      const confirmedStyle = `${styles.utxoTxid}${input.confirmed ? '' : ' '+styles.unconfirmed}`;\n      const confirmedTitle = input.confirmed ? 'confirmed' : 'unconfirmed';\n      return (\n        <TableRow hover key={input.txid}>\n          <TableCell>\n            {inputIndex + 1}\n          </TableCell>\n          <TableCell className={confirmedStyle}>\n            <Copyable text={input.txid}>\n              <code title={confirmedTitle}>{input.txid}</code>\n            </Copyable>\n          </TableCell>\n          <TableCell>\n            <Copyable text={input.index.toString()} />\n          </TableCell>\n          <TableCell>\n            <Copyable text={satoshisToBitcoins(input.amountSats).toString()} />\n          </TableCell>\n          <TableCell>\n            {externalLink(blockExplorerTransactionURL(input.txid, network), <OpenInNew />)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n  };\n}\n\nexport default connect(mapStateToProps)(UTXOSet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  scriptToOps,\n  scriptToHex,\n  networkLabel,\n  multisigAddressType,\n  multisigRedeemScript,\n  multisigWitnessScript,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n  blockExplorerAddressURL,\n} from 'unchained-bitcoin';\nimport {\n  externalLink,\n} from \"../utils\";\n\n// Components\nimport Copyable from \"./Copyable\";\nimport { Typography, Grid, Box, Chip} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\nclass MultisigDetails extends React.Component {\n\n  static propTypes = {\n    network:  PropTypes.string.isRequired,\n    multisig: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {network, multisig} = this.props;\n    const address = multisig.address;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    return (\n      <Box mt={2}>\n\n        <Typography variant=\"h6\">Address</Typography>\n\n        <Typography align=\"center\" variant=\"h5\">\n\n          <Grid container direction=\"column\" spacing={2}>\n\n            <Grid item>\n              <Copyable text={address}>\n                <code>{address}</code>\n              </Copyable>\n              &nbsp;\n              {externalLink(blockExplorerAddressURL(address, network), <OpenInNew />)}\n            </Grid>\n\n            <Grid item justify=\"center\" container spacing={3}>\n\n              <Grid item>\n                <Chip label=\"BTC\" />\n              </Grid>\n\n              <Grid item>\n                <Chip label={networkLabel(network)}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={`${multisigRequiredSigners(multisig)}-of-${multisigTotalSigners(multisig)}`}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={multisigAddressType(multisig)}/>\n              </Grid>\n\n            </Grid>\n          </Grid>\n\n        </Typography>\n\n        {this.renderScript(\"Script\", multisig)}\n        {redeemScript && this.renderScript(\"Redeem Script\", redeemScript)}\n        {witnessScript && this.renderScript(\"Witness Script\", witnessScript)}\n      </Box>\n    );\n  }\n\n  renderScript = (name, script) => {\n    const hex = scriptToHex(script);\n    const ops = scriptToOps(script);\n    return (\n      <Box mt={2}>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Grid container spacing={2}>\n          <Grid item sm={6}>\n            <Copyable text={hex}><code>{hex}</code></Copyable>\n          </Grid>\n          <Grid item sm={6}>\n            <Copyable text={ops}><code>{ops}</code></Copyable>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultisigDetails);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n  blockExplorerAddressURL,\n} from 'unchained-bitcoin';\nimport {\n  externalLink,\n} from \"../../utils\";\n\n// Components\nimport {\n  TableRow, TableCell, Checkbox, FormHelperText, Grid,\n  ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport UTXOSet from \"../Spend/UTXOSet\";\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MultisigDetails from \"../MultisigDetails\";\n\n// Actions\nimport {\n  setInputs, setFeeRate,\n} from '../../actions/transactionActions';\nimport { updateAutoSpendAction, WALLET_MODES } from \"../../actions/walletActions\";\n\nimport styles from '../Spend//styles.module.scss';\n\nclass Node extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n    present: PropTypes.bool,\n    bip32Path: PropTypes.string.isRequired,\n    multisig: PropTypes.object,\n    spend: PropTypes.bool.isRequired,\n    change: PropTypes.bool.isRequired,\n    setInputs: PropTypes.func.isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.generate();\n  }\n\n  render = () => {\n    const {bip32Path, spend, fetchedUTXOs, balanceSats, fetchUTXOsError,\n      multisig, utxos, walletMode, addressKnown} = this.props;\n    const spending = walletMode === WALLET_MODES.SPEND;\n    return (\n      <TableRow key={bip32Path}>\n        { spending &&\n          <TableCell>\n            <Checkbox\n              id={bip32Path}\n              name=\"spend\"\n              onChange={this.handleSpend}\n              checked={spend}\n              disabled={!fetchedUTXOs || balanceSats.isEqualTo(0)}\n            />\n          </TableCell>\n        }\n        <TableCell>\n          <code>{bip32Path}</code>\n        </TableCell>\n        <TableCell>\n          {utxos.length}\n        </TableCell>\n        <TableCell>\n          {fetchedUTXOs && addressKnown ? satoshisToBitcoins(balanceSats).toFixed() : ''}\n          {fetchUTXOsError !== '' && <FormHelperText className=\"danger\">{fetchUTXOsError}</FormHelperText>}\n        </TableCell>\n        <TableCell>\n          {multisig ? this.renderAddress()\n           : '...'}\n        </TableCell>\n      </TableRow>\n      );\n  }\n\n  addressContent = () => {\n    const {multisig, network, addressUsed, balanceSats} = this.props;\n    return (\n      <div>\n        <Copyable text={multisig.address}>\n          <code className={addressUsed && balanceSats.isEqualTo(0) ? styles.spent : \"\"}>{multisig.address}</code>\n          </Copyable>\n        &nbsp;\n        {externalLink(blockExplorerAddressURL(multisig.address, network), <LaunchIcon onClick={e => e.stopPropagation()} />)}\n      </div>\n    )\n  }\n\n  renderAddress = () => {\n    const {bip32Path, utxos,  balanceSats, multisig} = this.props;\n    return (\n      <ExpansionPanel>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id={'address-header'+bip32Path}\n      >\n        {this.addressContent()}\n     </ExpansionPanelSummary>\n     <ExpansionPanelDetails>\n       <Grid container>\n        <Grid item md={12}>\n          <MultisigDetails multisig={multisig} />\n        </Grid>\n        { balanceSats.isGreaterThan(0) &&\n        <Grid item md={12}>\n          <UTXOSet\n            inputs={utxos}\n            inputsTotalSats={balanceSats}\n          />\n        </Grid>\n        }\n       </Grid>\n     </ExpansionPanelDetails>\n\n   </ExpansionPanel>  )\n\n  }\n\n  generate = () => {\n    const {present, change, bip32Path, addNode} = this.props;\n    if (!present) {\n      addNode(change, bip32Path);\n    }\n  }\n\n  handleSpend = (e) => {\n    const {change, bip32Path, updateNode, inputs, utxos, multisig, setInputs,\n      updateAutoSpend, setFeeRate, feeRate} = this.props;\n    let newInputs;\n    if (e.target.checked) {\n      newInputs = inputs.concat(utxos.map(utxo => ({...utxo, multisig, bip32Path: bip32Path})))\n    } else {\n      newInputs = inputs.filter(input => {\n        const newUtxos = utxos.filter(utxo => {\n          return utxo.txid === input.txid && utxo.index === input.index;\n        })\n        return newUtxos.length === 0;\n      })\n    }\n    setInputs(newInputs);\n    updateNode(change, {spend: e.target.checked, bip32Path});\n    updateAutoSpend(false);\n    setFeeRate(feeRate);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const change = ((ownProps.bip32Path || '').split('/')[1] === '1'); // // m, 0, 1\n  const braid = state.wallet[change ? 'change' : 'deposits'];\n  return {\n    ...state.settings,\n    ...{change},\n    ...braid.nodes[ownProps.bip32Path],\n    ...state.spend.transaction,\n    walletMode: state.wallet.info.walletMode,\n\n  };\n}\n\nconst mapDispatchToProps = {\n  setInputs,\n  setFeeRate,\n  updateAutoSpend: updateAutoSpendAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { bitcoindImportMulti, bitcoindGetAddressStatus } from '../bitcoind';\nimport { bitcoindParams, isWalletAddressNotFoundError } from '../bitcoind'\nimport { FormHelperText, Button, Box, Switch, FormControlLabel } from '@material-ui/core'\n\nlet interval;\nclass BitcoindAddressImporter extends React.Component {\n  static propTypes = {\n    addresses: PropTypes.array.isRequired,\n    client: PropTypes.object.isRequired,\n    autoImport: PropTypes.bool\n  };\n\n  state = {\n    imported: false,\n    importError: \"\",\n    rescan: false,\n    addressesError: \"\",\n    addressPresent: false, // this applies for auto import prop only\n  };\n\n  componentDidMount = () => {\n    if (this.props.autoImport) interval = setInterval(this.checkAddress, 5000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(interval);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.autoImport && prevProps.addresses.length && prevProps.addresses[0] !== this.props.addresses[0]) {\n      clearInterval(interval);\n      interval = setInterval(this.checkAddress, 5000);\n    }\n  }\n\n  render() {\n    const { imported, importError, rescan, addressPresent, addressesError } = this.state;\n    const { autoImport, addresses } = this.props;\n\n     return (\n      <Box>\n        {\n          imported && rescan && <FormHelperText>{this.pluralOrSingularAddress()} imported, rescan of your node may take some time.</FormHelperText>\n        }\n        {\n          imported && !rescan && <FormHelperText>{this.pluralOrSingularAddress()} imported.</FormHelperText>\n        }\n      { addressPresent &&\n        <div>\n          <FormHelperText>Address {imported ? 'imported to' : 'found in'} your wallet!</FormHelperText>\n          <FormHelperText>You can properly determine your addresses current balance.</FormHelperText>\n          <FormHelperText>\n            Your node may need to do a rescan to determine if an address has been previously used. If you\n            are sure you have done so, or you are sure of the address's history, you may proceed.  If you\n            are unsure, you may select \"rescan\" and import.\n          </FormHelperText>\n        </div>\n      }\n\n      {\n        !addressPresent && autoImport &&\n        <FormHelperText>Checking node for presence of {this.pluralOrSingularAddress()}</FormHelperText>\n      }\n      {\n        !addressPresent && !autoImport &&\n        <FormHelperText>To get accurate information from your node your {this.pluralOrSingularAddress()}\n          will need to be imported to your node.  Importing will give you accurate balance information\n          however to know if an address hase been used previously, a rescan needs to take place.\n        </FormHelperText>\n      }\n      <FormHelperText error>{addressesError}</FormHelperText>\n        {/* <FormHelperText>Addresses used with bitcoind node must be imported to your node.  If you have not already, you can import now.</FormHelperText> */}\n        <p>\n          {/* Import {this.pluralOrSingularAddress()} to your node? */}\n          <Box component=\"span\" ml={2}>\n            <Button\n              variant=\"contained\"\n              disabled = { !rescan && (addressPresent  || addresses.length === 0) }\n              onClick={this.import}>Import</Button>\n          </Box>\n          <Box component=\"span\" ml={2}>\n            <FormControlLabel\n              control={\n                <Switch\n                checked={rescan}\n                onChange={this.handleRescan}\n                color=\"secondary\"\n                />\n              }\n              label=\"Rescan\"\n            />\n\n          </Box>\n        </p>\n        <FormHelperText error>{importError}</FormHelperText>\n\n      </Box>\n    )\n  }\n\n  pluralOrSingularAddress() {\n    const { addresses } = this.props;\n    return `address${addresses.length > 1 ? 'es' : ''}`\n  }\n\n  handleRescan = (e) => {\n    this.setState({rescan: e.target.checked})\n  }\n\n  checkAddress = async () => {\n    const { client, addresses, autoImport } = this.props;\n    const address = addresses[0] // TODO: loop, or maybe just check one\n\n    try {\n      const status = await bitcoindGetAddressStatus({ // TODO: use this to warn if spent\n        ...bitcoindParams(client),\n        address\n      });\n      if (typeof status.used !== 'undefined') {\n        this.setState({addressPresent: true, addressesError: \"\"});\n        clearInterval(interval);\n      }\n    } catch (e) {\n      // e.status 401 e.statusText\n      // e.status 500 e.data.error.message\n      const status = (e.response && e.response.status) || 'unknown'\n      if (autoImport\n        && isWalletAddressNotFoundError(e) && !this.state.rescan) {\n        this.import();\n      }\n      this.setState({\n        addressesError: status === 401 ?\n        e.response.statusText : status === 500 ?\n        e.response.data.error.message :\n        e.message || \"An unknown address error occured\"})\n      console.log(status, e.response)\n    }\n\n  }\n\n  import = () => {\n    const { addresses, client, importCallback } = this.props;\n    const { rescan } = this.state;\n    const label = \"\"; // TODO: do we want to allow to set? or set to \"caravan\"?\n    bitcoindImportMulti({\n      ...bitcoindParams(client),\n      ...{addresses, label, rescan}\n    })\n    .then(response => {\n      const responseError = response.result.reduce((e, c) => {\n        return (c.error && c.error.message) || e\n      }, \"\")\n      this.setState({\n        importError: responseError,\n        imported: responseError === \"\"\n      });\n      if (typeof importCallback !== 'undefined') {\n        importCallback(response.result)\n      }\n    })\n    .catch(e => {\n      this.setState({\n        importError: \"Unable to import, check your settings and try again\",\n        imported: false\n      });\n    });\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BitcoindAddressImporter);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from \"bignumber.js\";\nimport {\n  fetchAddressUTXOs,\n  getAddressStatus,\n} from \"../../blockchain\";\n\n// Components\nimport {\n  Button,\n  FormGroup, FormControlLabel, Checkbox, FormLabel,\n  Grid, Box,\n  Table, TableHead, TableBody,\n  TableRow, TableCell, TablePagination,\n} from '@material-ui/core';\nimport Node from \"./Node\";\nimport BitcoindAddressImporter from '../BitcoindAddressImporter';\nimport { WALLET_MODES } from '../../actions/walletActions';\n\nclass NodeSet extends React.Component {\n\n  static propTypes = {\n    depositNodes: PropTypes.object.isRequired,\n    changeNodes: PropTypes.object.isRequired,\n    canLoad: PropTypes.bool,\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n  };\n\n  state = {\n    page: 0,\n    nodesPerPage: 10,\n    change: false,\n    spend: false,\n    filterIncludeSpent: false,\n    filterIncludeZeroBalance: !(this.props.walletMode === WALLET_MODES.SPEND),\n  };\n\n  unknownAddresses = [];\n\n  render() {\n    const {page, nodesPerPage, change} = this.state;\n    const {walletMode, canLoad, client} = this.props\n    const spending = walletMode === WALLET_MODES.SPEND;\n    const useAddressImporter = !spending && client.type === \"private\";\n\n    if (useAddressImporter) {\n      this.unknownAddresses = this.getUnknownAddressNodes()\n        .map(node => node.multisig.address) ;\n    }\n    return (\n      <Grid item md={12}>\n        {!spending && this.renderFilters()}\n        { useAddressImporter &&\n          <BitcoindAddressImporter\n            addresses={this.unknownAddresses}\n            importCallback={this.addressesImported}\n            />\n        }\n      <Table style={{tableLayout: \"fixed\"}}>\n            <TableHead>\n              <TableRow>\n                {spending && <TableCell width={62}>Spend?</TableCell>}\n                <TableCell width={106}>BIP32 Path</TableCell>\n                <TableCell width={68}>UTXOs</TableCell>\n                <TableCell width={82}>Balance</TableCell>\n                <TableCell>Address</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderNodes()}\n            </TableBody>\n          </Table>\n          <Grid container>\n            <Grid item md={6}>\n              <TablePagination\n                component=\"div\"\n                count={this.rowCount()}\n                rowsPerPage={nodesPerPage}\n                page={page}\n                backIconButtonProps={{\n                  'aria-label': 'previous page',\n                }}\n                nextIconButtonProps={{\n                  'aria-label': 'next page',\n                }}\n                onChangePage={this.handlePageChange}\n                onChangeRowsPerPage={this.handleChangeRowsPerPage}\n              />\n            </Grid>\n            <Grid item md={2}>\n              {canLoad && page === this.pageCount() - 1 && <Button type=\"button\" variant=\"contained\" color=\"secondary\" onClick={this.generateAnotherPage}>More</Button>}\n            </Grid>\n            <Grid item md={4}>\n              <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.toggleChange}>{change ? \"View Deposits\" : \"View Change\"}</Button>\n            </Grid>\n          </Grid>\n\n        </Grid>\n    );\n  }\n\n  renderFilters = () => {\n    const { filterIncludeSpent, filterIncludeZeroBalance } = this.state\n    return (\n    <FormGroup row>\n      <FormLabel component=\"h2\"><Box mr={3}>Include</Box></FormLabel>\n      <FormControlLabel control={\n        <Checkbox\n          checked={filterIncludeSpent}\n          value=\"filterIncludeSpent\"\n          onChange={this.filterAddresses}\n        />} label=\"Spent Addresses\" />\n      <FormControlLabel control={\n        <Checkbox\n          checked={filterIncludeZeroBalance}\n          value=\"filterIncludeZeroBalance\"\n          onChange={this.filterAddresses}\n        />} label=\"Zero Balance\" />\n    </FormGroup>\n    )\n  }\n\n  filterAddresses = (event, checked) => {\n    this.setState({[event.target.value]: checked, page: 0});\n  }\n\n  getUnknownAddressNodes = () => {\n    const {changeNodes, depositNodes} = this.props\n    return Object.values(depositNodes).concat(Object.values(changeNodes))\n    .filter(node => !node.addressKnown);\n  }\n\n\n  addressesImported = async result => {\n    // this will give me an array [{success: true/false}...]\n    // need to loop through and mark nodes as addressKnown\n    const { updateNode, client, network } = this.props;\n    const nodes = []\n    const unknown = this.getUnknownAddressNodes();\n    result.forEach((addr, i) => {\n      if (addr.success) nodes.push(unknown[i]); // can now set to known and refresh status\n    });\n\n    nodes.forEach(async node => {\n      const utxos = await fetchAddressUTXOs(node.multisig.address, network, client);\n      const addressStatus = await getAddressStatus(node.multisig.address, network, client);\n      let updates;\n      if (utxos) {\n        const balanceSats = utxos\n              .map((utxo) => utxo.amountSats)\n              .reduce(\n                (accumulator, currentValue) => accumulator.plus(currentValue),\n                new BigNumber(0));\n        updates = {balanceSats, utxos, fetchedUTXOs: true, fetchUTXOsError: ''}\n      }\n\n\n      updateNode(node.change, {\n        bip32Path: node.bip32Path,\n        addressKnown: true,\n        ...updates,\n        addressStatus,\n      });\n    });\n  }\n\n  getNodeSet = () => {\n    const { changeNodes, depositNodes} = this.props;\n    const { change, filterIncludeSpent, filterIncludeZeroBalance } = this.state\n    const nodes = change ? changeNodes : depositNodes\n\n    let nodeSet = []\n    Object.values(nodes).forEach(node => {\n      if (node.balanceSats.isGreaterThan(0)) {\n        nodeSet.push(node);\n      } else if (filterIncludeZeroBalance && node.balanceSats.isEqualTo(0) && !node.addressUsed) {\n        nodeSet.push(node);\n      } else if (filterIncludeSpent && node.addressUsed) {\n        nodeSet.push(node);\n      }\n    })\n\n    nodeSet = nodeSet.reduce((nodesObject, currentNode) => {\n        nodesObject[currentNode.bip32Path] = currentNode;\n        return nodesObject;\n    },{});\n\n    return nodeSet\n  }\n\n  renderNodes = () => {\n    const {page, nodesPerPage, change, spend} = this.state;\n    const {addNode, updateNode} = this.props;\n    const startingIndex = (page) * nodesPerPage;\n    const nodesRows = [];\n    const nodeSet = this.getNodeSet();\n    for (let index=0; index < nodesPerPage; index++) {\n      const whichOne = startingIndex + index;\n      if(whichOne > Object.keys(nodeSet).length -1) break;\n      const bip32Path = Object.values(nodeSet)[whichOne].bip32Path;\n      const nodeRow = <Node\n        key={bip32Path}\n        bip32Path={bip32Path}\n        addNode={addNode}\n        updateNode={updateNode}\n        change={change}\n        spend={spend}\n        />;\n      nodesRows.push(nodeRow);\n    }\n    return nodesRows;\n  }\n\n  handlePageChange = (e, selected) => {\n    const page = selected // + 1;\n    this.setState({page});\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    this.setState({nodesPerPage: e.target.value, page: 0});\n  }\n\n  bip32Path = (index) => {\n    const {change} = this.state;\n    const changePath = (change ? \"1\" : \"0\");\n    return `m/${changePath}/${index}`;\n  }\n\n  pageCount = () => {\n    const {nodesPerPage} = this.state;\n    return Math.ceil(this.rowCount() / nodesPerPage);\n  }\n\n  rowCount = () => {\n    const nodeSet = this.getNodeSet();\n    return Object.keys(nodeSet).length;\n  }\n\n  generateAnotherPage = async () => {\n    const {addNode, depositNodes, changeNodes} = this.props;\n    const {change, nodesPerPage, page} = this.state;\n    const startingIndex = Object.keys(change ? changeNodes : depositNodes).length;\n    for (let index=0; index < nodesPerPage + (nodesPerPage - (startingIndex % nodesPerPage)); index++) {\n      const bip32path = this.bip32Path(startingIndex + index);\n      await addNode(change, bip32path);\n    }\n    if (startingIndex % nodesPerPage === 0) // otherwise we will be filling this page first\n      this.setState({page: page + 1});\n  }\n\n  toggleChange = () => {\n    const {change} = this.state;\n    this.setState({change: (!change), page: 0});\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    changeNodes: state.wallet.change.nodes,\n    depositNodes: state.wallet.deposits.nodes,\n    walletMode: state.wallet.info.walletMode,\n    client: state.client,\n    ...state.settings,\n\n  };\n}\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NodeSet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateOutputAmountBTC,\n} from 'unchained-bitcoin';\nimport BigNumber from \"bignumber.js\";\n\n// Actions\nimport {\n  setOutputAddress,\n  setOutputAmount,\n  deleteOutput,\n  setChangeOutputIndex\n} from '../../actions/transactionActions';\n\n// Components\nimport { Grid, Tooltip, TextField, IconButton, InputAdornment } from '@material-ui/core';\nimport AccountBalanceWalletOutlinedIcon from '@material-ui/icons/AccountBalanceWallet';\nimport { Delete, AddCircle, RemoveCircle } from '@material-ui/icons';\n\n// Assets\nimport styles from './styles.module.scss';\n\nclass OutputEntry extends React.Component {\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    addressError: PropTypes.string.isRequired,\n    amountError: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    setAddress: PropTypes.func.isRequired,\n    setAmount: PropTypes.func.isRequired,\n    remove: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {outputs, finalizedOutputs, address, amount, addressError, amountError,\n           changeOutputIndex, number} = this.props;\n\n    return (\n      <Grid container>\n\n        <Grid item xs={7}>\n          <TextField\n            fullWidth\n            placeholder=\"Address\"\n            name=\"destination\"\n            className={styles.outputsFormInput}\n            disabled={finalizedOutputs || changeOutputIndex === number}\n            onChange={this.handleAddressChange}\n            value={address}\n            error={this.hasAddressError()}\n            helperText={addressError}\n            InputProps={this.renderChangeAdornment()}\n\n          />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TextField\n            fullWidth\n            placeholder=\"Amount (BTC)\"\n            className={styles.outputsFormInput}\n            name=\"amount\"\n            disabled={finalizedOutputs || changeOutputIndex === number}\n            onChange={this.handleAmountChange}\n            value={amount}\n            error={this.hasAmountError()}\n            helperText={amountError}\n            /* type=\"number\" */\n            /* InputProps={{ */\n            /*   min: \"0\",  */\n            /*   max: \"21000000\",  */\n            /*   step: \"0.00000001\" */\n            /* }} */\n          />\n        </Grid>\n\n        {(!finalizedOutputs) && this.hasBalanceError() && this.isBalanceable() &&\n         <Grid item xs={1}>\n           <Tooltip title={`${this.balanceAction()} to ${this.autoBalancedAmount().toString()}`} placement=\"top\">\n             <small>\n               <IconButton onClick={this.handleBalance}>\n                 {this.balanceAction() === \"Increase\" ? <AddCircle /> : <RemoveCircle />}\n               </IconButton>\n             </small>\n           </Tooltip>\n         </Grid>}\n\n        {(!finalizedOutputs) && outputs.length > 1 &&\n         <Grid item xs={1}>\n           <Tooltip title=\"Remove Output\" placement=\"top\">\n             <IconButton onClick={this.handleDelete}>\n               <Delete/>\n             </IconButton>\n           </Tooltip>\n         </Grid>}\n\n      </Grid>\n    );\n  }\n\n  //\n  // Address\n  //\n\n  addChangeAddress = () => {\n    const {changeNode, number, setAddress, setChangeOutput} = this.props;\n    setAddress(number, changeNode.multisig.address);\n    setChangeOutput(number);\n    this.handleBalance();\n  }\n\n  renderChangeAdornment = () => {\n    const {changeNode, number, changeOutputIndex, address } = this.props;\n    if (changeNode !== null) {\n      let title, disable=false\n      if (changeOutputIndex === 0 && address === '') {\n        title = 'Set to wallet change address';\n      } else if(number === changeOutputIndex) {\n        title = 'Your change will go here.'\n        disable = true;\n      } else return {}\n      return (\n        {\n          /* min: \"0\", */\n          /* max: \"1000\", */\n          /* step: \"any\", */\n          endAdornment: <InputAdornment position=\"end\">\n            <Tooltip placement='top' title={title}>\n              <small>\n                <IconButton onClick={this.addChangeAddress} disabled={disable}>\n                  <AccountBalanceWalletOutlinedIcon />\n                </IconButton>\n              </small>\n            </Tooltip>\n          </InputAdornment>,\n        }\n      )\n    } else return {}\n\n  }\n\n  handleAddressChange = (event) => {\n    const {number, setAddress} = this.props;\n    setAddress(number, event.target.value);\n  }\n\n  hasAddressError = () => {\n    const {addressError} = this.props;\n    return addressError !== '';\n  }\n\n  //\n  // Amount\n  //\n\n  handleAmountChange = (event) => {\n    const {number, setAmount} = this.props;\n    setAmount(number, event.target.value);\n  }\n\n  hasAmountError = () => {\n    const {amountError} = this.props;\n    return amountError !== '';\n  }\n\n  //\n  // Balance\n  //\n\n  isNotBalanceable = () => {\n    const {number, outputs, feeError, amountError, amount, inputsTotalSats} = this.props;\n    if (feeError !== '') { return true; }\n    for (var i = 0; i < outputs.length; i++) {\n      if (i !== (number - 1)) {\n        if (outputs[i].amountError !== '' || outputs[i].amount === '') {\n          return true;\n        }\n      }\n    }\n    const newAmount = this.autoBalancedAmount();\n    if (validateOutputAmountBTC(newAmount, inputsTotalSats) !== '') { return true; }\n    if (amountError === '' && (newAmount === new BigNumber(amount))) { return true; }\n    return false;\n  }\n\n  isBalanceable = () => (!this.isNotBalanceable())\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  autoBalancedAmount = () => {\n    const {number, fee, inputsTotalSats, outputs} = this.props;\n    const outputTotalSats = outputs\n          .filter((output, i) => i !== number - 1)\n          .map((output) => bitcoinsToSatoshis(new BigNumber(output.amount)))\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0));\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    return satoshisToBitcoins(inputsTotalSats.minus(outputTotalSats.plus(feeSats)));\n  }\n\n  balanceAction = () => {\n    const {balanceError, changeOutputIndex, number} = this.props;\n    if ((!this.hasBalanceError()) || this.isNotBalanceable()) {return null; }\n    if( changeOutputIndex === number) this.handleBalance();\n    return balanceError.split(\" \")[0];\n  }\n\n  handleBalance = () => {\n    const {number, setAmount} = this.props;\n    setAmount(number, this.autoBalancedAmount().toString());\n  }\n\n  //\n  // State\n  //\n\n  hasError = () => {\n    return this.hasAddressError() || this.hasAmountError();\n  }\n\n  handleDelete = () => {\n    const {number, remove} = this.props;\n    remove(number);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.spend.transaction,\n    ...state.spend.transaction.outputs[ownProps.number - 1],\n    changeNode: state.wallet.change.nextNode,\n  };\n}\n\nconst mapDispatchToProps =  {\n  setAddress: setOutputAddress,\n  setAmount: setOutputAmount,\n  remove: deleteOutput,\n  setChangeOutput: setChangeOutputIndex,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { map } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { fetchFeeEstimate } from '../../blockchain';\nimport {\n  bitcoinsToSatoshis,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\n\n// Actions\nimport {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n} from '../../actions/transactionActions';\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  Grid, Button, Tooltip, TextField,\n  Box, IconButton, InputAdornment,\n} from \"@material-ui/core\";\nimport {Speed} from \"@material-ui/icons\";\nimport OutputEntry from './OutputEntry';\n\nclass OutputsForm extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeRate: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n    setFee: PropTypes.func.isRequired,\n    addOutput: PropTypes.func.isRequired,\n    setOutputAmount: PropTypes.func.isRequired,\n    resetOutputs: PropTypes.func.isRequired,\n    finalizeOutputs: PropTypes.func.isRequired,\n    feeRateError: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    balanceError: PropTypes.string.isRequired,\n  };\n\n  state = {\n    feeRateFetchError: '',\n  };\n\n  componentDidMount = () => {\n    this.initialOutputState();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const { signatureImporters } = this.props;\n    const finalizedCount = Object.keys(signatureImporters).reduce((o, k) => o + (signatureImporters[k].finalized), 0);\n    if(finalizedCount === 0) this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  async initialOutputState() {\n    const { inputs, outputs } = this.props;\n    await this.getFeeEstimate();\n    const {inputsTotalSats, fee, setOutputAmount} = this.props;\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    const outputAmount = satoshisToBitcoins(inputsTotalSats.minus(feeSats));\n    // onliy initialize once so we don't lose state\n    if (inputs.length && outputs[0].amount === '') setOutputAmount(1, outputAmount.toFixed(8));\n  }\n\n  render() {\n    const {feeRate, fee, finalizedOutputs, feeRateError, feeError, balanceError} = this.props;\n    const {feeRateFetchError} = this.state;\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Define Outputs\"/>\n        <CardContent>\n            <Box>\n              <Grid>\n              {this.renderOutputs()}\n              </Grid>\n\n              <Grid item container spacing={1}>\n\n                <Grid item xs={4}>\n                    <Button\n                      variant=\"contained\"\n                      disabled={finalizedOutputs}\n                      onClick={this.handleAddOutput}\n                    >\n                      Add output\n                    </Button>\n                </Grid>\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Fee Rate (Sats/byte)\"\n                    value={feeRate}\n                    placeholder=\"Sats/byte\"\n                    name=\"fee_rate\"\n                    disabled={finalizedOutputs}\n                    onChange={this.handleFeeRateChange}\n                    error={this.hasFeeRateError()}\n                    helperText={feeRateFetchError || feeRateError}\n                    /* type=\"number\" */\n                    InputProps={{\n                      /* min: \"0\", */\n                      /* max: \"1000\", */\n                      /* step: \"any\", */\n                      endAdornment: <InputAdornment position=\"end\">\n                                      <Tooltip placement='top' title='Estimate best rate'>\n                                        <small>\n                                          <IconButton onClick={this.getFeeEstimate}  disabled={finalizedOutputs}>\n                                            <Speed />\n                                          </IconButton>\n                                        </small>\n                                      </Tooltip>\n                                    </InputAdornment>,\n                    }}\n                  />\n                </Grid>\n\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Estimated Fees (BTC)\"\n                    placeholder=\"BTC\"\n                    name=\"fee_total\"\n                    disabled={finalizedOutputs}\n                    value={fee}\n                    onChange={this.handleFeeChange}\n                    error={this.hasFeeError()}\n                    helperText={feeError}\n                    /* type=\"number\" */\n                    /* InputProps={{ */\n                    /*   min: \"0.00000001\", */\n                    /*   max: \"0.025\", */\n                    /*   step: \"0.00000001\", */\n                    /* }} */\n                  />\n                </Grid>\n\n                <Grid item xs={2}/>\n\n              </Grid>\n\n              <Grid item container spacing={1}>\n                <Grid item xs={4}/>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Inputs Total\"\n                    readOnly={true}\n                    value={this.inputsTotal().toString()}\n                    disabled={finalizedOutputs}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Outputs & Fee Total\"\n                    value={this.outputsAndFeeTotal().toString()}\n                    error={this.hasBalanceError()}\n                    disabled={finalizedOutputs}\n                    helperText={balanceError}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={2}/>\n              </Grid>\n\n              <Grid item>\n\n                <Grid container spacing={3}>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={this.gatherSignaturesDisabled()}\n                      onClick={this.handleFinalize}\n                    >\n                      Gather Signatures\n                    </Button>\n                  </Grid>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      disabled={finalizedOutputs}\n                      onClick={this.handleReset}\n                    >\n                      Reset Outputs\n                    </Button>\n                  </Grid>\n\n                </Grid>\n\n              </Grid>\n\n            </Box>\n\n\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderOutputs = () => {\n    const { outputs } = this.props;\n    return map(outputs).map((output, i) => (\n      <Grid container key={i}>\n        <OutputEntry number={i+1} />\n      </Grid>\n    ));\n  }\n\n  inputsTotal = () => {\n    const {inputsTotalSats} = this.props;\n    return satoshisToBitcoins(inputsTotalSats);\n  }\n\n  outputsAndFeeTotal = () => {\n    const {outputs, fee, inputs} = this.props;\n    if (!inputs.length) return '';\n    return outputs\n      .map((output) => new BigNumber(output.amount || 0))\n      .reduce(\n        (accumulator, currentValue) => accumulator.plus(currentValue),\n        new BigNumber(0))\n      .plus(new BigNumber(fee));\n  }\n\n  hasFeeRateFetchError = () => {\n    const {feeRateFetchError} = this.state;\n    return feeRateFetchError !== '';\n  }\n\n  hasFeeRateError = () => {\n    const {feeRateError} = this.props;\n    return feeRateError !== '';\n  }\n\n  hasFeeError = () => {\n    const {feeError} = this.props;\n    return feeError !== '';\n  }\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  hasError = () => {\n    return (\n      this.hasFeeRateFetchError()\n        || this.hasFeeRateError()\n        || this.hasFeeError()\n        || this.hasBalanceError()\n    );\n  }\n\n  handleAddOutput = () => {\n    const {addOutput} = this.props;\n    addOutput();\n  };\n\n  handleFeeRateChange = (event) => {\n    const {setFeeRate, inputs} = this.props;\n    if (inputs.length) setFeeRate(event.target.value);\n  }\n\n  handleFeeChange = (event) => {\n    const {setFee} = this.props;\n    setFee(event.target.value);\n  }\n\n  handleFinalize = () => {\n    const { finalizeOutputs } = this.props;\n    finalizeOutputs(true);\n  };\n\n  handleReset = () => {\n    const { resetOutputs } = this.props;\n    resetOutputs();\n    this.initialOutputState();\n  }\n\n  getFeeEstimate = async () => {\n    const {client, network, setFeeRate} = this.props;\n    let newFeeRate = 1;\n    let feeRateFetchError = '';\n    try {\n      newFeeRate = await fetchFeeEstimate(network, client);\n    } catch (e){\n      console.error(e);\n      feeRateFetchError = 'There was an error fetching the fee rate.';\n    } finally {\n      setFeeRate(newFeeRate.toString());\n      this.setState({feeRateFetchError});\n    }\n  }\n\n  gatherSignaturesDisabled = () => {\n    const {finalizedOutputs, outputs, inputs} = this.props;\n    if (inputs.length === 0) return true;\n    if (finalizedOutputs || this.hasError()) { return true; }\n    for (var i=0; i < outputs.length; i++) {\n      const output = outputs[i];\n      if (output.address === '' || output.amount === '' || output.addressError !== '' || output.amountError !== '') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{\n      network: state.settings.network,\n      client: state.client,\n      },\n    ...state.spend.transaction,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n  };\n}\n\nconst mapDispatchToProps = {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputsForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport {\n  Box,\n  TextField,\n  Button,\n} from '@material-ui/core';\n\nclass TextSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    signatureImporter: PropTypes.shape({}).isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n  };\n\n  state = {\n    signatureJSON: '',\n    error: '',\n  };\n\n  render = () => {\n    const { signatureJSON, error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          name=\"signature\"\n          label=\"Signature\"\n          rows={5}\n          value={signatureJSON}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.finalize}\n            disabled={signatureJSON === ''}\n          >\n            Add Signature\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const signatureJSON = event.target.value;\n    let error = '';\n    try {\n      JSON.parse(signatureJSON);\n    } catch(parseError) {\n      error = \"Invalid JSON.\";\n    }\n    this.setState({signatureJSON, error});\n  }\n\n  finalize = () => {\n    const {validateAndSetSignature} = this.props;\n    const {signatureJSON} = this.state;\n    validateAndSetSignature(\n      JSON.parse(signatureJSON),\n      this.setError);\n  }\n\n}\n\nexport default TextSignatureImporter;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  PENDING,\n  ACTIVE,\n} from \"unchained-wallets\";\n\n// Components\nimport QrReader from \"react-qr-reader\";\nimport { Grid, Button, Box, FormHelperText} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\n\nconst QR_CODE_READER_DELAY = 300; // ms?\n\nclass HermitReader extends Component {\n\n  static propTypes = {\n    onStart: PropTypes.func,\n    onSuccess: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    width: PropTypes.string.isRequired,\n    startText: PropTypes.string.isRequired,\n    interaction: PropTypes.object.isRequired,\n  };\n\n  static defaultProps = {\n    width: \"256px\",\n    startText: \"Scan\",\n  }\n  \n  state = {\n    walletState: PENDING,\n    error: '',\n  };\n\n  render = () => {\n    const {walletState, error} = this.state;\n    const {interaction, width, startText} = this.props;\n\n    if (walletState === PENDING) {\n      const commandMessage = interaction.messageFor({walletState, code: \"hermit.command\"});\n      return (\n        <div>\n          <p>{commandMessage.instructions}</p>\n          <Grid container justify=\"center\" className=\"mb-2\">\n            <Copyable text={commandMessage.command}>\n              <code><strong>{commandMessage.mode}&gt;</strong> {commandMessage.command}</code>\n            </Copyable>\n          </Grid>\n          <p>When you are ready, scan the QR code produced by Hermit:</p>\n          <Box mt={2}>\n            <Button  variant=\"contained\" color=\"primary\" className=\"mt-2\" size=\"large\" onClick={this.handleStart}>{startText}</Button>\n          </Box>\n        </div>\n      );\n    } \n\n    if (walletState === ACTIVE) {\n      return (\n        <Grid container direction=\"column\">\n          <Grid item>\n            <QrReader \n              delay={QR_CODE_READER_DELAY} \n              onError={this.handleError} \n              onScan={this.handleScan}\n              style={{width}}\n              facingMode='user'\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Cancel</Button>\n          </Grid>\n        </Grid>\n      );\n    }\n    \n    if (walletState === 'error' || walletState === 'success') {\n      return (\n        <div>\n          <FormHelperText error>{error}</FormHelperText>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Reset</Button>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  handleStart = () => {\n    const {onStart} = this.props;\n    this.setState({walletState: ACTIVE, error: ''});\n    if (onStart) { onStart(); }\n  }\n\n  handleError = (error) => {\n    const {onClear} = this.props;\n    this.setState({walletState: 'error', error: error.message});\n    if (onClear) {onClear(); }\n  }\n\n  handleScan = (data) => {\n    const {onSuccess, interaction} = this.props;\n    if (data) {\n      try {\n        const result = interaction.parse(data);\n        onSuccess(result);\n        this.setState({walletState: 'success'});\n      } catch(e) {\n        this.handleError(e);\n      }\n    }\n  }\n\n  handleStop = () => {\n    const {onClear} = this.props;\n    this.setState({\n      walletState: PENDING,\n      error: '',\n    });\n    if (onClear) {onClear(); }\n  }\n\n}\n\nexport default HermitReader;\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\n\nclass HermitDisplayer extends React.Component {\n\n  static propTypes = {\n    string: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    string: '',\n    width: 120,\n  }\n\n  state = {\n    errorMessage: '',\n  };\n\n  render = () => {\n    const {width, string} = this.props;\n    return (\n      <Copyable text={string} newline={true}>\n        <QRCode size={width} value={string} level={'L'} />\n      </Copyable>\n    );\n  }\n\n}\n\nexport default HermitDisplayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  INFO,\n  WARNING,\n  ERROR,\n} from \"unchained-wallets\";\nimport { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { Info, Warning, Error } from '@material-ui/icons';\n\nclass WalletFeedback extends React.Component {\n\n  static propTypes = {\n    messages: PropTypes.array.isRequired,\n    excludeCodes: PropTypes.array.isRequired,\n  };\n\n  static defaultProps = {\n    messages: [],\n    excludeCodes: [],\n  }\n\n  render = () => {\n    return (\n      <small>\n        <List>\n          {this.filteredMessages().map((m, i) => this.renderMessage(m, i))}\n        </List>\n      </small>\n    );\n  }\n\n  renderMessage = (message, key) => {\n    return (\n      <ListItem key={key}>\n        <ListItemIcon>\n          {this.messageIcon(message)}\n        </ListItemIcon>\n        <ListItemText>\n          {message.text}\n        </ListItemText>\n      </ListItem>\n    );\n  }\n\n  filteredMessages = () => {\n    const {messages, excludeCodes} = this.props;\n    return messages.filter((message) => {\n      for (let i=0; i < excludeCodes.length; i++) {\n        const excludeCode = excludeCodes[i];\n        if ((message.code || '').includes(excludeCode)) { return false; }\n      }\n      return true;\n    });\n  }\n\n  messageIcon = (message) => {\n    switch (message.level) {\n    case INFO:\n      return <Info />;\n    case WARNING:\n      return <Warning />;\n    case ERROR:\n      return <Error />;\n    default:\n      return null;\n    }    \n  }\n\n  messageColrName = (message) => {\n    switch (message.level) {\n    case INFO:\n      return \"primary.main\";\n    case WARNING:\n      return \"text.secondary\";\n    case ERROR:\n      return \"error.main\";\n    default:\n      return \"\";\n    }\n  }\n}\n\nexport default WalletFeedback;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  UNSUPPORTED,\n  HermitSignTransaction,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Grid,\n  Box,\n  TextField,\n  Button,\n  FormHelperText,\n} from '@material-ui/core';\nimport HermitReader from \"../Hermit/HermitReader\";\nimport HermitDisplayer from \"../Hermit/HermitDisplayer\";\nimport WalletFeedback from '../WalletFeedback';\n\nclass HermitSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bip32PathError: '',\n      bip32PathFinalized: false,\n      signatureError: '',\n      walletState: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    // Sign all inputs with the same BIP32 path because we currently\n    // assume each input is attached to the same address, hence redeem\n    // script, hence public key, hence BIP32 path.\n    //\n    // This will need to be changed if we are signing inputs across\n    // addresses.\n    const bip32Paths = inputs.map((input) => {\n      if (typeof input.bip32Path === 'undefined') return signatureImporter.bip32Path; // pubkey path\n      return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}` // xpub/pubkey slice away the m, keep /\n    });\n\n    // const bip32Paths = inputs.map((input) => (signatureImporter.bip32Path));\n    return new HermitSignTransaction({network, inputs, outputs, bip32Paths});\n  }\n\n  render = () => {\n    const {signatureImporter, disableChangeMethod, resetBIP32Path} = this.props;\n    const {bip32PathError, signatureError, walletState} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return (\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n      );\n    }\n    return (\n      <Box mt={2}>\n\n        <Grid container>\n\n          <Grid item md={10}>\n            <TextField\n              name=\"bip32Path\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={bip32PathError}\n            />\n          </Grid>\n\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() &&\n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={resetBIP32Path} disabled={walletState !== PENDING}>Default</Button>}\n          </Grid>\n\n        </Grid>\n\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n\n\n         <Box mt={2}>\n\n           <Grid container justify=\"center\">\n             <Grid item>\n               <HermitDisplayer width={400} string={interaction.messageFor({code: \"hermit.signature_request\"}).encodedData} />\n             </Grid>\n           </Grid>\n\n           <HermitReader\n             startText=\"Scan Signature QR Code\"\n             interaction={interaction}\n             onStart={disableChangeMethod}\n             onSuccess={this.import}\n             onClear={this.clear} />\n\n           <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n\n           <FormHelperText error>{signatureError}</FormHelperText>\n         </Box>\n      </Box>\n    );\n  }\n\n  import = (signature) => {\n    console.log(\"IMPORTED SIGNATURE:\", signature);\n    const { validateAndSetSignature, enableChangeMethod } = this.props;\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n    validateAndSetSignature(\n      signature,\n      (signatureError) => {this.setState({signatureError});}\n    );\n  }\n\n  clear = () => {\n    const { resetBIP32Path, enableChangeMethod } = this.props;\n    resetBIP32Path();\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => (this.state.bip32PathError !== '')\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, (bip32PathError) => {this.setState({bip32PathError});});\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n}\n\nexport default HermitSignatureImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  multisigRequiredSigners,\n  multisigPublicKeys,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\nimport {\n  PENDING,\n  UNSUPPORTED,\n  ACTIVE,\n  ERROR,\n  HardwareWalletExportPublicKey,\n  HardwareWalletSignMultisigTransaction,\n} from 'unchained-wallets';\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid,\n  Table, TableHead, TableBody,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport {Error} from \"@material-ui/icons\";\nimport WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    fee: PropTypes.string.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      verified: false,\n      verifyError: '',\n      signatureError: '',\n      bip32PathError: '',\n      walletState: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  interaction = (inConstructor) => {\n    const verified = (inConstructor ? false : this.state.verified);\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    const walletType = signatureImporter.method;\n    if (verified) {\n      const bip32Paths = inputs.map((input) => {\n        if (typeof input.bip32Path === 'undefined') return signatureImporter.bip32Path; // pubkey path\n        return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}` // xpub/pubkey slice away the m, keep /\n      });\n      return HardwareWalletSignMultisigTransaction({network, walletType, inputs, outputs, bip32Paths});\n    } else {\n      let bip32Path, bip32Paths;\n      bip32Path = signatureImporter.bip32Path; // pubkey path\n      if (typeof inputs[0].bip32Path !== 'undefined') {\n        bip32Paths = inputs.map(input => `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}`); // xpub/pubkey slice away the m, keep /\n      }\n      return HardwareWalletExportPublicKey({network, walletType, bip32Path, bip32Paths});\n    }\n  }\n\n  render = () => {\n    const {signatureImporter} = this.props;\n    const {verified, walletState} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({walletState})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={10}>\n            <TextField\n              fullWidth\n              name=\"bip32Path\"\n              label=\"BIP32 Path\"\n              type=\"text\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING || verified}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n\n          </Grid>\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() &&\n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={verified || walletState !== PENDING}>Default</Button>}\n          </Grid>\n        </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          {this.renderAction()}\n        </Box>\n        {this.renderDeviceConfirmInfo()}\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"bip32\"]}/>\n      </Box>\n    );\n  }\n\n  renderDeviceConfirmInfo = () => {\n    const {fee, inputsTotalSats} = this.props;\n    const {verified, walletState} = this.state;\n\n    if (verified && walletState === ACTIVE) {\n      return (\n        <Box>\n          <p>Your device will ask you to verify the following information:</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                 <TableCell></TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTargets()}\n              <TableRow hover>\n                <TableCell>Fee</TableCell>\n                <TableCell>{fee}</TableCell>\n              </TableRow>\n              <TableRow hover>\n                <TableCell>Total</TableCell>\n                <TableCell>{satoshisToBitcoins(inputsTotalSats).toString()}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Box>\n      );\n    } else return '';\n  }\n\n  renderTargets = () => {\n    const { outputs } = this.props;\n    return outputs.map((output, i) => {\n      return (\n      <TableRow hover key={i}>\n        <TableCell>Address <code>{output.address}</code></TableCell>\n        <TableCell>{output.amount}</TableCell>\n      </TableRow>\n      );\n    });\n  }\n\n  renderAction = () => {\n    const {verified, verifyError, signatureError, walletState} = this.state;\n    if (verified) {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={this.sign} disabled={walletState !== PENDING}>Sign</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{signatureError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" onClick={this.verify} color=\"primary\" disabled={walletState !== PENDING || this.hasBIP32PathError()}>Verify</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{verifyError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    }\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({walletState, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({walletState, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n  //\n  // Verify\n  //\n\n  verify = async () => {\n    const { disableChangeMethod, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({verifyError: '', walletState: ACTIVE});\n\n    try {\n      const publicKey = await this.interaction().run();\n      this.verifyPublicKey(publicKey);\n    } catch(e) {\n      console.error(e);\n      this.setState({verifyError: e.message, walletState: PENDING});\n      enableChangeMethod();\n    }\n  }\n\n  verifyPublicKey = (publicKey) => {\n    const {inputs, signatureImporters, enableChangeMethod} = this.props;\n\n    let verifyError = '';\n    const publicKeys = typeof publicKey === 'string' ? [publicKey] : publicKey;\n\n    for (let inputIndex=0; inputIndex < inputs.length; inputIndex++) {\n      const input = inputs[inputIndex];\n      let publicKeyIndex\n      for(let i = 0; i < publicKeys.length; i++) {\n        publicKeyIndex = multisigPublicKeys(input.multisig).indexOf(publicKeys[i]);\n        if (publicKeyIndex > -1) break;\n      }\n      if (publicKeyIndex < 0) {\n        verifyError = <span><Error />&nbsp; This device does not contain the correct key.  Are you sure the BIP32 path is correct?</span>;\n        break;\n      }\n\n      for (let signatureImporterNum=1; signatureImporterNum < multisigRequiredSigners(input.multisig); signatureImporterNum++) {\n        const otherSignatureImporter = signatureImporters[signatureImporterNum];\n        for(let otherPublicKeyIndex=0; otherPublicKeyIndex < otherSignatureImporter.publicKeys.length; otherPublicKeyIndex++){\n          const otherPublicKey = otherSignatureImporter.publicKeys[otherPublicKeyIndex];\n          if (otherPublicKey === publicKey) {\n            verifyError = <span><Error />A signature from this key was already imported.</span>;\n            break;\n          }\n        }\n        if (verifyError !== '') { break; }\n      }\n      if (verifyError !== '') { break; }\n    }\n\n    this.setState({\n      verified: (verifyError === ''),\n      verifyError,\n      walletState: PENDING,\n    });\n    enableChangeMethod();\n  }\n\n  //\n  // Sign\n  //\n\n  sign = async () => {\n    const { disableChangeMethod, validateAndSetSignature, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({signatureError: '', walletState: ACTIVE});\n\n    try {\n      const signature = await this.interaction().run();\n      validateAndSetSignature(\n        signature,\n        (signatureError) => {\n          const stateUpdate = {signatureError};\n          if (signatureError !== '') stateUpdate.walletState = PENDING;\n          this.setState(stateUpdate);\n        });\n    } catch(e) {\n      console.error(e);\n      this.setState({signatureError: e.message, walletState: PENDING});\n    }\n    enableChangeMethod();\n  }\n\n}\n\nexport default HardwareWalletSignatureImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { Grid, IconButton, TextField } from '@material-ui/core';\nimport { Check, Clear, Edit } from '@material-ui/icons';\n\nclass EditableName extends React.Component {\n\n  static propTypes =  {\n    number: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n  };\n\n  state = {\n    editing: false,\n    newName: '',\n    error: '',\n  };\n\n  componentDidMount = () => {\n    const {name} = this.props;\n    this.setState({newName: name});\n  }\n\n  render = () => {\n    const {name} = this.props;\n    const {editing, newName, error} = this.state;\n    if (editing) {\n      // <Form onSubmit={this.submit} inline>\n      return (\n        <Grid container alignItems=\"center\">\n\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              value={newName}\n              onChange={this.handleChange}\n              error={this.hasError()}\n              helperText={error}\n            />\n          </Grid>\n\n          <Grid item>\n            <IconButton size=\"small\" onClick={this.submit} disabled={this.hasError()}>\n              <Check />\n            </IconButton>\n          </Grid>\n\n          <Grid item>\n            <IconButton color=\"secondary\" size=\"small\" onClick={this.cancel}>\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <span>\n          <IconButton size=\"small\" onClick={this.startEditing}>\n            <Edit />\n          </IconButton>\n          &nbsp;\n          {name}\n        </span>\n      );\n    }\n  }\n\n  hasError = () => (this.state.error !== '')\n\n  startEditing = (event) => {\n    const {name} = this.props;\n    event.preventDefault();\n    this.setState({editing: true, newName: name});\n  }\n\n  handleChange = (event) => {\n    const newName = event.target.value;\n    let error = '';\n    if (newName === null || newName === undefined || newName === '') {\n      error =  \"Name cannot be blank.\";\n    }\n    this.setState({newName, error});\n  }\n\n  submit = () => {\n    const {setName, number} = this.props;\n    const {newName} = this.state;\n    setName(number, newName);\n    this.setState({editing: false});\n  }\n\n  cancel = () => {\n    const {name} = this.props;\n    this.setState({error: '', newName: name, editing: false});\n  }\n\n}\n\nexport default EditableName;\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const RESET_SIGNATURES = 'RESET_SIGNATURES';\n\nexport const SET_SIGNATURE_IMPORTER_NAME        = \"SET_SIGNATURE_IMPORTER_NAME\";\nexport const SET_SIGNATURE_IMPORTER_METHOD      = \"SET_SIGNATURE_IMPORTER_METHOD\";\nexport const SET_SIGNATURE_IMPORTER_BIP32_PATH  = \"SET_SIGNATURE_IMPORTER_BIP32_PATH\";\nexport const SET_SIGNATURE_IMPORTER_PUBLIC_KEYS = \"SET_SIGNATURE_IMPORTER_PUBLIC_KEYS\";\nexport const SET_SIGNATURE_IMPORTER_SIGNATURE   = \"SET_SIGNATURE_IMPORTER_SIGNATURE\";\nexport const SET_SIGNATURE_IMPORTER_FINALIZED   = \"SET_SIGNATURE_IMPORTER_FINALIZED\";\nexport const SET_SIGNATURE_IMPORTER_COMPLETE    = \"SET_SIGNATURE_IMPORTER_COMPLETE\";\n\nexport const {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} = wrappedNumberedActions({\n  setSignatureImporterName: SET_SIGNATURE_IMPORTER_NAME,\n  setSignatureImporterMethod: SET_SIGNATURE_IMPORTER_METHOD,\n  setSignatureImporterBIP32Path: SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  setSignatureImporterPublicKeys: SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  setSignatureImporterSignature: SET_SIGNATURE_IMPORTER_SIGNATURE,\n  setSignatureImporterFinalized: SET_SIGNATURE_IMPORTER_FINALIZED,\n  setSignatureImporterComplete: SET_SIGNATURE_IMPORTER_COMPLETE,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateHex,\n  validateMultisigSignature,\n  multisigBIP32Path,\n  multisigBIP32Root,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Box,\n  FormControl,\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport TextSignatureImporter from \"./TextSignatureImporter\";\nimport HermitSignatureImporter from \"./HermitSignatureImporter\";\nimport HardwareWalletSignatureImporter from \"./HardwareWalletSignatureImporter\";\nimport EditableName from \"../EditableName\";\n\n// Actions\nimport {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} from \"../../actions/signatureImporterActions\";\n\nimport 'react-table/react-table.css';\n\nconst TEXT = \"text\";\n\nclass SignatureImporter extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats:  PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    unsignedTransaction: PropTypes.object.isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    fee: PropTypes.string.isRequired,\n    txid: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setSignature: PropTypes.func.isRequired,\n    setPublicKeys: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    setComplete: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n    showUnsignedTransaction: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const {number} = this.props;\n    if (number === this.getCurrent()) {\n      this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  render() {\n    const { signatureImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()} ref={this.titleRef}/>\n        <CardContent>\n          {signatureImporter.finalized ? this.renderSignature() : this.renderImport()}\n          <Box mt={2}>\n            {this.renderUnsignedTransaction()}\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, signatureImporter, setName} = this.props;\n    return <EditableName number={number} name={signatureImporter.name} setName={setName} />;\n  }\n\n  getCurrent() {\n    const { signatureImporters } = this.props;\n    return Object.keys(signatureImporters).reduce((o, k) => {\n      return o + (signatureImporters[k].finalized ? 1 : 0)\n    }, 1);\n  }\n\n  renderImport = () => {\n    const { signatureImporter, number } = this.props;\n    const currentNumber = this.getCurrent();\n    const notMyTurn =  (number > currentNumber);\n    const { disableChangeMethod } = this.state;\n    const labelId = `signature-${number}-importer-select-label`;\n    if (notMyTurn) {\n      return (\n        <p>\n          Once you have imported the signature above, you will be able to import another signature here.\n        </p>\n      );\n    }\n\n    return (\n      <form>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`signature-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={signatureImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n        </FormControl>\n\n        {this.renderImportByMethod()}\n\n      </form>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, signatureImporter, signatureImporters, inputs, inputsTotalSats,  outputs, fee} = this.props;\n    if (signatureImporter.method === TEXT) {\n      return <TextSignatureImporter\n                               signatureImporter={signatureImporter}\n                               validateAndSetSignature={this.validateAndSetSignature} />;\n    }\n    if (signatureImporter.method === HERMIT) {\n      return <HermitSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               inputs={inputs}\n               outputs={outputs}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    if (signatureImporter.method === TREZOR || signatureImporter.method === LEDGER) {\n      return <HardwareWalletSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               signatureImporters={signatureImporters}\n               inputs={inputs}\n               outputs={outputs}\n               inputsTotalSats={inputsTotalSats}\n               fee={fee}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod } = this.props;\n    setMethod(number, event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // Unsigned Transaction\n  //\n\n  renderUnsignedTransaction = () => {\n    const {showUnsignedTransaction} = this.state;\n    const {unsignedTransaction} = this.props;\n    if (showUnsignedTransaction) {\n      const hex = unsignedTransaction.toHex();\n      return (\n        <div>\n          <p><Copyable text={hex}><code>{hex}</code></Copyable></p>\n          <small>\n            <Button size=\"small\" onClick={this.handleHideUnsignedTransaction}>\n              Hide Unsigned Transaction\n            </Button>\n          </small>\n        </div>\n\n      );\n    } else {\n      return (\n        <small>\n          <Button size=\"small\" onClick={this.handleShowUnsignedTransaction}>\n            Show Unsigned Transaction\n          </Button>\n        </small>\n      );\n    }\n  }\n\n  handleShowUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: true});\n  }\n\n  handleHideUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: false});\n  }\n\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { number, setSignature, setPublicKeys, setFinalized } = this.props;\n    setSignature(number, '');\n    setPublicKeys(number, []);\n    setFinalized(number, false);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  defaultBIP32Path = () => {\n    const {addressType, network, isWallet} = this.props;\n    return isWallet ? multisigBIP32Root(addressType, network) :\n      multisigBIP32Path(addressType, network);\n  }\n\n  resetBIP32Path = () => {\n    const {number, setBIP32Path} = this.props;\n    setBIP32Path(number, this.defaultBIP32Path());\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Signature\n  //\n\n  renderSignature = () => {\n    const { signatureImporter, txid  } = this.props;\n    const signatureJSON =  JSON.stringify(signatureImporter.signature);\n    return (\n      <div>\n        <p>The following signature was imported:</p>\n        <Box>\n          <Copyable text={signatureJSON}>\n            <small><code>{signatureJSON}</code></small>\n          </Copyable>\n        </Box>\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={txid !== \"\"}\n            size=\"small\"\n            onClick={this.reset}\n          >\n            Remove Signature\n          </Button>\n        </Box>\n\n      </div>\n    );\n  }\n\n  validateAndSetSignature = (inputsSignatures, errback) => {\n    const {number, inputs, signatureImporters, unsignedTransaction, setComplete} = this.props;\n\n    if (!Array.isArray(inputsSignatures)) {\n      errback(\"Signature is not an array of strings.\");\n      return;\n    }\n\n    if (inputsSignatures.length < inputs.length) {\n      errback(\"Not enough signatures (must be exactly one for each input).\");\n      return;\n    }\n    if (inputsSignatures.length > inputs.length) {\n      errback(\"Too many signatures (must be exactly one for each input).\");\n      return;\n    }\n\n    const publicKeys = [];\n    const finalizedSignatureImporters = Object.values(signatureImporters).filter((signatureImporter) => (signatureImporter.finalized));\n    for (let inputIndex = 0; inputIndex < inputsSignatures.length; inputIndex += 1) {\n      const input = inputs[inputIndex];\n      const inputNumber = inputIndex + 1;\n      const inputSignature = inputsSignatures[inputIndex];\n      if (validateHex(inputSignature) !== '') {\n        errback(`Signature for input ${inputNumber} is not valid hex.`);\n        return;\n      }\n\n      let publicKey;\n      try{\n        publicKey = validateMultisigSignature(unsignedTransaction, inputIndex, input, inputSignature);\n      } catch(e) {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n      if (publicKey) {\n        for (let finalizedSignatureImporterNum=0; finalizedSignatureImporterNum < finalizedSignatureImporters.length; finalizedSignatureImporterNum++) {\n          const finalizedSignatureImporter = finalizedSignatureImporters[finalizedSignatureImporterNum];\n\n          if (finalizedSignatureImporter.signature[inputIndex] === inputSignature || finalizedSignatureImporter.publicKeys[inputIndex] === publicKey) {\n            errback(`Signature for input ${inputNumber} is a duplicate of a previously provided signature.`);\n            return;\n          }\n        }\n        publicKeys.push(publicKey);\n      } else {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n    }\n\n    setComplete(number, {signature: inputsSignatures, publicKeys: publicKeys, finalized: true});\n  }\n\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...{\n      signatureImporters: state.spend.signatureImporters,\n      signatureImporter: state.spend.signatureImporters[ownProps.number],\n      fee: state.spend.transaction.fee,\n      txid: state.spend.transaction.txid,\n    },\n    ...state.spend.transaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setSignatureImporterName,\n  setMethod: setSignatureImporterMethod,\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setPublicKeys: setSignatureImporterPublicKeys,\n  setSignature: setSignatureImporterSignature,\n  setFinalized: setSignatureImporterFinalized,\n  setComplete: setSignatureImporterComplete,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignatureImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  signedMultisigTransaction,\n  blockExplorerTransactionURL,\n} from \"unchained-bitcoin\";\nimport { broadcastTransaction } from '../../blockchain';\n\nimport {\n  Typography,\n  Box,\n  FormHelperText,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n} from '@material-ui/core';\nimport {OpenInNew} from \"@material-ui/icons\";\nimport Copyable from \"../Copyable\";\nimport {externalLink} from \"../../utils\";\nimport {setTXID} from '../../actions/transactionActions';\n\nclass Transaction extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  state = {\n    error: '',\n    broadcasting: false,\n    txid: '',\n  }\n\n  render() {\n    const { error, broadcasting, txid } = this.state;\n    const signedTransaction = this.buildSignedTransaction();\n    const signedTransactionHex = signedTransaction.toHex();\n    return (\n      <Card>\n        <CardHeader title=\"Broadcast\"/>\n        <CardContent>\n\n          <form>\n            {signedTransaction &&\n             <Box mt={4}>\n               <Typography variant=\"h6\">Signed Transaction</Typography>\n               <Copyable text={signedTransactionHex}>\n                 <small><code>{signedTransactionHex}</code></small>\n               </Copyable>\n             </Box>}\n\n            {\n              txid === ''\n                ?\n                <Box mt={2}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!signedTransaction || broadcasting}\n                    onClick={this.handleBroadcast}\n                  >\n                    Broadcast Transaction\n                  </Button>\n                  <FormHelperText error>{error}</FormHelperText>\n                  <small><FormHelperText>Warning: Broadcasting this transaction cannot be undone.</FormHelperText></small>\n                </Box>\n              :\n              <Box mt={2}>\n                <Typography variant=\"h5\">\n                  <Copyable text={txid}>\n                    <code>{txid}</code>\n                  </Copyable>\n                  &nbsp;\n                  {externalLink(this.transactionURL(), <OpenInNew />)}\n                </Typography>\n                <p>Transaction successfully broadcast.</p>\n              </Box>\n            }\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  buildSignedTransaction = () => {\n    const {unsignedTransaction, inputs, signatureImporters} = this.props;\n    const inputsSignaturesByPublicKey = [];\n    inputs.forEach((input, inputIndex) => {\n      const inputSignaturesByPublicKey = {};\n      Object.values(signatureImporters).forEach((signatureImporter) => {\n        const signerInputPublicKey = signatureImporter.publicKeys[inputIndex];\n        const signerInputSignature = signatureImporter.signature[inputIndex];\n        inputSignaturesByPublicKey[signerInputPublicKey] = signerInputSignature;\n      });\n      inputsSignaturesByPublicKey.push(inputSignaturesByPublicKey);\n    });\n    return signedMultisigTransaction(unsignedTransaction, inputs, inputsSignaturesByPublicKey);\n  }\n\n  handleBroadcast = async () => {\n    const {client, network, setTxid} = this.props;\n    const signedTransaction = this.buildSignedTransaction();\n    let error = '';\n    let txid = '';\n    this.setState({broadcasting: true});\n    try {\n      txid = await broadcastTransaction(signedTransaction.toHex(), network, client);\n    } catch (e) {\n      console.error(e);\n      error = `There was an error broadcasting the transaction.: ${e}`;\n    } finally {\n      this.setState({txid, error, broadcasting: false});\n      setTxid(txid);\n    }\n  }\n\n  transactionURL = () => {\n    const {network} = this.props;\n    const {txid} = this.state;\n    return blockExplorerTransactionURL(txid, network);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n    inputs: state.spend.transaction.inputs,\n    unsignedTransaction: state.spend.transaction.unsignedTransaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setTxid: setTXID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Actions\nimport {\n  setSignatureImporterBIP32Path,\n  setSignatureImporterMethod,\n} from \"../../actions/signatureImporterActions\";\n\nimport SignatureImporter from '../Spend/SignatureImporter';\n\nimport {\n  Box,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n} from \"@material-ui/core\";\n\nclass ExtendedPublicKeySelector extends React.Component {\n  static propTypes =  {\n     number: PropTypes.number.isRequired,\n     totalSigners: PropTypes.number.isRequired,\n     extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  };\n\n  state = {\n    selection: 0,\n  };\n\n  render = () => {\n    const { selection } = this.state;\n    return (<div>\n      {this.renderKeySelectorMenu()}\n      {selection > 0 && this.renderSignatureImporter()}\n    </div>\n\n    )\n  }\n\n  renderSignatureImporter = () => {\n    const { number } = this.props;\n    return (\n      <Box mt={2}>\n        <SignatureImporter number={number} />\n      </Box>\n    )\n  }\n\n  renderKeySelectorMenu = () => {\n    const { number } = this.props;\n    const { selection } = this.state\n    const labelId = `keySelector${number}`\n    return (\n      <form>\n\n      <FormControl fullWidth>\n        <InputLabel id={labelId}>Select Key</InputLabel>\n\n        <Select\n          labelId={labelId}\n          id={`signature-${number}-key-select`}\n          // disabled={disableChangeMethod}\n          value={selection}\n          onChange={this.handleKeyChange}\n        >\n          <MenuItem value=\"\">{'< Select Extended Public Key >'}</MenuItem>\n          {this.renderKeySelectorMenuItems()}\n        </Select>\n      </FormControl>\n\n    </form>\n    )\n\n  }\n\n  renderKeySelectorMenuItems = () => {\n    const { extendedPublicKeyImporters, totalSigners } = this.props;\n    const extendedPublicKeys = [];\n    for (var extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n      const extendedPublicKeyImporter = extendedPublicKeyImporters[extendedPublicKeyImporterNum]\n      extendedPublicKeys.push(<MenuItem value={extendedPublicKeyImporterNum}  key={extendedPublicKeyImporterNum}>\n        {extendedPublicKeyImporter.name}\n      </MenuItem>)\n    }\n    return extendedPublicKeys;\n  }\n\n  handleKeyChange = (event) => {\n    const { extendedPublicKeyImporters , setBIP32Path, setMethod, number} = this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[event.target.value]\n    const importMethod = extendedPublicKeyImporter.method;\n    this.setState({selection: event.target.value});\n    if (importMethod === 'trezor' || importMethod === 'ledger') {\n      setMethod(number, importMethod)\n      setTimeout(() => {\n        setBIP32Path(number, extendedPublicKeyImporter.bip32Path);\n      },0)\n    } else if (importMethod === 'hermit') {\n      setMethod(number, importMethod)\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.quorum,\n    totalSigners: state.spend.transaction.totalSigners,\n  };\n}\n\nconst mapDispatchToProps = {\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setMethod: setSignatureImporterMethod,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtendedPublicKeySelector);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Components\nimport SignatureImporter from '../Spend/SignatureImporter';\nimport Transaction from '../Spend/Transaction';\nimport ExtendedPublicKeySelector from './ExtendedPublicKeySelector'\nimport {Box, Button,} from \"@material-ui/core\";\n\n// Actions\nimport { finalizeOutputs, setRequiredSigners, resetTransaction } from '../../actions/transactionActions';\nimport { spendNodes, resetWalletView,   updateChangeNodeAction } from \"../../actions/walletActions\";\n\nclass WalletSign extends React.Component {\n  static propTypes = {\n    transaction: PropTypes.object.isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    changeNode: PropTypes.shape({}).isRequired,\n    finalizeOutputs: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n    spendNodes: PropTypes.func.isRequired,\n    resetTransaction: PropTypes.func.isRequired,\n  };\n\n  state = {\n    spent: false\n  }\n\n  render = () => {\n    return (\n      <Box>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={this.handleCancel}>Cancel</Button>\n\n      {this.renderKeySelectors()}\n      {/* {this.renderSignatureImporters()} */}\n\n      {\n        this.signaturesFinalized() &&\n        <Box mt={2}>\n          <Transaction/>\n        </Box>\n      }\n\n      {\n        (this.transactionFinalized() || this.state.spent) &&\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={this.handleReturn}>Return</Button>\n      }\n  </Box>\n\n    )\n  }\n\n  renderKeySelectors = () => {\n    const {requiredSigners} = this.props;\n    const keySelectors = [];\n    for (var keySelectorNum = 1; keySelectorNum <= requiredSigners; keySelectorNum++) {\n      keySelectors.push(\n        <Box key={keySelectorNum} mt={2}>\n          <ExtendedPublicKeySelector number={keySelectorNum} />\n        </Box>\n      );\n    }\n    return keySelectors;\n  }\n\n  renderSignatureImporters = () => {\n    const {transaction} = this.props;\n    const signatureImporters = [];\n    for (var signatureImporterNum = 1; signatureImporterNum <= transaction.requiredSigners; signatureImporterNum++) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  }\n\n  signaturesFinalized = () => {\n    const {signatureImporters} = this.props;\n    return Object.values(signatureImporters).length > 0 && Object.values(signatureImporters).every((signatureImporter) => signatureImporter.finalized);\n  }\n\n  transactionFinalized = () => {\n    const { transaction, spendNodes, changeNode, updateChangeNode } = this.props;\n\n    const txid = transaction.txid;\n    if (txid !== \"\" && !this.state.spent) {\n      this.setState({spent: true})\n      const changeAddress = changeNode.multisig.address;\n      for (let i = 0; i < transaction.outputs.length; i++) {\n        if (changeAddress === transaction.outputs[i].address) {\n          updateChangeNode({bip32Path: changeNode.bip32Path, balanceSats: transaction.outputs[i].amountSats})\n          break;\n        }\n      }\n      spendNodes();\n      return true;\n    }\n\n    return false;\n  }\n\n  handleReturn = () => {\n    const { resetTransaction, resetWalletView } = this.props;\n    resetTransaction();\n    resetWalletView();\n  }\n\n  handleCancel = () => {\n    const { finalizeOutputs, requiredSigners, setRequiredSigners } = this.props;\n    setRequiredSigners(requiredSigners); // this will generate signature importers\n    finalizeOutputs(false);\n\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.spend,\n    ...state.quorum,\n    requiredSigners: state.spend.transaction.requiredSigners,\n    totalSigners: state.spend.transaction.totalSigners,\n    changeNode: state.wallet.change.nextNode\n  };\n}\n\nconst mapDispatchToProps = {\n  finalizeOutputs,\n  setRequiredSigners,\n  spendNodes,\n  resetTransaction,\n  resetWalletView,\n  updateChangeNode: updateChangeNodeAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSign);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from 'bignumber.js'\n\n// Actions\nimport {\n  updateAutoSpendAction,\n  updateDepositNodeAction,\n  updateChangeNodeAction,\n  resetNodesSpend,\n} from \"../../actions/walletActions\";\nimport {\n  setInputs,\n  setFeeRate,\n  addOutput,\n  setOutputAddress,\n } from \"../../actions/transactionActions\";\n\n// Components\nimport NodeSet from \"./NodeSet\";\nimport OutputsForm from '../Spend/OutputsForm';\nimport WalletSign from './WalletSign'\nimport {\n    Box, Card, CardHeader,\n    CardContent, Grid, Switch,\n  } from '@material-ui/core';\n\nimport { bitcoinsToSatoshis } from 'unchained-bitcoin/lib/utils';\n\nlet coinSelectTimer;\n\nclass WalletSpend extends React.Component {\n\n  static propTypes = {\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n    coinSelection: PropTypes.func.isRequired,\n  };\n\n  outputsAmount = new BigNumber(0);\n  feeAmount = new BigNumber(0);\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.autoSpend) {\n      if (coinSelectTimer) clearTimeout(coinSelectTimer)\n      coinSelectTimer = setTimeout(this.selectCoins, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (coinSelectTimer) clearTimeout(coinSelectTimer)\n  }\n\n  render() {\n    const { finalizedOutputs } = this.props;\n    return (\n      <Box>\n        <Grid container>\n          <Grid item md={12}>\n            <OutputsForm />\n          </Grid>\n          <Grid item md={12}>\n            <Box mt={2}>\n              { finalizedOutputs ?\n                <WalletSign/> :\n                this.renderSpend()\n              }\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    )\n  }\n\n  renderSpend = () => {\n    const { addNode, updateNode, autoSpend } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Spend\"/>\n        <CardContent>\n          <Grid item md={12}>\n            <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n              <Grid item>Manual</Grid>\n              <Grid item>\n                <Switch\n                  checked={autoSpend}\n                  onChange={this.handleSpendMode}\n              />\n              </Grid>\n              <Grid item>Auto</Grid>\n            </Grid>\n          </Grid>\n          <NodeSet addNode={addNode} updateNode={updateNode} />\n        </CardContent>\n      </Card>)\n  }\n\n    handleSpendMode = (event) => {\n      const { updateAutoSpend } = this.props;\n      if (event.target.checked) {\n        // select inputs for transaction\n        // select change address???,\n        // how to identify???\n        // calculate change???\n\n      }\n\n      updateAutoSpend(event.target.checked)\n    }\n\n    selectCoins = () => {\n      const { outputs, setInputs, fee, depositNodes, changeNodes, feeRate,\n        updateChangeNode, updateDepositNode, resetNodesSpend, setFeeRate, coinSelection } = this.props;\n      const outputsAmount = outputs.reduce((sum, output) => sum.plus(output.amountSats), new BigNumber(0));\n      if (outputsAmount.isNaN()) return;\n      const feeAmount = bitcoinsToSatoshis(new BigNumber(fee));\n      if (outputsAmount.isEqualTo(this.outputsAmount) && feeAmount.isEqualTo(this.feeAmount)) return;\n      const outputTotal = outputsAmount.plus(feeAmount);\n      const spendableInputs = Object.values(depositNodes)\n        .concat(Object.values(changeNodes))\n        .filter(node => node.balanceSats.isGreaterThan(0));\n\n      resetNodesSpend();\n      const selectedInputs = coinSelection(spendableInputs, outputTotal);\n\n      selectedInputs.forEach(selectedUtxo => {\n        (selectedUtxo.change ? updateChangeNode : updateDepositNode)({bip32Path: selectedUtxo.bip32Path, spend: true})\n      })\n\n      this.outputsAmount = outputsAmount;\n      this.feeAmount = feeAmount;\n      setInputs(selectedInputs);\n      setFeeRate(feeRate); // recalulate fee\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.spend.transaction,\n    changeNodes: state.wallet.change.nodes,\n    changeNode: state.wallet.change.nextNode,\n    depositNodes: state.wallet.deposits.nodes,\n    autoSpend: state.wallet.info.autoSpend,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateAutoSpend: updateAutoSpendAction,\n  setInputs,\n  updateChangeNode: updateChangeNodeAction,\n  updateDepositNode: updateDepositNodeAction,\n  setAddress: setOutputAddress,\n  resetNodesSpend,\n  setFeeRate,\n  addOutput,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSpend);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// Components\nimport NodeSet from \"./NodeSet\";\n\nclass WalletView extends React.Component {\n\n  render = () => {\n    const { addNode, updateNode } = this.props;\n\n    return (\n        <NodeSet addNode={addNode} updateNode={updateNode} canLoad={true} />\n    )\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return { ...state.wallet, };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\nimport {\n  setWalletModeAction,\n  WALLET_MODES\n} from \"../../actions/walletActions\";\nimport { setRequiredSigners } from \"../../actions/transactionActions\";\nimport {naiveCoinSelection} from \"../../utils\"\nimport {\n  Tabs, Tab, Box,\n} from '@material-ui/core';\n\nimport WalletDeposit from './WalletDeposit';\nimport WalletSpend from './WalletSpend';\nimport WalletView from './WalletView';\n\nclass WalletControl extends React.Component {\n  scrollRef = React.createRef();\n\n  static propTypes = {\n    deposits: PropTypes.object.isRequired,\n    change: PropTypes.object.isRequired,\n    setMode: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render = () => {\n    return (\n      <div>\n        <h3>Balance: {this.totalBalance()}</h3>\n        <Tabs\n          ref={this.scrollRef}\n          value={this.props.walletMode}\n          onChange={this.handleModeChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          >\n            <Tab label=\"Addresses\" value={WALLET_MODES.VIEW} />\n            <Tab label=\"Receive\" value={WALLET_MODES.DEPOSIT} />\n            <Tab label=\"Send\" value={WALLET_MODES.SPEND} />\n        </Tabs>\n        <Box mt={2}>\n          {this.renderModeComponent()}\n        </Box>\n      </div>\n    )\n  }\n\n  renderModeComponent = () => {\n    const {walletMode, addNode, updateNode} = this.props;\n    if (walletMode === WALLET_MODES.DEPOSIT) return <WalletDeposit/>\n    else if (walletMode === WALLET_MODES.SPEND) return <WalletSpend addNode={addNode} updateNode={updateNode} coinSelection={naiveCoinSelection}/>\n    else if (walletMode === WALLET_MODES.VIEW) return <WalletView  addNode={addNode} updateNode={updateNode}/>\n    return \"\";\n  }\n\n\n  totalBalance() {\n    const { deposits, change } = this.props;\n    return satoshisToBitcoins(deposits.balanceSats.plus(change.balanceSats)).toFixed();\n  }\n\n  handleModeChange = (event, mode)  => {\n    const { setMode,  requiredSigners, setRequiredSigners  } = this.props;\n    if (mode === WALLET_MODES.SPEND) {\n      setRequiredSigners(requiredSigners); // this will generate signature importers\n    }\n    setMode(mode);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.wallet.info,\n    requiredSigners: state.spend.transaction.requiredSigners\n  };\n}\n\nconst mapDispatchToProps = {\n  setMode: setWalletModeAction,\n  setRequiredSigners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletControl);\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME        = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE   = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE\";\n\nexport const {\n  setExtendedPublicKeyImporterName,\n  setExtendedPublicKeyImporterBIP32Path,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} = wrappedNumberedActions({\n  setExtendedPublicKeyImporterName: SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  resetExtendedPublicKeyImporterBIP32Path: RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterBIP32Path: SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterMethod: SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  setExtendedPublicKeyImporterExtendedPublicKey: SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  setExtendedPublicKeyImporterFinalized: SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n});\n\nexport function setExtendedPublicKeyImporterVisible(value) {\n  return {\n    type: SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n    value: value\n  };\n}\n","import React from 'react';\nimport BigNumber from \"bignumber.js\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  deriveChildPublicKey,\n  generateMultisigFromPublicKeys,\n} from 'unchained-bitcoin';\nimport {\n  fetchAddressUTXOs,\n  getAddressStatus,\n} from \"../../blockchain\";\nimport { isWalletAddressNotFoundError } from '../../bitcoind'\n// Components\nimport {\n  Button, Card, CardHeader,\n  CardContent,\n} from '@material-ui/core';\nimport ConfirmWallet from './ConfirmWallet';\nimport WalletControl from './WalletControl';\n\n// Actions\nimport {setFrozen} from \"../../actions/settingsActions\";\nimport {\n  updateDepositNodeAction,\n  updateChangeNodeAction,\n  updateAutoSpendAction,\n} from \"../../actions/walletActions\";\nimport {setExtendedPublicKeyImporterVisible} from \"../../actions/extendedPublicKeyImporterActions\";\nimport { setIsWallet } from \"../../actions/transactionActions\";\nimport {downloadFile} from \"../../utils\"\n\nconst MAX_TRAILING_EMPTY_NODES = 20;\nconst MAX_FETCH_UTXOS_ERRORS = 5;\n\nclass WalletGenerator extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    deposits: PropTypes.object.isRequired,\n    change: PropTypes.object.isRequired,\n    freeze: PropTypes.func.isRequired,\n    updateDepositNode: PropTypes.func.isRequired,\n    updateChangeNode: PropTypes.func.isRequired,\n    setIsWallet: PropTypes.func.isRequired,\n  };\n\n  state = {\n    generating: false,\n  };\n\n  render() {\n    return (\n      <div>\n          {this.body()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const { setIsWallet } = this.props\n    setIsWallet();\n  }\n\n  title = () => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return (\n      <span className=\"justify-content-between d-flex\">\n        Your {requiredSigners}-of-{totalSigners} {addressType} Multisig Wallet\n        <small className=\"text-muted\">{` Extended Public Keys: ${this.extendedPublicKeyCount()}/${totalSigners}`}</small>\n      </span>\n    );\n  }\n\n  extendedPublicKeyCount = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    return Object.values(extendedPublicKeyImporters).filter(extendedPublicKeyImporter => (extendedPublicKeyImporter.finalized)).length;\n  }\n\n  body() {\n    const {totalSigners, configuring} = this.props;\n    const {generating} = this.state;\n    if (this.extendedPublicKeyCount() === totalSigners) {\n      if (generating) {\n        return (\n          <div>\n            {<WalletControl addNode={this.addNode} updateNode={this.updateNode}/>}\n          </div>\n        );\n      } else {\n\n        // add download details button.\n\n        return (\n        <Card>\n          <CardHeader title={this.title()}/>\n          <CardContent>\n            <Button type=\"button\" variant=\"contained\" color=\"secondary\" onClick={this.toggleImporters}>\n              {configuring ? 'Hide Key Selection' : 'Edit Details'}\n            </Button>\n            <ConfirmWallet/>\n            <p>You have imported all {totalSigners} extended public keys.  You will need to save this information.</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.downloadWalletDetails}>Download Wallet Details</Button>\n            <p>Please confirm that the above information is correct and you wish to generate your wallet.</p>\n            <Button id=\"confirm-wallet\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.generate}>Confirm</Button>\n          </CardContent>\n        </Card>\n        );\n      }\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} extended public keys, `}\n        {'your wallet will be generated here.'}\n      </p>\n    );\n  }\n\n  downloadWalletDetails = (event) => {\n    event.preventDefault();\n    const body = this.walletDetailsText();\n    const filename = this.walletDetailsFilename();\n    downloadFile(body, filename)\n  }\n\n  walletDetailsText = () => {\n    const {addressType, network, totalSigners, requiredSigners, walletName} = this.props;\n    return `Wallet: ${walletName}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.extendedPublicKeyImporterBIP32Paths()}\n`\n\n  }\n\n  extendedPublicKeyImporterBIP32Paths = () => {\n    const {totalSigners} = this.props;\n    let extendedPublicKeyImporterBIP32Paths = [];\n    for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n      extendedPublicKeyImporterBIP32Paths.push(this.extendedPublicKeyImporterBIP32Path(extendedPublicKeyImporterNum));\n    }\n    return extendedPublicKeyImporterBIP32Paths.join(\"\\n\");\n  }\n\n  extendedPublicKeyImporterBIP32Path = (number) => {\n    const {extendedPublicKeyImporters} =  this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[number];\n    const bip32Path = (extendedPublicKeyImporter.method === 'text' ? 'Unknown (make sure you have written this down previously!)' : extendedPublicKeyImporter.bip32Path);\n    return `  * ${extendedPublicKeyImporter.name}: ${bip32Path}`;\n  }\n\n  walletDetailsFilename = () => {\n    const {totalSigners, requiredSigners, addressType, walletName} = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${walletName}.txt`;\n\n  }\n\n\n  toggleImporters = () => {\n    const { setImportersVisible, configuring } = this.props;\n    setImportersVisible(!configuring);\n  }\n\n  generate = () => {\n    const {freeze} = this.props;\n    freeze(true);\n    this.setState({generating: true});\n    this.addNode(false, \"m/0/0\", true);\n    this.addNode(true, \"m/1/0\", true);\n  }\n\n  updateNode = (isChange, update) => {\n    const {updateChangeNode, updateDepositNode} = this.props;\n    const updater = (isChange ? updateChangeNode : updateDepositNode);\n    updater(update);\n  }\n\n  addNode = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const multisigUpdates = await this.generateMultisig(isChange, bip32Path, attemptToKeepGenerating);\n    this.updateNode(isChange, {bip32Path, ...multisigUpdates})\n  }\n\n  generateMultisig = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const {extendedPublicKeyImporters, totalSigners, network, addressType, requiredSigners} = this.props;\n    const publicKeys = [];\n    for (let extendedPublicKeyImporterNumber=1; extendedPublicKeyImporterNumber <= totalSigners; extendedPublicKeyImporterNumber++) {\n      const extendedPublicKeyImporter = extendedPublicKeyImporters[extendedPublicKeyImporterNumber];\n      const publicKey = deriveChildPublicKey(extendedPublicKeyImporter.extendedPublicKey, bip32Path, network);\n      publicKeys.push(publicKey);\n    }\n    publicKeys.sort(); // BIP67\n\n    const multisig = generateMultisigFromPublicKeys(network, addressType, requiredSigners, ...publicKeys);\n\n    const utxoUpdates = await this.fetchUTXOs(isChange, multisig, attemptToKeepGenerating);\n    return {multisig, ...utxoUpdates};\n  }\n\n  fetchUTXOs = async (isChange, multisig, attemptToKeepGenerating) => {\n    const {network, client} = this.props;\n    let utxos, addressStatus;\n    let updates = {};\n    try {\n      utxos = await fetchAddressUTXOs(multisig.address, network, client);\n      addressStatus = await getAddressStatus(multisig.address, network, client);\n    } catch(e) {\n      console.error(e, e.response);\n      if (client.type === 'private' &&\n        isWalletAddressNotFoundError(e)) {\n          // address not found in wallet, just mark as unused/used/other?\n          addressStatus = {used: false}\n          updates = {\n            utxos: [],\n            balanceSats: BigNumber(0),\n            addressKnown: false,\n            fetchedUTXOs: true,\n            fetchUTXOsError: ''}\n      } else {\n        updates =  {fetchUTXOsError: e.toString()}\n      }\n    }\n    if (utxos) {\n      const balanceSats = utxos\n            .map((utxo) => utxo.amountSats)\n            .reduce(\n              (accumulator, currentValue) => accumulator.plus(currentValue),\n              new BigNumber(0));\n      updates = {...updates, balanceSats, utxos, fetchedUTXOs: true, fetchUTXOsError: ''}\n    }\n    if (addressStatus) {\n      updates = {...updates, addressUsed: addressStatus.used};\n    }\n\n    if (attemptToKeepGenerating) {\n      setTimeout(() => this.generateNextNodeIfNecessary(isChange));\n    }\n    return updates;\n  }\n\n  generateNextNodeIfNecessary = (isChange) => {\n    const {change, deposits} = this.props;\n    const trailingEmptyNodes = (isChange ? change : deposits).trailingEmptyNodes;\n    const fetchUTXOsErrors = (isChange ? change : deposits).fetchUTXOsErrors;\n    const allBIP32Paths = Object.keys((isChange ? change : deposits).nodes);\n    if ((trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES) || (fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS)) {\n      return;\n    }\n\n    allBIP32Paths.sort((p1, p2) => {\n      const p1Segments = (p1 || '').split('/');\n      const p2Segments = (p2 || '').split('/');\n      const p1Index = parseInt(p1Segments[2]);\n      const p2Index = parseInt(p2Segments[2]);\n      return p1Index - p2Index;\n    });\n    const pathSegments = (allBIP32Paths[allBIP32Paths.length-1] || '').split('/'); // m, 0, 1\n    const maxIndex = parseInt(pathSegments[2]);\n    const nextBIP32Path = `m/${pathSegments[1]}/${maxIndex + 1}`;\n    // Similar to above, we wrap the call to add the next node with\n    // setTimeout with a timeout of zero to allow React time to\n    // render.\n    setTimeout(() => this.addNode(isChange, nextBIP32Path, true));\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{client: state.client},\n    ...state.quorum,\n    ...state.wallet,\n    ...state.wallet.info,\n  };\n}\n\nconst mapDispatchToProps = {\n  freeze: setFrozen,\n  updateDepositNode: updateDepositNodeAction,\n  updateChangeNode: updateChangeNodeAction,\n  updateAutoSpned: updateAutoSpendAction,\n  setImportersVisible: setExtendedPublicKeyImporterVisible,\n  setIsWallet,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletGenerator);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validateExtendedPublicKey,\n  deriveChildExtendedPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {  Button, TextField, FormHelperText, Box, Grid } from '@material-ui/core';\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  }\n  state = {\n    error: '',\n    extendedPublicKey: '',\n    extendedPublicKeyError: '',\n    bip32PathError: '',\n  };\n\n  render = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    const {error, extendedPublicKey, extendedPublicKeyError, bip32PathError} = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n\n          <Box mt={2}>\n            <Grid container>\n              <Grid item md={10}>\n                  <TextField\n                    fullWidth\n                    name=\"bip32Path\"\n                    label=\"BIP32 Path (relative to xpub)\"\n                    type=\"text\"\n                    value={extendedPublicKeyImporter.bip32Path}\n                    onChange={this.handleBIP32PathChange}\n                    error={this.hasBIP32PathError()}\n                    helperText={bip32PathError}\n                  />\n              <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {! this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\"  onClick={this.resetBIP32Path}>Default</Button>}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.import} disabled={extendedPublicKey === '' || this.hasError()}>Import Extended Public Key</Button>\n          </Box>\n        </Box>\n        <FormHelperText className=\"text-danger\">{error}</FormHelperText>\n    </div>\n    );\n  }\n\n  import = () => {\n    const {network, extendedPublicKeyImporter, validateAndSetExtendedPublicKey } = this.props;\n    const {extendedPublicKey} = this.state;\n    const childExtendedPublicKey = deriveChildExtendedPublicKey(extendedPublicKey, extendedPublicKeyImporter.bip32Path, network);\n    validateAndSetExtendedPublicKey(childExtendedPublicKey, (error) => { this.setState({error}); });\n  }\n\n  setBIP32PathToDefault = () => {\n    const {validateAndSetBIP32Path} = this.props;\n    validateAndSetBIP32Path(DEFAULT_BIP32_PATH, () => {}, () => {});\n  }\n\n  hasBIP32PathError = () => {\n    return this.state.bip32PathError !== '';\n  }\n\n  hasExtendedPublicKeyError = () => {\n    return this.state.extendedPublicKeyError !== '';\n  }\n\n  hasError = () => (this.hasBIP32PathError() || this.hasExtendedPublicKeyError());\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {mode: \"unhardened\"});\n  };\n\n  bip32PathIsDefault = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    return extendedPublicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  }\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError('');\n  }\n\n  handleExtendedPublicKeyChange = (event) => {\n    const {network, extendedPublicKeyImporters} = this.props;\n    const extendedPublicKey = event.target.value;\n    let extendedPublicKeyError = validateExtendedPublicKey(extendedPublicKey, network);\n    if (extendedPublicKeyError === '') {\n      if (Object.values(extendedPublicKeyImporters).find((extendedPublicKeyImporter) => (extendedPublicKeyImporter.extendedPublicKey === extendedPublicKey))) {\n        extendedPublicKeyError = \"This extended public key has already been imported.\";\n      }\n    }\n    this.setState({extendedPublicKey, extendedPublicKeyError});\n  };\n\n}\n\nexport default ExtendedPublicKeyExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { TextField, Box } from '@material-ui/core';\n\n\nclass TextExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n  };\n\n  state = {\n    error: '',\n  };\n\n  render = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    const { error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Extended Public Key\"\n            value={extendedPublicKeyImporter.extendedPublicKey}\n            onChange={this.handleChange}\n            error={this.hasError()}\n            helperText={error}\n        />\n      </Box>\n    );\n  }\n\n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const {validateAndSetExtendedPublicKey} = this.props;\n    validateAndSetExtendedPublicKey(event.target.value, this.setError);\n  }\n\n}\n\nexport default TextExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  HermitExportExtendedPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText} from '@material-ui/core';\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  state = {\n    extendedPublicKeyError: '',\n    walletState: PENDING,\n  };\n\n  componentDidMount = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  interaction = () => {\n    const {network, extendedPublicKeyImporter} = this.props;\n    return new HermitExportExtendedPublicKey({network, bip32Path: extendedPublicKeyImporter.bip32Path});\n  }\n\n  render  = () => {\n    const {disableChangeMethod} = this.props;\n    const {extendedPublicKeyError} = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Extended Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear} />\n        <FormHelperText className=\"text-danger\">{extendedPublicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  import = (data) => {\n    const { validateAndSetBIP32Path, validateAndSetExtendedPublicKey, enableChangeMethod } = this.props;\n    enableChangeMethod();\n    const {xpub, bip32_path} = data;\n    validateAndSetBIP32Path(\n      bip32_path,\n      () => {\n        validateAndSetExtendedPublicKey(xpub, this.setError);\n      },\n      this.setError\n    );\n  }\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true);\t\t// clear BIP32 path\n    this.setError('');\n    enableChangeMethod();\n  }\n\n}\n\nexport default HermitExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  UNSUPPORTED, PENDING, ACTIVE, ERROR,\n  HardwareWalletExportExtendedPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid\n} from '@material-ui/core';\nimport WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      extendedPublicKeyError: '',\n      bip32PathError: '',\n      walletState: (this.interaction().isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {network, extendedPublicKeyImporter} = this.props;\n    return HardwareWalletExportExtendedPublicKey({network, walletType: extendedPublicKeyImporter.method, bip32Path: extendedPublicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    const {walletState, extendedPublicKeyError} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return <FormHelperText className=\"text-danger\">{interaction.messageTextFor({walletState})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n       <Grid container>\n        <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={extendedPublicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n        </Grid>\n        <Grid item md={6}>\n          {!this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path}  disabled={walletState !== PENDING}>Default</Button>}\n        </Grid>\n       </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || walletState === ACTIVE}>Import Extended Public Key</Button>\n        </Box>\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"bip32\"]}/>\n        <FormHelperText className=\"text-danger\">{extendedPublicKeyError}</FormHelperText>\n      </Box>\n    );\n  }\n\n  import = async () => {\n    const {validateAndSetExtendedPublicKey, enableChangeMethod, disableChangeMethod} = this.props;\n    disableChangeMethod();\n    this.setState({extendedPublicKeyError: '', walletState: ACTIVE});\n    try {\n      const extendedPublicKey = await this.interaction().run();\n      validateAndSetExtendedPublicKey(extendedPublicKey, (error) => {this.setState({extendedPublicKeyError: error, walletState: PENDING});});\n    } catch(e) {\n      console.error(e);\n      this.setState({extendedPublicKeyError: e.message, walletState: PENDING});\n    }\n\n    enableChangeMethod();\n  }\n\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({walletState, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({walletState, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const {extendedPublicKeyImporter, defaultBIP32Path} = this.props;\n    return extendedPublicKeyImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n}\n\nexport default HardwareWalletExtendedPublicKeyImporter;\n","import React from 'react';\n// Components\nimport {\n    List, ListItem, ListItemIcon, ListItemText, Typography\n  } from '@material-ui/core';\nimport {Warning} from '@material-ui/icons';\n\nconst Conflict = (props) => {\n    return (\n        <small>\n          <List>\n            <ListItem color=\"error.main\">\n            <ListItemIcon>\n            <Typography color=\"error\"><Warning/></Typography>\n            </ListItemIcon>\n            <ListItemText>\n              <Typography color=\"error\">\n                {props.message}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </List>\n      </small>\n    );\n  }\n\n  export default Conflict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateBIP32Path,\n  convertAndValidateExtendedPublicKey,\n  NETWORKS,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  FormControl, Select, MenuItem,\n  InputLabel, Button, FormHelperText,\n  Box,\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport ExtendedPublicKeyExtendedPublicKeyImporter from \"./ExtendedPublicKeyExtendedPublicKeyImporter\";\nimport TextExtendedPublicKeyImporter from \"./TextExtendedPublicKeyImporter\";\nimport HermitExtendedPublicKeyImporter from \"./HermitExtendedPublicKeyImporter\";\nimport HardwareWalletExtendedPublicKeyImporter from \"./HardwareWalletExtendedPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"../CreateAddress/Conflict\";\n\n// Actions\nimport {\n  setExtendedPublicKeyImporterName,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} from '../../actions/extendedPublicKeyImporterActions';\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass ExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setExtendedPublicKey: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n    conversionMessage: \"\",\n  };\n\n  render() {\n    const { extendedPublicKeyImporter, finalizedNetwork, network } = this.props;\n    const hasConflict = extendedPublicKeyImporter.method && extendedPublicKeyImporter.method !== TEXT && extendedPublicKeyImporter.conflict\n    let conflictMessage = \"\";\n    if (hasConflict) {\n      if (finalizedNetwork !== network) {\n        conflictMessage = \"Warning, you can not mix xpub and tpub.  Do not proceed without resolving by either removing conflicting imported keys or returning network type to original state!\"\n      } else {\n        conflictMessage = \"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\"\n      }\n    }\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {hasConflict &&\n            <Conflict message={conflictMessage} />}\n          {extendedPublicKeyImporter.finalized ? this.renderExtendedPublicKey() : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, extendedPublicKeyImporter, setName} = this.props;\n    return <EditableName number={number} name={extendedPublicKeyImporter.name} setName={setName} />;\n  }\n\n  renderImport = () => {\n    const { extendedPublicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `xpub-${number}-importer-select-label`;\n    return (\n      <div>\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={extendedPublicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n\n        </FormControl>\n\n        {this.renderImportByMethod()}\n\n      </div>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {extendedPublicKeyImporters, extendedPublicKeyImporter, network, addressType, defaultBIP32Path} = this.props;\n    if (extendedPublicKeyImporter.method === TREZOR || extendedPublicKeyImporter.method === LEDGER) {\n      return <HardwareWalletExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               addressType={addressType}\n               defaultBIP32Path={defaultBIP32Path}\n               network={network} />;\n    }\n    if (extendedPublicKeyImporter.method === HERMIT) {\n      return <HermitExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               resetBIP32Path={this.resetBIP32Path}\n               reset={this.reset} />;\n    }\n    if (extendedPublicKeyImporter.method === XPUB) {\n      return <ExtendedPublicKeyExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               extendedPublicKeyImporters={extendedPublicKeyImporters}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               network={network}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path} />;\n    }\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return <TextExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setExtendedPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setExtendedPublicKey(number, '');\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  }\n\n  reset = (resetBIP32Path) => {\n    const { number, setExtendedPublicKey, setFinalized } = this.props;\n    setExtendedPublicKey(number, '');\n    setFinalized(number, false);\n    if (resetBIP32Path) {this.resetBIP32Path();}\n  }\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const {moveUp, number} = this.props;\n    event.preventDefault();\n    moveUp(number);\n  }\n\n  moveDown = (event) => {\n    const {moveDown, number} = this.props;\n    event.preventDefault();\n    moveDown(number);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return (\n        <div className=\"mt-4\">\n          <p>Make sure you <strong>record the corresponding BIP32 path.</strong></p>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"mt-4\">\n          <p>The BIP32 path for this extended public key is:</p>\n          <div className=\"text-center\">\n            <Copyable text={extendedPublicKeyImporter.bip32Path}>\n              <code>{extendedPublicKeyImporter.bip32Path}</code>\n            </Copyable>\n          </div>\n          <p className=\"mt-4\">You will need this BIP32 path to sign for this key later.  <strong>Write down this BIP32 path!</strong></p>\n        </div>\n      );\n    }\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n  resetBIP32Path = () => {\n    const {number, resetBIP32Path} = this.props;\n    resetBIP32Path(number);\n  }\n\n  //\n  // Extended Public Key\n  //\n\n\n  renderExtendedPublicKey = () => {\n    const { extendedPublicKeyImporter, network } = this.props;\n    const { conversionMessage } = this.state;\n    let conversionAppend = extendedPublicKeyImporter.method === HERMIT && network === NETWORKS.TESTNET ?\n      \"this should not be an issue as hermit signing is not affected by the conversion.\" :\n      \"this may indicate an invalid network setting, if so correct setting, remove key and try again.\"\n    return (\n      <div>\n        <p>The following extended public key was imported:</p>\n        <div className=\"text-center\">\n          <Copyable text={extendedPublicKeyImporter.extendedPublicKey}>\n            <small><code>{extendedPublicKeyImporter.extendedPublicKey}</code></small>\n          </Copyable>\n        </div>\n        {this.renderBIP32Path()}\n        {conversionMessage !== \"\" &&\n        <Box mb={2}>\n          <FormHelperText>{conversionMessage}, {conversionAppend} </FormHelperText>\n        </Box>\n        }\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={() => {this.reset(extendedPublicKeyImporter.method === HERMIT);}}\n        >\n          Remove Extended Public Key\n        </Button>\n      </div>\n    );\n  }\n\n  validateAndSetExtendedPublicKey = (extendedPublicKey, errback, callback) => {\n    const {number, network, extendedPublicKeyImporters, setExtendedPublicKey} = this.props;\n    const convertedPublicKey = convertAndValidateExtendedPublicKey(extendedPublicKey, network);\n    setExtendedPublicKey(number, convertedPublicKey.extendedPublicKey);\n    if (convertedPublicKey.error !== \"\") {\n      errback(convertedPublicKey.error);\n    } else {\n      if (convertedPublicKey.extendedPublicKey && Object.values(extendedPublicKeyImporters).find((extendedPublicKeyImporter, extendedPublicKeyImporterIndex) => (\n        extendedPublicKeyImporterIndex !== (number - 1) && extendedPublicKeyImporter.extendedPublicKey === convertedPublicKey.extendedPublicKey\n      ))) {\n        errback('This extended public key has already been imported.');\n      } else {\n        errback('');\n        this.setState({conversionMessage: convertedPublicKey.message})\n        this.finalize();\n        callback && callback();\n      }\n    }\n  }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.quorum,\n    ...{ extendedPublicKeyImporter: state.quorum.extendedPublicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setExtendedPublicKeyImporterName,\n  resetBIP32Path: resetExtendedPublicKeyImporterBIP32Path,\n  setBIP32Path: setExtendedPublicKeyImporterBIP32Path,\n  setMethod: setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKey: setExtendedPublicKeyImporterExtendedPublicKey,\n  setFinalized: setExtendedPublicKeyImporterFinalized,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(ExtendedPublicKeyImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from \"react-redux\";\n\n// Components\nimport { Grid, Box, Drawer, IconButton } from '@material-ui/core';\nimport { Settings } from '@material-ui/icons';\n\nimport NetworkPicker from '../NetworkPicker';\nimport QuorumPicker from '../QuorumPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport ClientPicker from '../ClientPicker';\nimport WalletGenerator from './WalletGenerator';\nimport ExtendedPublicKeyImporter from './ExtendedPublicKeyImporter';\nimport EditableName from \"../EditableName\";\n\nimport { updateWalletNameAction } from '../../actions/walletActions';\n\nconst bip32 = require('bip32');\n\nclass CreateWallet extends React.Component {\n\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    bip32,\n  }\n\n  state = {\n    showSettings: false,\n  }\n\n  render = () => {\n    const {configuring, walletName, setName, deposits} = this.props;\n    return (\n      <div>\n        <h1>\n        {!Object.values(deposits.nodes).length && <EditableName number={0} name={walletName} setName={setName} />}\n        {Object.values(deposits.nodes).length > 0 && <span>{walletName}</span>}\n        </h1>\n\n        <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={configuring ? 8 : 12}>\n\n            {this.renderExtendedPublicKeyImporters()}\n\n            <Box mt={2}><WalletGenerator /></Box>\n\n          </Grid>\n          {this.renderSettings()}\n        </Grid>\n      </Box>\n      </div>\n    );\n  }\n\n  renderSettings = () => {\n    const {configuring} = this.props;\n    if (configuring)\n      return (\n        <Grid item md={4}>\n          <Box><QuorumPicker /></Box>\n          <Box mt={2}><AddressTypePicker /></Box>\n          <Box mt={2}><NetworkPicker /></Box>\n          <Box mt={2}><ClientPicker /></Box>\n        </Grid>\n      )\n    else return (\n      <div>\n      <Box position=\"fixed\" right={10}>\n        <IconButton onClick={this.toggleDrawer}>\n          <Settings/>\n        </IconButton>\n      </Box>\n      <Drawer md={4} anchor=\"right\" open={this.state.showSettings} onClose={this.toggleDrawer}>\n        <Box  width={400}>\n\n          <Box mt={2}><ClientPicker /></Box>\n        </Box>\n      </Drawer>\n\n      </div>\n      )\n  }\n\n  toggleDrawer = () => {\n    this.setState({showSettings: !this.state.showSettings})\n  }\n\n  renderExtendedPublicKeyImporters = () => {\n    const {totalSigners, configuring} = this.props;\n    const extendedPublicKeyImporters = [];\n    for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum  <= totalSigners; extendedPublicKeyImporterNum++) {\n      extendedPublicKeyImporters.push(\n        <Box key={extendedPublicKeyImporterNum} mt={extendedPublicKeyImporterNum===1 ? 0 : 2} display={configuring ? 'block' : 'none'}>\n          <ExtendedPublicKeyImporter key={extendedPublicKeyImporterNum} number={extendedPublicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return extendedPublicKeyImporters;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{totalSigners: state.settings.totalSigners},\n    ...state.quorum,\n    ...{walletName: state.wallet.info.walletName},\n    ...state.wallet,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: updateWalletNameAction\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWallet);\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_PUBLIC_KEY_IMPORTER_NAME        = \"SET_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY  = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\nexport const SET_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_UP         = \"MOVE_PUBLIC_KEY_IMPORTER_UP\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_DOWN       = \"MOVE_PUBLIC_KEY_IMPORTER_DOWN\";\nexport const SORT_PUBLIC_KEY_IMPORTERS           = \"SORT_PUBLIC_KEY_IMPORTERS\";\nexport const UPDATE_MULTISIG_ADDRESS             = \"UPDATE_MULTISIG_ADDRESS\";\n\nexport function sortPublicKeyImporters() {\n  return {\n    type: SORT_PUBLIC_KEY_IMPORTERS,\n  };\n}\n\nexport function setMultisigAddress(address) {\n  return {\n    type: UPDATE_MULTISIG_ADDRESS,\n    value: address,\n  };\n}\n\n\nexport const {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} = wrappedNumberedActions({\n  setPublicKeyImporterName: SET_PUBLIC_KEY_IMPORTER_NAME,\n  resetPublicKeyImporterBIP32Path: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterBIP32Path: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterMethod: SET_PUBLIC_KEY_IMPORTER_METHOD,\n  setPublicKeyImporterPublicKey: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  setPublicKeyImporterFinalized: SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  movePublicKeyImporterUp: MOVE_PUBLIC_KEY_IMPORTER_UP,\n  movePublicKeyImporterDown: MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  generateMultisigFromPublicKeys,\n  scriptToHex,\n  multisigRedeemScript,\n  multisigWitnessScript,\n} from 'unchained-bitcoin';\nimport {externalLink} from \"../../utils\";\n\n// Actions\nimport {sortPublicKeyImporters, setMultisigAddress} from \"../../actions/publicKeyImporterActions\";\n\n// Components\nimport {\n  Box, Grid, Button, Card, CardHeader,\n  CardContent, FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\nimport Conflict from './Conflict';\nimport {downloadFile} from \"../../utils\";\n\nclass AddressGenerator extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    fingerprint: PropTypes.string.isRequired,\n    sortPublicKeyImporters: PropTypes.func.isRequired,\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n          <CardContent>\n            {this.body()}\n          </CardContent>\n      </Card>\n    );\n  }\n\n  body() {\n    const {totalSigners} = this.props;\n    if (this.publicKeyCount() === totalSigners) {\n      const multisig = this.generateMultisig();\n\n      const canonicallySorted = this.publicKeysAreCanonicallySorted();\n      return (\n        <div>\n          {this.isInConflict() && <Conflict/>}\n          {!canonicallySorted &&\n           <Grid container justify=\"space-between\">\n             <Grid item md={8}>\n               <FormHelperText error={true}>WARNING: These public keys are not in the standard {externalLink('https://github.com/bitcoin/bips/blob/master/bip-0067.mediawiki', 'BIP67 order')}.</FormHelperText>\n             </Grid>\n             <Grid item md={4}>\n               <Button variant=\"contained\" color=\"primary\" onClick={this.canonicallySortPublicKeys}>Sort Public Keys</Button>\n             </Grid>\n           </Grid>\n          }\n\n          <Box mt={2}>\n            <MultisigDetails multisig={multisig} />\n          </Box>\n\n          <Box mt={2}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.downloadAddressDetails}>Download Address Details</Button>\n          </Box>\n\n\n        </div>\n      );\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} public keys, `}\n        {'your address details will be displayed here.'}\n      </p>\n    );\n  }\n\n\n  title = () => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>{requiredSigners}-of-{totalSigners} Multisig {addressType} Address</Grid>\n        <Grid item><small>{`Public Keys: ${this.publicKeyCount()}/${totalSigners}`}</small></Grid>\n      </Grid>\n    );\n  }\n\n  isInConflict = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).some(importer => importer.conflict)\n  }\n\n  publicKeyCount = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).filter(publicKeyImporter => (publicKeyImporter.finalized)).length;\n  }\n\n  publicKeysAreCanonicallySorted = () => {\n    const {publicKeyImporters} = this.props;\n    const publicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '');\n    const sortedPublicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '').sort(); // sort mutates the array\n    const sorted = publicKeys.filter((publicKey, index) => { return publicKey === sortedPublicKeys[index];}).length === publicKeys.length;\n    return sorted;\n  }\n\n  canonicallySortPublicKeys = () => {\n    const {sortPublicKeyImporters} = this.props;\n    sortPublicKeyImporters();\n  }\n\n  generateMultisig = () => {\n    const { network, publicKeyImporters, totalSigners, requiredSigners,\n      addressType, setMultisigAddress } = this.props;\n    let publicKeys = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeys.push(publicKeyImporters[publicKeyImporterNum].publicKey);\n    }\n    const multisig = generateMultisigFromPublicKeys(network, addressType, requiredSigners, ...publicKeys);\n    setMultisigAddress(multisig.address);\n    return multisig\n  }\n\n  downloadAddressDetails = (event) => {\n    event.preventDefault();\n    const multisig = this.generateMultisig();\n    const body = this.addressDetailsText(multisig);\n    const filename = this.addressDetailsFilename(multisig);\n    downloadFile(body, filename);\n  }\n\n  addressDetailsFilename = (multisig) => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${multisig.address}.txt`;\n  }\n\n  addressDetailsText = (multisig) => {\n    const {addressType, network, totalSigners, requiredSigners} = this.props;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    const redeemScriptLine = (redeemScript ? `Redeem Script: ${scriptToHex(redeemScript)}` : '');\n    const witnessScriptLine = (witnessScript ? `Witness Script: ${scriptToHex(witnessScript)}` : '');\n    const scriptsSpacer = (redeemScript && witnessScript ? '\\n\\n' : '');\n    return `Address: ${multisig.address}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.publicKeyImporterBIP32Paths()}\n\n${redeemScriptLine}${scriptsSpacer}${witnessScriptLine}\n`;\n  }\n\n  publicKeyImporterBIP32Paths = () => {\n    const {totalSigners} = this.props;\n    let publicKeyImporterBIP32Paths = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporterBIP32Paths.push(this.publicKeyImporterBIP32Path(publicKeyImporterNum));\n    }\n    return publicKeyImporterBIP32Paths.join(\"\\n\");\n  }\n\n  publicKeyImporterBIP32Path = (number) => {\n    const {publicKeyImporters} =  this.props;\n    const publicKeyImporter = publicKeyImporters[number];\n    const bip32Path = (publicKeyImporter.method === 'text' ? 'Unknown (make sure you have written this down previously!)' : publicKeyImporter.bip32Path);\n    return `  * ${publicKeyImporter.name}: ${bip32Path}`;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.address,\n  };\n}\n\nconst mapDispatchToProps = {\n  sortPublicKeyImporters,\n  setMultisigAddress,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressGenerator);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validatePublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Button, TextField, Box } from '@material-ui/core';\n\nclass TextPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n  };\n\n  state = {\n    error: '',\n    publicKey: '',\n  };\n\n  render = () => {\n    const { error, publicKey } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Public Key\"\n          value={publicKey}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={publicKey === '' || this.hasError()}\n          >\n            Add Public Key\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  import = () => {\n    const {validateAndSetPublicKey} = this.props;\n    const {publicKey} = this.state;\n    validateAndSetPublicKey(publicKey, this.setError);\n  }\n  \n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const publicKey = event.target.value;\n    const error = validatePublicKey(publicKey);\n    this.setState({publicKey, error});\n  }\n\n}\n\nexport default TextPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validateExtendedPublicKey,\n  deriveChildPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {  Button, TextField, FormHelperText, Box, Grid } from '@material-ui/core';\n\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  }\n\n  state = {\n    extendedPublicKey: '',\n    extendedPublicKeyError: '',\n    bip32PathError: '',\n  };\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {extendedPublicKey, extendedPublicKeyError, bip32PathError} = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n\n          <Box mt={2}>\n            <Grid container>\n              <Grid item md={10}>\n                  <TextField\n                    fullWidth\n                    name=\"bip32Path\"\n                    label=\"BIP32 Path (relative to xpub)\"\n                    type=\"text\"\n                    value={publicKeyImporter.bip32Path}\n                    onChange={this.handleBIP32PathChange}\n                    error={this.hasBIP32PathError()}\n                    helperText={bip32PathError}\n                  />\n              <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {! this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\"  onClick={this.resetBIP32Path}>Default</Button>}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.import} disabled={extendedPublicKey === '' || this.hasError()}>Import Public Key</Button>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n\n  import = () => {\n    const {network, publicKeyImporter, validateAndSetPublicKey} = this.props;\n    const {extendedPublicKey} = this.state;\n    const publicKey = deriveChildPublicKey(extendedPublicKey, publicKeyImporter.bip32Path, network);\n    validateAndSetPublicKey(publicKey, (bip32PathError) => this.setState({bip32PathError}));\n  }\n\n  setBIP32PathToDefault = () => {\n    const {validateAndSetBIP32Path} = this.props;\n    validateAndSetBIP32Path(DEFAULT_BIP32_PATH, () => {}, () => {});\n  }\n\n  hasBIP32PathError = () => {\n    return this.state.bip32PathError !== '';\n  }\n\n  hasExtendedPublicKeyError = () => {\n    return this.state.extendedPublicKeyError !== '';\n  }\n\n  hasError = () => (this.hasBIP32PathError() || this.hasExtendedPublicKeyError());\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {mode: \"unhardened\"});\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter} = this.props;\n    return publicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  }\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError('');\n  }\n\n  handleExtendedPublicKeyChange = (event) => {\n    const {network} = this.props;\n    const extendedPublicKey = event.target.value;\n    const extendedPublicKeyError = validateExtendedPublicKey(extendedPublicKey, network);\n    this.setState({extendedPublicKey, extendedPublicKeyError});\n  };\n\n}\n\nexport default ExtendedPublicKeyPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  HermitExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText} from '@material-ui/core';\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  state = {\n    publicKeyError: '',\n    walletState: PENDING,\n  };\n\n  componentDidMount = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return new HermitExportPublicKey({network, bip32Path: publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {disableChangeMethod} = this.props;\n    const {publicKeyError} = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear} />\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  }\n\n  setError = (value) => {\n    this.setState({publicKeyError: value});\n  }\n\n  import = (data) => {\n    const { validateAndSetBIP32Path, validateAndSetPublicKey, enableChangeMethod } = this.props;\n    enableChangeMethod();\n    const {pubkey, bip32_path} = data;\n    validateAndSetBIP32Path(\n      bip32_path,\n      () => {\n        validateAndSetPublicKey(pubkey, this.setError);\n      },\n      this.setError\n    );\n  }\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true);\t\t// clear BIP32 path\n    this.setError('');\n    enableChangeMethod();\n  }\n\n}\n\nexport default HermitPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  UNSUPPORTED, PENDING, ACTIVE, ERROR,\n  HardwareWalletExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid\n} from '@material-ui/core';\n\nimport WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      publicKeyError: '',\n      bip32PathError: '',\n      walletState: (this.interaction().isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return HardwareWalletExportPublicKey({network, walletType: publicKeyImporter.method, bip32Path:publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {walletState, publicKeyError} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({walletState})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n       <Grid container>\n        <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={publicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n              />\n        </Grid>\n        <Grid item md={6}>\n              {!this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={walletState !== PENDING}>Default</Button>}\n        </Grid>\n       </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || walletState === ACTIVE}>Import Public Key</Button>\n        </Box>\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"bip32\"]}/>\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </Box>\n    );\n  }\n\n  import = async () => {\n    const {validateAndSetPublicKey, enableChangeMethod, disableChangeMethod} = this.props;\n    disableChangeMethod();\n    this.setState({publicKeyError: '', walletState: ACTIVE});\n    try {\n      const publicKey = await this.interaction().run();\n      validateAndSetPublicKey(publicKey, (error) => {this.setState({publicKeyError: error, walletState: PENDING});});\n    } catch(e) {\n      console.error(e);\n      this.setState({publicKeyError: e.message, walletState: PENDING});\n    }\n\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({walletState, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({walletState, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter, defaultBIP32Path} = this.props;\n    return publicKeyImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n}\n\nexport default HardwareWalletPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateBIP32Path,\n  validatePublicKey,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  FormControl, Select, MenuItem,\n  InputLabel, Button, Grid,\n  Box,\n} from '@material-ui/core';\nimport {ArrowUpward, ArrowDownward} from '@material-ui/icons';\n\nimport Copyable from \"../Copyable\";\nimport TextPublicKeyImporter from \"./TextPublicKeyImporter\";\nimport ExtendedPublicKeyPublicKeyImporter from \"./ExtendedPublicKeyPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"./HermitPublicKeyImporter\";\nimport HardwareWalletPublicKeyImporter from \"./HardwareWalletPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"./Conflict\";\n\n// Actions\nimport {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} from '../../actions/publicKeyImporterActions';\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass PublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {publicKeyImporter.method && publicKeyImporter.method !== TEXT && publicKeyImporter.conflict &&\n          <Conflict message=\"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\" />}\n          {publicKeyImporter.finalized ? this.renderPublicKey() : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, totalSigners, publicKeyImporter, setName} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <EditableName number={number} name={publicKeyImporter.name} setName={setName} />\n        </Grid>\n        <Grid item>\n          <Grid container justify=\"flex-end\">\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveUp} disabled={number === 1}><ArrowUpward /></Button>\n            <span>&nbsp;</span>\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveDown} disabled={number === totalSigners}><ArrowDownward /></Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderImport = () => {\n    const { publicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `public-key-${number}-importer-select-label`;\n    return (\n      <div>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={publicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n\n        </FormControl>\n\n        {this.renderImportByMethod()}\n      </div>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {publicKeyImporter, network, addressType, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  addressType={addressType}\n                                  defaultBIP32Path={defaultBIP32Path}\n                                  network={network} />;\n    }\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === XPUB) {\n      return <ExtendedPublicKeyPublicKeyImporter\n                                                network={network}\n                                                publicKeyImporter={publicKeyImporter}\n                                                validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                                validateAndSetBIP32Path={this.validateAndSetBIP32Path} />;\n    }\n    if (publicKeyImporter.method === TEXT) {\n      return <TextPublicKeyImporter\n                                                 publicKeyImporter={publicKeyImporter}\n                                                 validateAndSetPublicKey={this.validateAndSetPublicKey} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setPublicKey(number, '');\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  }\n\n  reset = (resetBIP32Path) => {\n    const { number, setPublicKey, setFinalized } = this.props;\n    setPublicKey(number, '');\n    setFinalized(number, false);\n    if (resetBIP32Path) {this.resetBIP32Path();}\n  }\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const {moveUp, number} = this.props;\n    event.preventDefault();\n    moveUp(number);\n  }\n\n  moveDown = (event) => {\n    const {moveDown, number} = this.props;\n    event.preventDefault();\n    moveDown(number);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { publicKeyImporter } = this.props;\n    if (publicKeyImporter.method !== TEXT) {\n      return (\n        <Box mt={4}>\n          <p>The BIP32 path for this public key is:</p>\n          <Grid container justify=\"center\">\n            <Copyable text={publicKeyImporter.bip32Path}>\n              <code>{publicKeyImporter.bip32Path}</code>\n            </Copyable>\n          </Grid>\n          <Box mt={4}><p>You will need this BIP32 path to sign for this key later.  <strong>Write down this BIP32 path!</strong></p></Box>\n        </Box>\n      );\n    }\n    return null;\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n  resetBIP32Path = () => {\n    const {number, resetBIP32Path} = this.props;\n    resetBIP32Path(number);\n  }\n\n  //\n  // Public Key\n  //\n\n\n  renderPublicKey = () => {\n    const { publicKeyImporter } = this.props;\n    return (\n      <div>\n        <p>The following public key was imported:</p>\n        <Grid container justify=\"center\">\n          <Copyable text={publicKeyImporter.publicKey}>\n            <code>{publicKeyImporter.publicKey}</code>\n          </Copyable>\n        </Grid>\n        {this.renderBIP32Path()}\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={() => {this.reset(publicKeyImporter.method === HERMIT);}}\n          >\n            Remove Public Key\n          </Button>\n        </Box>\n      </div>\n    );\n  }\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {number, publicKeyImporters, setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(number, publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      if (publicKey && Object.values(publicKeyImporters).find((publicKeyImporter, publicKeyImporterIndex) => (\n        publicKeyImporterIndex !== (number - 1) && publicKeyImporter.publicKey === publicKey\n      ))) {\n        errback && errback('This public key has already been imported.');\n      } else {\n        errback && errback('');\n        this.finalize();\n        callback && callback();\n      }\n    }\n  }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.address,\n    ...{ publicKeyImporter: state.address.publicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setPublicKeyImporterName,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  setMethod: setPublicKeyImporterMethod,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  setFinalized: setPublicKeyImporterFinalized,\n  moveUp: movePublicKeyImporterUp,\n  moveDown: movePublicKeyImporterDown,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(PublicKeyImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Box } from '@material-ui/core';\nimport {connect} from \"react-redux\";\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport QuorumPicker from '../QuorumPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport AddressGenerator from './AddressGenerator';\nimport PublicKeyImporter from './PublicKeyImporter';\nimport ClientPicker from '../ClientPicker';\nimport BitcoindAddressImporter from '../BitcoindAddressImporter';\n\nimport '../styles.css';\n\nclass CreateAddress extends React.Component {\n\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n  };\n\n  render = () => {\n    const { address } = this.props\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n\n            {this.renderPublicKeyImporters()}\n\n            <Box mt={2}><AddressGenerator /></Box>\n\n          </Grid>\n          <Grid item md={4}>\n            <Box><QuorumPicker /></Box>\n            <Box mt={2}><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n            {address !== \"\" && this.renderClientPicker()}\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n  renderClientPicker = () => {\n    const { address } = this.props\n    return (\n      <Box mt={2}><ClientPicker\n        publicNotes={<span>If you plan to use this address with your own bitcoind node\n          you can import the address created here by switching for \"Public\" to \"Private\".\n          Otherwise no action is needed here.\n        </span>}\n        privateNotes={<div><BitcoindAddressImporter\n          addresses={[address]}/></div>}\n      /></Box>\n\n    )\n  }\n\n  renderPublicKeyImporters = () => {\n    const {totalSigners} = this.props;\n    const publicKeyImporters = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum  <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporters.push(\n        <Box key={publicKeyImporterNum} mt={publicKeyImporterNum===1 ? 0 : 2}>\n          <PublicKeyImporter number={publicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return publicKeyImporters;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{totalSigners: state.settings.totalSigners},\n    ...state.address,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateAddress);\n","export const CHOOSE_CONFIRM_OWNERSHIP = \"CHOOSE_CONFIRM_OWNERSHIP\";\nexport const SET_OWNERSHIP_MULTISIG               = \"SET_OWNERSHIP_MULTISIG\";\nexport const RESET_PUBLIC_KEY_IMPORTER            = \"RESET_PUBLIC_KEY_IMPORTER\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH   = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD       = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY   = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\n\nexport function chooseConfirmOwnership() {\n  return {\n    type: CHOOSE_CONFIRM_OWNERSHIP,\n  };\n}\n\nexport function setOwnershipMultisig(value) {\n  return {\n    type: SET_OWNERSHIP_MULTISIG,\n    value,\n  };\n}\n\nexport function resetPublicKeyImporter() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER,\n  };\n}\n\nexport function resetPublicKeyImporterBIP32Path() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  };\n}\n\nexport function setPublicKeyImporterBIP32Path(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterMethod(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_METHOD,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterPublicKey(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n    value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n  generateMultisigFromHex,\n  validateHex,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n} from 'unchained-bitcoin';\nimport { fetchAddressUTXOs } from '../../blockchain';\n\n// Components\nimport {\n  Box,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  TextField,\n  FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\nimport BitcoindAddressImporter from \"../BitcoindAddressImporter\";\n\n// Actions\nimport {\n  setFrozen,\n} from '../../actions/settingsActions';\nimport {\n  choosePerformSpend,\n  setRequiredSigners,\n  setTotalSigners,\n  setInputs,\n} from '../../actions/transactionActions';\nimport {\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n} from \"../../actions/ownershipActions\";\n\nclass ScriptEntry extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    setFrozen: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setInputs: PropTypes.func.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setOwnershipMultisig: PropTypes.func.isRequired,\n    chosePerformSpend: PropTypes.bool.isRequired,\n    choseConfirmOwnership: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    scriptHex: '',\n    scriptError: '',\n    fetchUTXOsError: '',\n    fetchedUTXOs: false,\n  };\n\n  disabled = () => {\n\n  }\n\n  render() {\n    const { scriptHex, scriptError, fetchedUTXOs } = this.state;\n\n    return (\n      <Card>\n        <CardHeader title={`Enter ${this.scriptTitle()} Script`} />\n        <CardContent>\n          <form>\n            <TextField\n              fullWidth\n              multiline\n              autoFocus\n              variant=\"outlined\"\n              label={`${this.scriptTitle()} Script`}\n              value={scriptHex}\n              rows={5}\n              onChange={this.handleScriptChange}\n              disabled={fetchedUTXOs && (! this.hasFetchUTXOsError())}\n              helperText={scriptError}\n              error={scriptError!==''}\n            />\n          </form>\n\n          {(scriptHex !== '' && !this.hasScriptError())\n           ?\n           this.renderDetails()\n           :\n           <p>Enter a valid {this.scriptName()} script to generate an address to spend funds from.</p>}\n\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  hasScriptError = () => (this.state.scriptError !== '')\n  hasFetchUTXOsError = () => (this.state.fetchUTXOsError !== '')\n  hasError = () => (this.hasScriptError() || this.hasFetchUTXOsError())\n\n  //\n  // Script\n  //\n\n  scriptName = () => {\n    const {addressType} = this.props;\n    switch (addressType) {\n    case P2SH:\n      return \"redeem\";\n    case P2SH_P2WSH:\n      return \"witness\";\n    case P2WSH:\n      return \"witness\";\n    default:\n      return null;\n    }\n  }\n\n  scriptTitle = () => {\n    const scriptName = this.scriptName();\n    return scriptName.charAt(0).toUpperCase() + scriptName.substring(1);\n  }\n\n  handleScriptChange = (event) => {\n    const scriptHex = event.target.value;\n    let scriptError = '';\n\n    if (scriptHex === '') {\n      scriptError = `${this.scriptTitle()} script cannot be blank.`;\n    }\n\n    if (scriptError === '' && (scriptHex.includes('\\n') || scriptHex.includes('\\t') || scriptHex.includes(' '))) {\n      scriptError = `${this.scriptTitle()} script should not contain spaces, tabs, or newlines.`;\n    }\n\n    if (scriptError === '') {\n      const hexError = validateHex(scriptHex);\n      if (hexError !== '') {\n        scriptError = `${this.scriptTitle()} script is not valid hex.`;\n      }\n    }\n\n    if (scriptHex !== '' && scriptError === '') {\n      try {\n        this.generateMultisig(scriptHex);\n      } catch (parseError) {\n        console.error(parseError);\n        scriptError = `Failed to parse ${this.scriptName()} script.`;\n      }\n    }\n\n    this.setState({\n      scriptHex,\n      scriptError,\n      fetchUTXOsError: '',\n      fetchedUTXOs: false,\n    });\n  };\n\n  generateMultisig = (scriptHex) => {\n    const {network, addressType} = this.props;\n    if (! scriptHex) {\n      scriptHex = this.state.scriptHex;\n    }\n    return generateMultisigFromHex(network, addressType, scriptHex);\n  }\n\n  //\n  // Details\n  //\n\n  renderDetails = () => {\n    const { fetchUTXOsError } = this.state;\n    const { chosePerformSpend, choseConfirmOwnership, client } = this.props;\n    const multisig = this.generateMultisig();\n    const buttonsDisabled = (chosePerformSpend || choseConfirmOwnership);\n    return (\n      <div>\n        <MultisigDetails multisig={multisig} />\n\n        <Box mt={2}>\n\n          <Grid container spacing={3}>\n\n            <Grid item>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.performSpend} disabled={buttonsDisabled}>Spend from this address</Button>\n            </Grid>\n\n            <Grid item>\n              <Button variant=\"contained\" size=\"large\" onClick={this.confirmOwnership} disabled={buttonsDisabled}>Confirm ownership</Button>\n            </Grid>\n\n          </Grid>\n\n          <FormHelperText error>{fetchUTXOsError}</FormHelperText>\n\n        </Box>\n        {\n          client.type === \"private\" &&\n          <Box mt={2}>\n            <BitcoindAddressImporter addresses={[multisig.address]} autoImport={true}/>\n          </Box>\n        }\n      </div>\n    );\n  }\n\n  //\n  // Perform Spend\n  //\n\n  performSpend = async () => {\n    const {setRequiredSigners, setTotalSigners, setInputs, setFrozen, choosePerformSpend} = this.props;\n    const multisig = this.generateMultisig();\n    const fetchUTXOsResult = await this.fetchUTXOs(multisig);\n    if (fetchUTXOsResult) {\n      const {utxos, inputsTotalSats} = fetchUTXOsResult;\n      let fetchUTXOsError = '';\n      if (inputsTotalSats.isLessThanOrEqualTo(0)) {\n        fetchUTXOsError = \"This address has a zero balance.\";\n      }\n      this.setState({\n        fetchedUTXOs: true,\n        fetchUTXOsError,\n      });\n      if (fetchUTXOsError === '') {\n        setInputs(utxos);\n        setRequiredSigners(multisigRequiredSigners(multisig));\n        setTotalSigners(multisigTotalSigners(multisig));\n        setFrozen(true);\n        choosePerformSpend();\n      }\n    } else {\n      this.setState({\n        fetchedUTXOs: false,\n        fetchUTXOsError: \"Failed to fetch UTXOs.\",\n      });\n    }\n  }\n\n  fetchUTXOs = async (multisig) => {\n    const {network, client} = this.props;\n    let utxos = null;\n    try {\n      utxos = await fetchAddressUTXOs(multisig.address, network, client);\n    } catch(e) {\n      console.error(e);\n      return false;\n    }\n    if (utxos !== null) {\n      return {\n        utxos: utxos.map((utxo) => ({...utxo, multisig})),\n        inputsTotalSats: utxos\n          .map((utxo) => utxo.amount)\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0)),\n      };\n    }\n    return false;\n  }\n\n  //\n  // Confirm Ownership\n  //\n\n  confirmOwnership = () => {\n    const {chooseConfirmOwnership, setOwnershipMultisig, setFrozen} = this.props;\n    setOwnershipMultisig(this.generateMultisig());\n    chooseConfirmOwnership();\n    setFrozen(true);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{client: state.client},\n    ...{\n      choseConfirmOwnership: state.spend.ownership.chosen,\n      chosePerformSpend: state.spend.transaction.chosen,\n    }\n  };\n}\n\nconst mapDispatchToProps = {\n  choosePerformSpend,\n  setFrozen,\n  setInputs,\n  setTotalSigners,\n  setRequiredSigners,\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ScriptEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validatePublicKey,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport CheckIcon from '@material-ui/icons/Check';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { styled } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport HardwareWalletPublicKeyImporter from \"../CreateAddress/HardwareWalletPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"../CreateAddress/HermitPublicKeyImporter\";\n\n// Actions\nimport {\n  resetPublicKeyImporter,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n} from \"../../actions/ownershipActions\";\n\nimport 'react-table/react-table.css';\n\nclass ConfirmOwnership extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    publicKeys: PropTypes.array.isRequired,\n    address: PropTypes.string.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = \"public-key-importer-select-label\";\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Confirm Ownership\" />\n        <CardContent>\n          <form>\n            <p>\n              How will you confirm your ownership of this address?\n            </p>\n\n            <FormControl\n              fullWidth={true}>\n              <InputLabel id={labelId}>Select Method</InputLabel>\n\n              <Select\n                labelId\n                id=\"public-key-importer-select\"\n                disabled={disableChangeMethod}\n                value={publicKeyImporter.method}\n                onChange={this.handleMethodChange}\n              >\n                <MenuItem value=\"\">{'< Select method >' }</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n\n            </FormControl>\n\n            {this.renderImportByMethod()}\n\n            {this.renderConfirmation()}\n\n            {publicKeyImporter.method !== '' &&\n             <Button variant=\"contained\" size=\"small\" color=\"secondary\" role=\"button\" onClick={this.reset}>Start Again</Button>}\n\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, publicKeyImporter, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               resetBIP32Path={this.resetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n               network={network}\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={defaultBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { setMethod } = this.props;\n    setMethod(event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { reset } = this.props;\n    reset();\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Public Keey & Confirmation\n  //\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      errback && errback('');\n      callback && callback();\n    }\n  }\n\n  renderConfirmation = () => {\n    const { publicKeys, publicKeyImporter } = this.props;\n    if (publicKeyImporter.publicKey === '') {return null;}\n    if (publicKeys.includes(publicKeyImporter.publicKey)) {\n      const GreenListItemIcon = styled(ListItemIcon)({color: 'green'});\n      return (\n      <List>\n       <ListItem>\n        <GreenListItemIcon>\n          <CheckIcon/>\n        </GreenListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    } else {\n     return (\n      <List>\n       <ListItem>\n        <ListItemIcon>\n          <Typography color=\"error\">\n            <ClearIcon/>\n          </Typography>\n        </ListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is not present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return state.spend.ownership;\n}\n\nconst mapDispatchToProps = {\n  setMethod: setPublicKeyImporterMethod,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  reset: resetPublicKeyImporter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmOwnership);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport ClientPicker from '../ClientPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport ScriptEntry from './ScriptEntry';\nimport UTXOSet from './UTXOSet';\nimport OutputsForm from './OutputsForm';\nimport SignatureImporter from './SignatureImporter';\nimport Transaction from './Transaction';\nimport {Grid, Box} from \"@material-ui/core\";\nimport ConfirmOwnership from './ConfirmOwnership';\nimport '../styles.css';\n\nclass Spend extends React.Component {\n\n  static propTypes = {\n    transaction: PropTypes.object.isRequired,\n    ownership: PropTypes.object.isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  render = () => {\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n            <Box><ScriptEntry /></Box>\n            {this.renderBody()}\n          </Grid>\n          <Grid item md={4}>\n            <Box><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n            <Box mt={2}><ClientPicker /></Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderBody = () => {\n    const {transaction, ownership} = this.props;\n    if (ownership.chosen) {\n      return <Box mt={2}><ConfirmOwnership /></Box>;\n    } else return (\n      <Box>\n      {\n        this.spendable() &&\n        <Box>\n          <Box mt={2}>\n            <UTXOSet\n              inputs={transaction.inputs}\n              inputsTotalSats={transaction.inputsTotalSats}\n            />\n          </Box>\n          <Box mt={2}><OutputsForm/></Box>\n        </Box>\n      }\n\n      {\n        transaction.finalizedOutputs &&\n        <Box>\n          {this.renderSignatureImporters()}\n        </Box>\n\n      }\n\n      {\n        this.signaturesFinalized() &&\n        <Box mt={2}>\n          <Transaction/>\n        </Box>\n      }\n      </Box>\n\n    )\n  }\n\n  renderSignatureImporters = () => {\n    const {transaction} = this.props;\n    const signatureImporters = [];\n    for (var signatureImporterNum = 1; signatureImporterNum <= transaction.requiredSigners; signatureImporterNum++) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  }\n\n  spendable = () => {\n    const {transaction} = this.props;\n    return transaction.inputs.length > 0;\n  }\n\n  signaturesFinalized = () => {\n    const {signatureImporters} = this.props;\n    return Object.values(signatureImporters).length > 0 && Object.values(signatureImporters).every((signatureImporter) => signatureImporter.finalized);\n  }\n\n  confirmOwnership = (value) => {\n    this.setState({addressFinalized: true, confirmOwnership: value});\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.spend;\n}\n\nexport default connect(mapStateToProps)(Spend);\n","import React from 'react';\nimport { AppBar, Toolbar, Button,  makeStyles, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n              Caravan\n          </Typography>\n\n          <Button color=\"inherit\" href=\"#/wallet\" target=\"_blank\">Wallet</Button>\n\n          <Button color=\"inherit\" href=\"#/address\" target=\"_blank\">Create</Button>\n\n          <Button color=\"inherit\" href=\"#/spend\" target=\"_blank\">Interact</Button>\n\n          <Button color=\"inherit\" href=\"#/\" target=\"_blank\">Help</Button>\n\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n\n}\n\nexport default Navbar;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\nimport {version} from \"../../package.json\";\n\n// Components\nimport { Grid, Box } from '@material-ui/core';\n\n// Assets\nconst logo = require('../images/logo.png');\n\nconst Footer = () => (\n  <Box mt={2}>\n    <hr />\n    <Grid container alignItems=\"center\">\n\n      <Grid item sm={2}>\n        {externalLink(\n          'https://www.unchained-capital.com',\n          <img\n            src={logo}\n            className=\"logo\"\n            alt=\"Unchained Capital logo\"\n            height=\"32\" />\n        )}\n      </Grid>\n\n      <Grid item  sm={6}>\n        <p>Copyright 2019 by Unchained Capital and released under an MIT license.</p>\n      </Grid>\n\n      <Grid item sm={1}>\n        <p> v{version} </p>\n      </Grid>\n    </Grid>\n\n  </Box>\n\n\n);\n\nexport default Footer;\n","import {Box, Typography} from '@material-ui/core';\nimport React from 'react';\n\nconst reportingURL = 'https://github.com/unchained-capital/caravan/issues'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      errorInfo: errorInfo,\n      error: error\n    })\n  }\n\n  render() {\n    const {error, errorInfo} = this.state;\n    if (errorInfo) {\n      return (\n        <Box m={4}>\n          <Box m={2}>\n            <Typography variant={'h3'} component={'h1'}>Something went wrong.</Typography>\n          </Box>\n          <Box m={2}>\n            <Typography variant={'body1'}>\n              Let us know what happened on <a href={reportingURL} target={'_blank'}>github</a>.\n            </Typography>\n          </Box>\n          <Box mx={2} my={3}>\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Box>\n        </Box>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport {ErrorBoundary}\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Components\nimport Help from './Help';\nimport Wallet from './Wallet';\nimport CreateAddress from './CreateAddress';\nimport Spend from './Spend';\nimport Navbar from './Navbar';\nimport Footer from \"./Footer\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport {ErrorBoundary} from './ErrorBoundry';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <CssBaseline />\n    <Container maxWidth=\"lg\">\n      <Navbar />\n      <ErrorBoundary>\n        <Router>\n          <Switch>\n            <Route path=\"/wallet\" component={Wallet} />\n            <Route path=\"/address\" component={CreateAddress} />\n            <Route path=\"/spend\" component={Spend} />\n            <Route path=\"/\" component={Help} />\n          </Switch>\n        </Router>\n      </ErrorBoundary>\n      <Footer />\n    </Container>\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function updateState(state, change) {\n    return {\n\t    ...state,\n\t    ...change,\n    };\n}\n","import {\n  MAINNET, \n  P2SH,\n} from \"unchained-bitcoin\";\n\nimport { updateState } from './utils';\nimport {\n  SET_NETWORK,\n  SET_TOTAL_SIGNERS,\n  SET_REQUIRED_SIGNERS,\n  SET_ADDRESS_TYPE,\n  SET_FROZEN,\n} from '../actions/settingsActions';\n\nconst initialState = {\n  network: MAINNET,\n  totalSigners: 3,\n  requiredSigners: 2,\n  addressType: P2SH,\n  frozen: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_TOTAL_SIGNERS:\n      return updateState(state, { totalSigners: action.value });\n    case SET_REQUIRED_SIGNERS:\n      return updateState(state, { requiredSigners: action.value });\n    case SET_ADDRESS_TYPE:\n      return updateState(state, { addressType: action.value });\n    case SET_FROZEN:\n      return updateState(state, { frozen: action.value });\n    default:\n      return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst initialState = {\n  type: 'public',\n  url: '',\n  username: '',\n  password: '',\n  url_error: '',\n  username_error: '',\n  password_error: '',\n  status: 'unknown',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENT_TYPE:\n      return updateState(state, { type: action.value });\n    case SET_CLIENT_URL:\n      return updateState(state, { url: action.value });\n    case SET_CLIENT_USERNAME:\n      return updateState(state, { username: action.value });\n    case SET_CLIENT_PASSWORD:\n      return updateState(state, { password: action.value });\n    case SET_CLIENT_URL_ERROR:\n      return updateState(state, { url_error: action.value });\n    case SET_CLIENT_USERNAME_ERROR:\n      return updateState(state, { username_error: action.value });\n    case SET_CLIENT_PASSWORD_ERROR:\n      return updateState(state, { password_error: action.value });\n\n    case SET_CLIENT_STATUS:\n      return updateState(state, { status: action.value });\n\n    default:\n      return state;\n  }\n};\n","import BigNumber from \"bignumber.js\";\nimport { RESET_NODES_SPEND, SPEND_NODES } from \"../actions/walletActions\";\n\nconst initialNodeState = {\n  present: true,\n  bip32Path: '',\n  publicKeys: [],\n  multisig: {},\n  address: '',\n  balanceSats: new BigNumber(0),\n  utxos: [],\n  change: false,\n  spend: false,\n  fetchedUTXOs: false,\n  fetchUTXOsError: '',\n  addressUsed: false,\n  addressKnown: true,\n};\n\nconst initialState = {\n  nodes: {},\n  trailingEmptyNodes: 0,\n  fetchUTXOsErrors: 0,\n  balanceSats: new BigNumber(0),\n  spendingSats: new BigNumber(0),\n  autoSpend: false,\n  nextNode: null,\n};\n\nfunction updateNode(state, action) {\n  const node = {\n    ...initialNodeState,\n    ...(state.nodes[action.value.bip32Path] || {}),\n    ...action.value,\n  };\n  const newNodes = {};\n  newNodes[node.bip32Path] = node;\n\n  const updatedState = {\n    ...state,\n    ...{\n      nodes: {\n        ...state.nodes,\n        ...newNodes,\n      },\n    },\n  };\n\n  if (typeof action.value.spend !== 'undefined') {\n    updatedState.spendingSats = action.value.spend ?\n      state.spendingSats.plus(node.balanceSats) :\n      state.spendingSats.minus(node.balanceSats);\n  }\n\n  if (action.value.balanceSats) {\n    updatedState.balanceSats = state.balanceSats.plus(node.balanceSats)\n  }\n\n  let trailingEmptyNodes = 0;\n  let fetchUTXOsErrors = 0;\n  const allBIP32Paths = Object.keys(updatedState.nodes);\n  allBIP32Paths.sort((p1, p2) => {\n    const p1Segments = (p1 || '').split('/');\n    const p2Segments = (p2 || '').split('/');\n    const p1Index = parseInt(p1Segments[2]);\n    const p2Index = parseInt(p2Segments[2]);\n    return p1Index - p2Index;\n  });\n  let nodeFoundWithValue = false\n  for (let i=0; i < allBIP32Paths.length; i++) {\n    const bip32Path = allBIP32Paths[allBIP32Paths.length - (i + 1)];\n    const otherNode = updatedState.nodes[bip32Path];\n    if (otherNode.fetchedUTXOs) {\n      if (otherNode.balanceSats.isEqualTo(0) && !otherNode.addressUsed && !nodeFoundWithValue) {\n        trailingEmptyNodes++;\n      } else nodeFoundWithValue = true\n    }\n    if (otherNode.fetchUTXOsError !== '') {\n      fetchUTXOsErrors++;\n    }\n  }\n  updatedState.trailingEmptyNodes = trailingEmptyNodes;\n  updatedState.fetchUTXOsErrors = fetchUTXOsErrors;\n  updatedState.nextNode = getNextNode(updatedState);\n  return updatedState;\n}\n\nfunction getNextNode(state) {\n  const nodes = Object.values(state.nodes)\n  for (let i=0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.balanceSats.isEqualTo(0) && !node.addressUsed) {\n      return node;\n    }\n  }\n  return null;\n}\n\nfunction spendNodes(state) {\n  const updatedState = {...state };\n  Object.values(updatedState.nodes).forEach(node => {\n    if (node.spend) {\n      updatedState.balanceSats = updatedState.balanceSats.minus(node.balanceSats);\n      node.balanceSats = new BigNumber(0);\n      node.spend = false;\n      node.utxos = [];\n    }\n  })\n  return updatedState;\n\n}\n\nfunction resetSpend(state) {\n  const updatedState = {...state };\n  Object.values(updatedState.nodes).forEach(node => {\n    node.spend = false;\n  })\n  return updatedState;\n}\n\nexport default (actionType) => (state = initialState, action) => {\n  switch (action.type) {\n  case RESET_NODES_SPEND:\n    return resetSpend(state);\n  case SPEND_NODES:\n    return spendNodes(state);\n  case actionType:\n    return updateNode(state, action);\n  default:\n    return state;\n  }\n};\n","import {\n  MAINNET,\n  P2SH,\n  multisigBIP32Root,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n} from '../actions/extendedPublicKeyImporterActions';\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const extendedPublicKeys = Object.values(state.extendedPublicKeyImporters).map((extendedPublicKeyImporter) => (extendedPublicKeyImporter.extendedPublicKey)).join('');\n  return `${timestamp}-${extendedPublicKeys}`;\n}\n\nconst initialExtendedPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Root(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  extendedPublicKey: '',\n  finalized: false,\n  confliect: false,\n};\n\nconst initialState = {\n  extendedPublicKeyImporters: {\n    1: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 1\"}  },\n    2: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 2\"}  },\n    3: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 3\"}  },\n  },\n  defaultBIP32Path: multisigBIP32Root(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n  finalizedNetwork: '',\n  finalizedAddressType: '',\n  configuring: true,\n};\n\nfunction updateExtendedPublicKeyImporterState(state, action, field) {\n  const extendedPublicKeyImporterChange = {};\n  extendedPublicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n    ...{nodes: {}},\n  };\n  newState.extendedPublicKeyImporters[action.number] = updateState(state.extendedPublicKeyImporters[action.number], extendedPublicKeyImporterChange);\n  const importCount = Object.values(newState.extendedPublicKeyImporters)\n  .reduce((sum, current) => {\n    return sum + (current.finalized)\n  }, 0)\n  if (importCount === Object.keys(newState.extendedPublicKeyImporters).length) {\n    newState.configuring = false;\n  }\n  setConflict(newState.extendedPublicKeyImporters[action.number] ,state);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const extendedPublicKeyImporters = {};\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n    extendedPublicKeyImporters[extendedPublicKeyImporterNum] = state.extendedPublicKeyImporters[extendedPublicKeyImporterNum] || {\n      ...initialExtendedPublicKeyImporterState,\n      ...{\n        name: `Extended Public key ${extendedPublicKeyImporterNum}`,\n      },\n    };\n  }\n\n  return {\n    ...state,\n    ...{extendedPublicKeyImporters},\n  };\n}\n\nfunction setConflict(extendedPublicKeyImporter ,state) {\n  if (state.finalizedNetwork) {\n    extendedPublicKeyImporter.conflict = state.finalizedNetwork !== state.network || state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= Object.values(state.extendedPublicKeyImporters).length; extendedPublicKeyImporterNum++) {\n    const extendedPublicKeyImporter = newState.extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n    if (! extendedPublicKeyImporter.bip32PathModified) {\n      if (!extendedPublicKeyImporter.finalized) extendedPublicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(extendedPublicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const addressType = state.addressType;\n  const network = action.value;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const addressType = action.value;\n  const network = state.network;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = {...state}\n  if (action.value === true && state.finalizedNetwork === '' && newState.extendedPublicKeyImporters[action.number].method !== TEXT) {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== '') {\n    const finalizedCount = Object.values(state.extendedPublicKeyImporters).reduce((count, importer) => {\n      if (importer.finalized === true && importer.method !== TEXT) return count+1; else return count\n    }, 0);\n    if (finalizedCount === 1) { // last one to be removed\n      newState.finalizedNetwork = '';\n      newState.finalizedAddressType = '';\n      Object.values(newState.extendedPublicKeyImporters).forEach(importer => importer.conflict = false);\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME:\n    return updateExtendedPublicKeyImporterState(state, action, 'name');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD:\n    return updateExtendedPublicKeyImporterState(state, action, 'method');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY:\n    return updateExtendedPublicKeyImporterState(state, action, 'extendedPublicKey');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED:\n    return updateExtendedPublicKeyImporterState(updateFinalizedSettings(state, action), action, 'finalized');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE:\n    return {...state, ...{configuring: action.value}};\n  default:\n    return state;\n  }\n};\n","import {\n  MAINNET,\n  P2SH,\n  multisigBIP32Path,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\nimport {\n  SET_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  MOVE_PUBLIC_KEY_IMPORTER_UP,\n  MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n  SORT_PUBLIC_KEY_IMPORTERS,\n  UPDATE_MULTISIG_ADDRESS\n} from '../actions/publicKeyImporterActions';\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const publicKeys = Object.values(state.publicKeyImporters).map((publicKeyImporter) => (publicKeyImporter.publicKey)).join('');\n  return `${timestamp}-${publicKeys}`;\n}\n\nconst initialPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Path(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  publicKey: '',\n  finalized: false,\n  conflict: false,\n};\n\nconst initialState = {\n  publicKeyImporters: {\n    1: { ...initialPublicKeyImporterState, ...{name: \"Public Key 1\"} },\n    2: { ...initialPublicKeyImporterState, ...{name: \"Public Key 2\"} },\n    3: { ...initialPublicKeyImporterState, ...{name: \"Public Key 3\"} },\n  },\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n  finalizedNetwork: '',\n  finalizedAddressType: '',\n  address: '',\n};\n\nfunction movePublicKeyImporterUp(state, action) {\n  if (action.number === 1) { return state; }\n  const newState = {\n    ...state,\n  };\n  const abovePublicKeyImporter = state.publicKeyImporters[action.number-1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number - 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = abovePublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\n\nfunction movePublicKeyImporterDown(state, action) {\n  if (action.number === Object.values(state.publicKeyImporters).length) { return state; }\n  const newState = {\n    ...state,\n   };\n  const belowPublicKeyImporter = state.publicKeyImporters[action.number+1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number + 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = belowPublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction sortPublicKeyImporters(state, action) {\n  const publicKeyImporters = Object.values(state.publicKeyImporters);\n  const sortedPublicKeys = publicKeyImporters.map((publicKeyImporter) => publicKeyImporter.publicKey).sort();\n  const sortedPublicKeyImporters = sortedPublicKeys.map((publicKey) => {\n    return publicKeyImporters.find((publicKeyImporter) => publicKeyImporter.publicKey === publicKey);\n  });\n  const publicKeyImportersChange = {};\n  for (var publicKeyImporterNum=1; publicKeyImporterNum <= sortedPublicKeyImporters.length; publicKeyImporterNum++) {\n    publicKeyImportersChange[publicKeyImporterNum] = sortedPublicKeyImporters[publicKeyImporterNum - 1];\n  }\n\n  const newState = {\n    ...state,\n    ...{publicKeyImporters: publicKeyImportersChange},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState.publicKeyImporters[action.number] = updateState(state.publicKeyImporters[action.number], publicKeyImporterChange);\n  setConflict(newState.publicKeyImporters[action.number] ,state);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const publicKeyImporters = {};\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n    publicKeyImporters[publicKeyImporterNum] = state.publicKeyImporters[publicKeyImporterNum] || {\n      ...initialPublicKeyImporterState,\n      ...{\n        name: `Public Key ${publicKeyImporterNum}`,\n      },\n    };\n  }\n  const newState = {\n    ...state,\n    ...{publicKeyImporters, stub: action.type},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction setConflict(publicKeyImporter ,state) {\n  if (state.finalizedNetwork) {\n    publicKeyImporter.conflict = state.finalizedNetwork !== state.network || state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= Object.values(state.publicKeyImporters).length; publicKeyImporterNum++) {\n    const publicKeyImporter = newState.publicKeyImporters[publicKeyImporterNum];\n    if (!publicKeyImporter.bip32PathModified) {\n      if (!publicKeyImporter.finalized) publicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(publicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const network = action.value;\n  const addressType = state.addressType;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const network = state.network;\n  const addressType = action.value;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = {...state}\n  if (action.value === true && state.finalizedNetwork === '' && newState.publicKeyImporters[action.number].method !== TEXT) {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== '') {\n    const finalizedCount = Object.values(state.publicKeyImporters).reduce((count, importer) => {\n      if (importer.finalized === true && importer.method !== TEXT) return count+1; else return count\n    }, 0);\n    if (finalizedCount === 1) { // last one to be removed\n      newState.finalizedNetwork = '';\n      newState.finalizedAddressType = '';\n      Object.values(newState.publicKeyImporters).forEach(importer => importer.conflict = false);\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_NAME:\n    return updatePublicKeyImporterState(state, action, 'name');\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, 'method');\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, 'publicKey');\n  case SET_PUBLIC_KEY_IMPORTER_FINALIZED:\n      return updatePublicKeyImporterState(updateFinalizedSettings(state, action), action, 'finalized');\n  case MOVE_PUBLIC_KEY_IMPORTER_UP:\n    return movePublicKeyImporterUp(state, action);\n  case MOVE_PUBLIC_KEY_IMPORTER_DOWN:\n    return movePublicKeyImporterDown(state, action);\n  case SORT_PUBLIC_KEY_IMPORTERS:\n    return sortPublicKeyImporters(state, action);\n  case UPDATE_MULTISIG_ADDRESS:\n    return updateState(state, {address: action.value});\n  default:\n    return state;\n  }\n};\n","import {\n  UPDATE_AUTO_SPEND,\n  UPDATE_WALLET_NAME,\n  RESET_WALLET_VIEW,\n  WALLET_MODES,\n  UPDATE_WALLET_MODE,\n} from \"../actions/walletActions\"\nimport { updateState } from './utils';\n\nconst initialState = {\n  autoSpend: true,\n  walletMode: WALLET_MODES.VIEW,\n  walletName: \"My Multisig Wallet\",\n};\n\nfunction resetWalletViews(state) {\n  return updateState(state, {\n    walletMode: WALLET_MODES.VIEW,\n  });\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_AUTO_SPEND:\n      return updateState(state, { autoSpend: action.value });\n    case UPDATE_WALLET_MODE:\n      return updateState(state, {walletMode: action.value});\n    case UPDATE_WALLET_NAME:\n      return updateState(state, { walletName: action.value });\n    case RESET_WALLET_VIEW:\n      return resetWalletViews(state);\n    default:\n      return state;\n  }\n};\n","import {\n  P2SH,\n  MAINNET,\n  multisigAddressType,\n  multisigBIP32Path,\n  multisigPublicKeys,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport { \n  SET_NETWORK,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_CONFIRM_OWNERSHIP,\n  SET_OWNERSHIP_MULTISIG,\n  RESET_PUBLIC_KEY_IMPORTER,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n} from '../actions/ownershipActions';\n\nconst initialPublicKeyImporterState = {\n  bip32Path: '',\n  method: '',\n  publicKey: '',\n};\n\nconst initialState = {\n  chosen: false,\n  publicKeyImporter: {...initialPublicKeyImporterState},\n  network: MAINNET,\n  addressType: P2SH,\n  publicKeys: [],\n  address: '',\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n};\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  return {\n    ...state,\n    ...{\n      publicKeyImporter: {\n        ...state.publicKeyImporter,\n        ...publicKeyImporterChange,\n      }\n    }\n  };\n}\n\nfunction updateMultisig(state, action) {\n  const multisig = action.value;\n  const addressType = multisigAddressType(multisig);\n  const defaultBIP32Path = multisigBIP32Path(addressType, state.network);\n  return {\n    ...state,\n    ...{\n      network: state.network,\n      addressType,\n      publicKeys: multisigPublicKeys(multisig),\n      address: multisig.address,\n      defaultBIP32Path,\n    },\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_CONFIRM_OWNERSHIP:\n    return updateState(state, {chosen: true});\n  case SET_NETWORK:\n    return updateState(state, {network: action.value});\n  case SET_OWNERSHIP_MULTISIG:\n    return updateMultisig(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    const keyResetState = updatePublicKeyImporterState(state, {value: ''}, \"publicKey\");\n    return updatePublicKeyImporterState(keyResetState, action, \"bip32Path\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, \"method\");\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, \"publicKey\");\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(state, {value: state.defaultBIP32Path}, \"bip32Path\");\n  case RESET_PUBLIC_KEY_IMPORTER:\n    return {\n      ...state,\n      ...{\n        publicKeyImporter: {\n          ...state.publicKeyImporter,\n          ...{bip32Path: state.defaultBIP32Path, publicKey: ''}\n        }\n      }\n    };\n  default:\n    return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  RESET_SIGNATURES,\n  \n  SET_SIGNATURE_IMPORTER_NAME,\n  SET_SIGNATURE_IMPORTER_METHOD,\n  SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  SET_SIGNATURE_IMPORTER_SIGNATURE,\n  SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  SET_SIGNATURE_IMPORTER_FINALIZED,\n  SET_SIGNATURE_IMPORTER_COMPLETE,\n} from '../actions/signatureImporterActions';\nimport {\n  SET_REQUIRED_SIGNERS,\n} from \"../actions/transactionActions\";\n\nconst initialSignatureImporterState = {\n  name: '',\n  method: '',\n  publicKeys: [],\n  signature: [],\n  bip32Path: '',\n  finalized: false,\n};\n\nconst initialState = {};\n\nfunction setRequiredSigners(state, action) {\n  const signatureImporters = {};\n  for (let signatureImporterNum=1; signatureImporterNum <= action.value; signatureImporterNum++) {\n    signatureImporters[signatureImporterNum] = {\n      ...initialSignatureImporterState,\n      ...{name: `Signature ${signatureImporterNum}`},\n    };\n  }\n  return {\n    ...state,\n    ...signatureImporters,\n  };\n}\n\nfunction updateSignatureImporterState(state, action, field) {\n  const signatureImporterChange = {};\n  signatureImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], signatureImporterChange);\n  return newState;\n}\n\nfunction finalizeSignatureImporterState(state, action) {\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], action.value);\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case RESET_SIGNATURES:\n    return {...initialState};\n  case SET_REQUIRED_SIGNERS:\n    return setRequiredSigners(state, action);\n  case SET_SIGNATURE_IMPORTER_NAME:\n    return updateSignatureImporterState(state, action, \"name\");\n  case SET_SIGNATURE_IMPORTER_METHOD:\n    return updateSignatureImporterState(state, action, \"method\");\n  case SET_SIGNATURE_IMPORTER_BIP32_PATH:\n    return updateSignatureImporterState(state, action, \"bip32Path\");\n  case SET_SIGNATURE_IMPORTER_SIGNATURE:\n    return updateSignatureImporterState(state, action, \"signature\");\n  case SET_SIGNATURE_IMPORTER_PUBLIC_KEYS:\n    return updateSignatureImporterState(state, action, \"publicKeys\");\n  case SET_SIGNATURE_IMPORTER_FINALIZED:\n    return updateSignatureImporterState(state, action, \"finalized\");\n  case SET_SIGNATURE_IMPORTER_COMPLETE:\n    return finalizeSignatureImporterState(state, action);\n  \n  default:\n    return state;\n  }\n};\n","import BigNumber from 'bignumber.js';\nimport { updateState } from './utils';\nimport {\n  MAINNET,\n  P2SH,\n  estimateMultisigTransactionFee,\n  estimateMultisigTransactionFeeRate,\n  validateFeeRate,\n  validateFeeBTC,\n  validateOutputAmountBTC,\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateAddress,\n  unsignedMultisigTransaction,\n} from \"unchained-bitcoin\";\n\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_PERFORM_SPEND,\n\n  SET_REQUIRED_SIGNERS,\n  SET_TOTAL_SIGNERS,\n\n  SET_INPUTS,\n\n  ADD_OUTPUT,\n  SET_OUTPUT_ADDRESS,\n  SET_OUTPUT_AMOUNT,\n  DELETE_OUTPUT,\n\n  SET_FEE_RATE,\n  SET_FEE,\n\n  FINALIZE_OUTPUTS,\n  RESET_OUTPUTS,\n\n  SET_TXID,\n  RESET_TRANSACTION,\n\n  SET_IS_WALLET,\n  SET_CHANGE_OUTPUT_INDEX,\n} from '../actions/transactionActions';\n\nfunction sortInputs(a, b) {\n  var x = a.txid.toLowerCase();\n  var y = b.txid.toLowerCase();\n  if (x < y) {return -1;}\n  if (x > y) {return 1;}\n  if (a.n < b.n) {return -1;}\n  if (a.n > b.n) {return 1;}\n  return 0;\n};\n\nconst initialOutputState  = {\n  address: '',\n  amount: '',\n  amountSats: '',\n  addressError: '',\n  amountError: '',\n};\n\nconst initialOutputsState = () => [\n  {...initialOutputState}\n];\n\nconst initialState = {\n  chosen: false,\n  network: MAINNET,\n  inputs: [],\n  inputsTotalSats: new BigNumber(0),\n  outputs: initialOutputsState(),\n  changeOutputIndex: 0,\n  feeRate: '',\n  feeRateError: '',\n  fee: '',\n  feeError: '',\n  finalizedOutputs: false,\n  txid: '',\n  balanceError: '',\n  addressType: P2SH,\n  requiredSigners: 2,\n  totalSigners: 3,\n  unsignedTransaction: {},\n  isWallet: false,\n};\n\nfunction updateInputs(state, action) {\n  const inputsTotalSats = action.value\n        .map((input) => input.amountSats)\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  return updateState(\n    state,\n    {\n      inputs: action.value.sort(sortInputs),\n      inputsTotalSats,\n    });\n}\n\nfunction validateTransaction(state) {\n  if (\n    state.outputs.find((output) => (output.addressError !== '' || output.amountError  !== ''))\n      || state.feeError !== ''\n      || state.feeRateError !== ''\n      || state.inputs.length === 0\n  ) {\n    return {\n      ...state,\n      ...{balanceError: \"\"},\n    };\n  }\n  const feeSats = bitcoinsToSatoshis(new BigNumber(state.fee));\n  const outputTotalSats = state.outputs\n        .map((output) => bitcoinsToSatoshis(new BigNumber(output.amount || 0)))\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  if (! state.inputsTotalSats.isEqualTo(outputTotalSats.plus(feeSats))) {\n    const diff = outputTotalSats.plus(feeSats).minus(state.inputsTotalSats);\n    let balanceError;\n    if (diff.isNaN()) {\n      balanceError = \"Cannot calculate total.\";\n    } else{\n      const action = diff.isLessThan(0) ? 'Increase' : 'Decrease';\n      balanceError =`${action} by ${satoshisToBitcoins(diff.absoluteValue()).toFixed(8)}.`;\n    }\n    return {\n      ...state,\n      ...{balanceError},\n    };\n  } else {\n    return {\n      ...state,\n      ...{balanceError: ''},\n    };\n  }\n}\n\nfunction setFeeForRate(state, feeRateString, nout) {\n  return satoshisToBitcoins(estimateMultisigTransactionFee(\n    {\n      addressType: state.addressType,\n      numInputs: state.inputs.length,\n      numOutputs: nout,\n      m: state.requiredSigners,\n      n: state.totalSigners,\n      feesPerByteInSatoshis: feeRateString\n    })).toString()\n}\n\nfunction updateFeeRate(state, action) {\n  const feeRateString = action.value;\n  const feeRateError = validateFeeRate(feeRateString);\n  const fee = (\n    feeRateError === '' ?\n      setFeeForRate(state, feeRateString, state.outputs.length) :\n      '');\n\n  return updateState(state, {\n    feeRate: feeRateString,\n    feeRateError,\n    fee,\n    feeError: '',\n  });\n}\n\nfunction updateFee(state, action) {\n  const feeString = action.value;\n  const feeError = validateFeeBTC(feeString, state.inputsTotalSats);\n  const feeRate = (\n    feeError === '' ?\n      estimateMultisigTransactionFeeRate(\n        {\n          addressType: state.addressType,\n          numInputs: state.inputs.length,\n          numOutputs: state.outputs.length,\n          m: state.requiredSigners,\n          n: state.totalSigners,\n          feesInSatoshis: bitcoinsToSatoshis(new BigNumber(feeString))\n        }).toString()\n      :\n      '');\n\n  return updateState(state, {\n    fee: feeString,\n    feeError,\n    feeRate,\n    feeRateError: '',\n  });\n}\n\nfunction addOutput(state, action) {\n  const newOutputs = state.outputs.concat({...initialOutputState});\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction updateOutputAddress(state, action) {\n  const newOutputs = [...state.outputs];\n  const address = action.value;\n  let error = validateAddress(address, state.network);\n  if (error === '') {\n    for (var inputIndex=0; inputIndex < state.inputs.length; inputIndex++) {\n      const input = state.inputs[inputIndex];\n      if (address === input.address) {\n        error = \"Output address cannot equal input address.\";\n        break;\n      }\n    }\n  }\n  if (error === '') {\n    for (var outputIndex=0; outputIndex < state.outputs.length; outputIndex++) {\n      if (outputIndex !== (action.number - 1)) {\n        if (state.outputs[outputIndex].address === address) {\n          error = \"Duplicate output address.\";\n          break;\n        }\n      }\n    }\n  }\n  newOutputs[action.number - 1].address = address;\n  newOutputs[action.number - 1].addressError = error;\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction updateOutputAmount(state, action) {\n  const newOutputs = [...state.outputs];\n  const amount = action.value;\n  let error = state.inputs.length ? validateOutputAmountBTC(amount, state.inputsTotalSats) : \"\";\n\n  // this is a bit of a hack\n  // this error prevents from setting output amounts in the wellet\n  // a better proposal would be to update at the library level\n  // make seconde argument to validateOutputAmountBTC optional\n  // if not provided, supress error\n  if (state.isWallet && error === \"Output amount is too large.\") error = \"\"\n\n  newOutputs[action.number - 1].amount = amount;\n  newOutputs[action.number - 1].amountError = error;\n  newOutputs[action.number - 1].amountSats = (error ? '' : bitcoinsToSatoshis(new BigNumber(action.value)));\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction deleteOutput(state, action) {\n  const newOutputs = [];\n  for (var i = 0; i < state.outputs.length; i++) {\n    if (i !== (action.number - 1)) {\n      newOutputs.push(state.outputs[i]);\n    } else if (action.number === state.changeOutputIndex) {\n      state.changeOutputIndex = 0;\n    }\n  }\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction finalizeOutputs(state, action) {\n  const unsignedTransaction = unsignedMultisigTransaction(state.network, state.inputs, state.outputs);\n  return {\n    ...state,\n    ...{finalizedOutputs: action.value, unsignedTransaction},\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_PERFORM_SPEND:\n    return updateState(state, { chosen: true} );\n  case SET_NETWORK:\n    return updateState(state, { network: action.value });\n  case SET_ADDRESS_TYPE:\n    return updateState(state, { addressType: action.value });\n  case SET_REQUIRED_SIGNERS:\n    return updateState(state, { requiredSigners: action.value });\n  case SET_TOTAL_SIGNERS:\n    return updateState(state, { totalSigners: action.value });\n  case SET_INPUTS:\n    return validateTransaction(updateInputs(state, action));\n  case ADD_OUTPUT:\n    return validateTransaction(addOutput(state, action));\n  case SET_CHANGE_OUTPUT_INDEX:\n      return updateState(state, { changeOutputIndex: action.value });\n  case SET_OUTPUT_ADDRESS:\n    return validateTransaction(updateOutputAddress(state, action));\n  case SET_OUTPUT_AMOUNT:\n    return validateTransaction(updateOutputAmount(state, action));\n  case DELETE_OUTPUT:\n    return validateTransaction(deleteOutput(state, action));\n  case SET_FEE_RATE:\n    return validateTransaction(updateFeeRate(state, action));\n  case SET_FEE:\n    return validateTransaction(updateFee(state, action));\n  case FINALIZE_OUTPUTS:\n    return finalizeOutputs(state, action);\n  case RESET_OUTPUTS:\n    return updateState(state, {\n      outputs: initialOutputsState(),\n      fee: '',\n      balanceError: '',\n      changeOutputIndex: 0,\n      // FIXME what about feeRate ?\n    });\n  case SET_TXID:\n    return updateState(state, { txid: action.value });\n  case SET_IS_WALLET:\n    return updateState(state, { isWallet: true} );\n  case RESET_TRANSACTION:\n    return updateState(state, initialState)\n  default:\n    return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport settingsReducer from './settingsReducer';\nimport clientReducer from './clientReducer';\nimport braidReducer from './braidReducer';\nimport quorumReducer from './quorumReducer';\nimport addressReducer from './addressReducer';\nimport walletReducer from './walletReducer';\n\nimport ownershipReducer from './ownershipReducer';\nimport signatureImportersReducer from './signatureImportersReducer';\nimport transactionReducer from './transactionReducer';\n\nimport {\n  UPDATE_DEPOSIT_NODE,\n  UPDATE_CHANGE_NODE,\n} from '../actions/walletActions';\n\nconst spendReducers = combineReducers({\n  ownership: ownershipReducer,\n  transaction: transactionReducer,\n  signatureImporters: signatureImportersReducer,\n});\n\nconst walletReducers = combineReducers({\n  deposits: braidReducer(UPDATE_DEPOSIT_NODE),\n  change: braidReducer(UPDATE_CHANGE_NODE),\n  info: walletReducer\n});\n\nconst rootReducers = combineReducers({\n  settings: settingsReducer,\n  client: clientReducer,\n  address: addressReducer,\n  spend: spendReducers,\n  quorum: quorumReducer,\n  wallet: walletReducers,\n});\n\nexport default rootReducers;\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport ReduxPromise from 'redux-promise';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducers from './reducers';\n\n/* eslint-disable-next-line no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(logger, ReduxPromise, thunk),\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app'),\n);\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feeMagicBtn\":\"styles_feeMagicBtn__3R6H-\",\"utxoTxid\":\"styles_utxoTxid__1oJ63\",\"outputsFormInput\":\"styles_outputsFormInput__2eCJm\",\"unconfirmed\":\"styles_unconfirmed__1u5jD\",\"spent\":\"styles_spent__1ho2q\"};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHexString = toHexString;\nexports.validateHex = validateHex;\nexports.satoshisToBitcoins = satoshisToBitcoins;\nexports.bitcoinsToSatoshis = bitcoinsToSatoshis;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This module provides various utility conversion and validation functions.\n * @module utils\n */\n\n/**\n * Converts a byte array to its hex representation.\n * @param {number[]} byteArray - array of bytes to convert\n * @example\n * const hex = toHexString([255, 0, 15, 16, 31, 32]);\n * console.log(hex) // ff000f101f20\n * @returns {string} hex representation of bytes\n */\n\n\nfunction toHexString(byteArray) {\n  return Array.prototype.map.call(byteArray, function (_byte) {\n    return ('0' + (_byte & 0xFF).toString(16)).slice(-2);\n  }).join('');\n}\n/**\n * Provide validation messages for a hex string.\n * @param {string} inputString - hex string to validate\n * @example\n * const validationError = validateHex('00112233gg');\n * console.log(validationError) // invalid hex - invalid characters\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validateHex(inputString) {\n  if (inputString.length % 2) {\n    return 'invalid hex - odd-length string';\n  }\n\n  var re = /^[0-9A-Fa-f]*$/;\n\n  if (!re.test(inputString)) {\n    return 'invalid hex - invalid characters';\n  }\n\n  return '';\n}\n/**\n * Convert a value in satoshis to corresponding value in BTC.\n * @param {BigNumber} num - value in satoshis\n * @example\n * const sats = BigNumber(123450000);\n * const btc = satoshisToBitcoins(sats);\n * console.log(btc); // 1.2345\n * @returns {BigNumber} value in BTC\n */\n\n\nfunction satoshisToBitcoins(num) {\n  return new _bignumber[\"default\"](num).shiftedBy(-8);\n}\n/**\n * Convert a value in BTC to corresponding value in satoshis.\n * @param {BigNumber} num - value in BTC\n * @example\n * const btc = BigNumber(1.2345);\n * const sats = bitcoinsToSatoshis(btc);\n * console.log(sats); // 123450000\n * @returns {BigNumber} value in satoshis\n */\n\n\nfunction bitcoinsToSatoshis(num) {\n  return new _bignumber[\"default\"](num).shiftedBy(8);\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.networkData = networkData;\nexports.networkLabel = networkLabel;\nexports.NETWORKS = exports.TESTNET = exports.MAINNET = void 0;\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * This module provides network constant enumerations and utility function.\n * @module networks\n */\n\n/**\n * @constant {string} - Constant for selection of the bitcoin mainnet network.\n */\n\n\nvar MAINNET = \"mainnet\";\n/**\n * @constant {string} - Constant for selection of the bitcoin testnet netwrok.\n */\n\nexports.MAINNET = MAINNET;\nvar TESTNET = \"testnet\";\n/**\n * @enum {string} Enumeration of possible values for bitcoin networks ([MAINET]{@link module:networks.MAINNET}|[TESTNET]{@link module:networks.TESTNET}).\n */\n\nexports.TESTNET = TESTNET;\nvar NETWORKS = {\n  MAINNET: MAINNET,\n  TESTNET: TESTNET\n};\n/**\n * Returns network configuration object for the specified network for internal use.\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const key = bip32.fromBase58(extendedPublicKey, networkData(NETWORKS.MAINNET));\n * const child = key.derivePath(\"m/0/0\");\n * @returns {Network} network object for use as a parameter to other functions where needed, do not access directly\n */\n\nexports.NETWORKS = NETWORKS;\n\nfunction networkData(network) {\n  switch (network) {\n    case NETWORKS.MAINNET:\n      return bitcoin.networks.bitcoin;\n\n    case NETWORKS.TESTNET:\n      return bitcoin.networks.testnet;\n\n    default:\n      return bitcoin.networks.testnet;\n  }\n}\n/**\n * Returns human-readable network label for the specified network.\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} network label\n */\n\n\nfunction networkLabel(network) {\n  switch (network) {\n    case NETWORKS.MAINNET:\n      return \"Mainnet\";\n\n    case NETWORKS.TESTNET:\n      return \"Testnet\";\n\n    default:\n      return \"Testnet\";\n  }\n}","\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnsupportedInteraction = exports.WalletInteraction = exports.ERROR = exports.WARNING = exports.INFO = exports.ACTIVE = exports.PENDING = exports.UNSUPPORTED = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nvar _bowser = _interopRequireDefault(require(\"bowser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Unsupported wallet state constant\n * @type {string}\n */\n\n\nvar UNSUPPORTED = \"unsupported\";\n/**\n * Pending wallet state constant\n * @type {string}\n */\n\nexports.UNSUPPORTED = UNSUPPORTED;\nvar PENDING = \"pending\";\n/**\n * Active wallet state constant\n * @type {string}\n */\n\nexports.PENDING = PENDING;\nvar ACTIVE = \"active\";\n/**\n * Info message level constant\n * @type {string}\n */\n\nexports.ACTIVE = ACTIVE;\nvar INFO = \"info\";\n/**\n * Warning message level constant\n * @type {string}\n */\n\nexports.INFO = INFO;\nvar WARNING = \"warning\";\n/**\n * Error message level constant\n * @type {string}\n */\n\nexports.WARNING = WARNING;\nvar ERROR = \"error\";\n/**\n * Base class for wallet interaction.  Derived classes will inherit these methods for\n * messaging and will be extended with additional functionality for key exports and signing.\n * @example\n * class MyWalletInteraction extends WalletInteraction {   *\n *   constructor({network}) {\n *     super({network});\n *     // additional constructor actions\n *   }\n *   // additional class member definitions\n * }\n *\n * const myInteraction = new MyWalletInteraction({network: \"mainnet\"})\n */\n\nexports.ERROR = ERROR;\n\nvar WalletInteraction =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Base class constructor.  Child classes will provide additional options.\n   * @constructor\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   */\n  function WalletInteraction(_ref) {\n    var network = _ref.network;\n\n    _classCallCheck(this, WalletInteraction);\n\n    this.network = network;\n    this.environment = _bowser[\"default\"].getParser(window.navigator.userAgent);\n    this.failureText = '';\n    this.failureCode = '';\n  } //\n  // Uses Bowser syntax in a subclass to make assertions about which\n  // environments are supported.\n  //\n  //   isSupported() {\n  //     return this.environment.satisfies({\n  //       // declare browsers per OS\n  //       windows: {\n  //         \"internet explorer\": \">10\",\n  //       },\n  //       macos: {\n  //         safari: \">10.1\"\n  //       },\n  //\n  //       // per platform (mobile, desktop or tablet)\n  //       mobile: {\n  //         safari: '>=9',\n  //         'android browser': '>3.10'\n  //       },\n  //\n  //       // or in general\n  //       chrome: \"~20.1.1432\",\n  //       firefox: \">31\",\n  //       opera: \">=22\",\n  //\n  //       // also supports equality operator\n  //       chrome: \"=20.1.1432\", // will match particular build only\n  //\n  //       // and loose-equality operator\n  //       chrome: \"~20\",        // will match any 20.* sub-version\n  //       chrome: \"~20.1\"       // will match any 20.1.* sub-version (20.1.19 as well as 20.1.12.42-alpha.1)\n  //     });\n  //   }\n  //\n  // See https://github.com/lancedikson/bowser for more details.\n  //\n\n  /**\n   * Override this method for derived classes\n   * @returns {boolean}\n   */\n\n\n  _createClass(WalletInteraction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return true;\n    }\n    /**\n     * Retrieves default empty messages object for supported states\n     * @returns {object} {pending:[], active:[], unsupported:[]}\n     */\n\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = {};\n      messages[PENDING] = [];\n      messages[ACTIVE] = [];\n      messages[UNSUPPORTED] = [];\n      return messages;\n    }\n    /**\n     * Determine whether or not any messages are currently available\n     * @example\n     * if (interaction.hasMessages()) {\n     *  // Code to report messages here\n     * }\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasMessages\",\n    value: function hasMessages() {\n      return this.messages().length > 0;\n    }\n    /**\n     * Retrieve filtered messages about the wallet\n     * @param {object} options\n     * @param {string} options.walletState - filter by the provided wallet state\n     * @param {string} options.level - filter by the provided message level\n     * @param {string} options.code - filter messages containing this string in the 'code' field\n     * @param {string} options.text - filter messages containing this string in the 'text' field\n     * @example\n     * const messages = interaction.messagesFor({walletState: ACTIVE, level: INFO});\n     * messages.foreEach(msg => console.log(msg.text));\n     * @returns {Array<object>} the filtered list of message objects\n     * @public\n     */\n\n  }, {\n    key: \"messagesFor\",\n    value: function messagesFor(_ref2) {\n      var walletState = _ref2.walletState,\n          level = _ref2.level,\n          code = _ref2.code,\n          text = _ref2.text;\n      var allMessages = this.messages();\n      var messages;\n\n      if (walletState) {\n        messages = allMessages[walletState];\n      } else {\n        messages = allMessages[UNSUPPORTED].concat(allMessages[PENDING]).concat(allMessages[ACTIVE]);\n      }\n\n      var matchingMessages = [];\n\n      for (var i = 0; i < messages.length; i++) {\n        var message = messages[i];\n\n        if (level && message.level !== level) {\n          continue;\n        }\n\n        if (code && !(message.code || '').includes(code)) {\n          continue;\n        }\n\n        if (text && !(message.text || '').includes(text)) {\n          continue;\n        }\n\n        matchingMessages.push(message);\n      }\n\n      return matchingMessages;\n    }\n    /**\n     * Determines if filtered messages are available\n     * @param {object} options\n     * @param {string} options.walletState - filter by the provided wallet state\n     * @param {string} options.level - filter by the provided message level\n     * @param {string} options.code - filter messages containing this string in the 'code' field\n     * @param {string} options.text - filter messages containing this string in the 'text' field\n     * @example\n     * const hasActiveInfo = interaction.hasMessagesFor({walletState: ACTIVE, level: INFO})) {\n     * if (hasActiveInfo) {\n     *  // do something\n     * }\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasMessagesFor\",\n    value: function hasMessagesFor(_ref3) {\n      var walletState = _ref3.walletState,\n          level = _ref3.level,\n          code = _ref3.code,\n          text = _ref3.text;\n      return this.messagesFor({\n        walletState: walletState,\n        level: level,\n        code: code,\n        text: text\n      }).length > 0;\n    }\n    /**\n     * Retrieve the first filtered messages about the wallet\n     * @param {object} options\n     * @param {string} options.walletState - filter by the provided wallet state\n     * @param {string} options.level - filter by the provided message level\n     * @param {string} options.code - filter messages containing this string in the 'code' field\n     * @param {string} options.text - filter messages containing this string in the 'text' field\n     * @example\n     * const message = interaction.messageFor({walletState: ACTIVE, level: INFO});\n     * console.log(message.text);\n     * @returns {object} the first filtered message object\n     */\n\n  }, {\n    key: \"messageFor\",\n    value: function messageFor(_ref4) {\n      var walletState = _ref4.walletState,\n          level = _ref4.level,\n          code = _ref4.code,\n          text = _ref4.text;\n      var messages = this.messagesFor({\n        walletState: walletState,\n        level: level,\n        code: code,\n        text: text\n      });\n\n      if (messages.length > 0) {\n        return messages[0];\n      }\n\n      return null;\n    }\n    /**\n     * Retrieve the first filtered messages about the wallet\n     * @param {object} options\n     * @param {string} options.walletState - filter by the provided wallet state\n     * @param {string} options.level - filter by the provided message level\n     * @param {string} options.code - filter messages containing this string in the 'code' field\n     * @param {string} options.text - filter messages containing this string in the 'text' field\n     * @example\n     * const message = interaction.messageFor({walletState: ACTIVE, level: INFO});\n     * console.log(message);\n     * @returns {string} the text for the first filtered message\n     */\n\n  }, {\n    key: \"messageTextFor\",\n    value: function messageTextFor(_ref5) {\n      var walletState = _ref5.walletState,\n          level = _ref5.level,\n          code = _ref5.code,\n          text = _ref5.text;\n      var message = this.messageFor({\n        walletState: walletState,\n        level: level,\n        code: code,\n        text: text\n      });\n      return message ? message.text : null;\n    } // Should return a promise\n\n    /**\n     * implement this in derived class to interact with your device\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return WalletInteraction;\n}();\n/**\n * Simple interaction messages for unsupported devices\n * @extends {module:interaction.WalletInteraction}\n */\n\n\nexports.WalletInteraction = WalletInteraction;\n\nvar UnsupportedInteraction =\n/*#__PURE__*/\nfunction (_WalletInteraction) {\n  _inherits(UnsupportedInteraction, _WalletInteraction);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {string} options.failureText - text to describe the nature of the failure\n   * @param {string} options.failureCode - failure code\n   */\n\n\n  function UnsupportedInteraction(_ref6) {\n    var _this;\n\n    var network = _ref6.network,\n        failureText = _ref6.failureText,\n        failureCode = _ref6.failureCode;\n\n    _classCallCheck(this, UnsupportedInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnsupportedInteraction).call(this, {\n      network: network\n    }));\n    _this.failureText = failureText;\n    _this.failureCode = failureCode;\n    return _this;\n  }\n\n  _createClass(UnsupportedInteraction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(UnsupportedInteraction.prototype), \"messages\", this).call(this);\n\n      messages[PENDING].push({\n        level: ERROR,\n        code: this.failureCode,\n        text: this.failureText\n      });\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported() {\n      return false;\n    }\n  }]);\n\n  return UnsupportedInteraction;\n}(WalletInteraction);\n\nexports.UnsupportedInteraction = UnsupportedInteraction;","\"use strict\";\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utils = require(\"./utils\");\n\nObject.keys(_utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _utils[key];\n    }\n  });\n});\n\nvar _bip = require(\"./bip32\");\n\nObject.keys(_bip).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _bip[key];\n    }\n  });\n});\n\nvar _keys = require(\"./keys\");\n\nObject.keys(_keys).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _keys[key];\n    }\n  });\n});\n\nvar _networks = require(\"./networks\");\n\nObject.keys(_networks).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _networks[key];\n    }\n  });\n});\n\nvar _script = require(\"./script\");\n\nObject.keys(_script).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _script[key];\n    }\n  });\n});\n\nvar _addresses = require(\"./addresses\");\n\nObject.keys(_addresses).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _addresses[key];\n    }\n  });\n});\n\nvar _transactions = require(\"./transactions\");\n\nObject.keys(_transactions).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _transactions[key];\n    }\n  });\n});\n\nvar _multisig = require(\"./multisig\");\n\nObject.keys(_multisig).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _multisig[key];\n    }\n  });\n});\n\nvar _block_explorer = require(\"./block_explorer\");\n\nObject.keys(_block_explorer).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _block_explorer[key];\n    }\n  });\n});","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scriptToOps = scriptToOps;\nexports.scriptToHex = scriptToHex;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n/**\n * This module provides script conversion functions.\n * @module script\n */\n\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * Extracts the asm representation of a script from a Multisig object.\n * @param {Multisig} script - Multisig object to parse\n * @example\n * const redeemMultisig = generateMultisigFromHex(NETWORKS.MAINNET, MULTISIG_ADDRESS_TYPES.P2WSH, redeemScript)\n * console.log(scriptToOps(redeemMultisig)) // OP_0 81aaef2af523f8b269ea9c8337d4fdcc3f982a668c54f63bf2d0d9dda6a662e6\n * @returns {string} asm representation of script\n */\n\n\nfunction scriptToOps(script) {\n  return bitcoin.script.toASM(script.output);\n}\n/**\n * Extracts the hex representation of a script from a Multisig object.\n * @param {Multisig} script - Multisig object to parse\n * @example\n * const redeemMultisig = multisigRedeemScript(multisig)\n * console.log(scriptToHex(redeemMultisig)) // 522102e326263c35e...\n * @returns {string} hex representation of script\n */\n\n\nfunction scriptToHex(script) {\n  return script.output.toString('hex');\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bip32PathToSequence = bip32PathToSequence;\nexports.bip32SequenceToPath = bip32SequenceToPath;\nexports.validateBIP32Path = validateBIP32Path;\nexports.deriveChildPublicKey = deriveChildPublicKey;\nexports.deriveChildExtendedPublicKey = deriveChildExtendedPublicKey;\nexports.HARDENING_OFFSET = void 0;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.number.is-nan\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _utils = require(\"./utils\");\n\nvar _networks = require(\"./networks\");\n/**\n * This module contains various utility functions for converting and validating BIP32 derivation paths.\n * It also provides functions for deriving child public keys and child extended public keys for a given BIP32 derivation path.\n * @module bip32\n */\n\n\nvar bip32 = require('bip32');\n/**\n * Integer representation of the hardened path offset.\n */\n\n\nvar HARDENING_OFFSET = Math.pow(2, 31);\nexports.HARDENING_OFFSET = HARDENING_OFFSET;\nvar BIP32_PATH_REGEX = /^(m\\/)?(\\d+'?\\/)*\\d+'?$/;\nvar BIP32_HARDENED_PATH_REGEX = /^(m\\/)?(\\d+'\\/)*\\d+'$/;\nvar BIP32_UNHARDENED_PATH_REGEX = /^(m\\/)?(\\d+\\/)*\\d+$/;\nvar MAX_BIP32_HARDENED_NODE_INDEX = Math.pow(2, 31) - 1;\nvar MAX_BIP32_NODE_INDEX = Math.pow(2, 32) - 1;\n/**\n * Convert derivation path to an array of integer values representing the derivation sequence.\n * @param {string} pathString - BIP32 derivation path string\n * @example\n * const sequence = bip32PathToSequence(\"m/45'/1/99\");\n * console.log(sequence); // [2147483693, 1, 99]\n * @returns {number[]} the segments of the derivation path sequence as integer values, hardened path values will be segment + 2^31\n */\n\nfunction bip32PathToSequence(pathString) {\n  var pathSegments = pathString.split(\"/\").splice(1);\n  return pathSegments.map(function (pathSegment) {\n    if (pathSegment.substr(-1) === \"'\") {\n      return parseInt(pathSegment.slice(0, -1), 10) + HARDENING_OFFSET;\n    } else {\n      return parseInt(pathSegment, 10);\n    }\n  });\n}\n/**\n * Convert an array of integers representaing a derivation sequence to derivation path string.\n * @param {number[]} sequence -the segments of the derivation path sequence as integer values\n * @example\n * const sequence = bip32SequenceToPath([2147483693, 1, 99]);\n * console.log(sequence); // m/45'/1/99\n * @returns {string} BIP32 derivation path\n */\n\n\nfunction bip32SequenceToPath(sequence) {\n  return \"m/\" + sequence.map(function (index) {\n    if (index >= HARDENING_OFFSET) {\n      return \"\".concat(index - HARDENING_OFFSET, \"'\");\n    } else {\n      return index.toString();\n    }\n  }).join('/');\n}\n/**\n * Provide validation messages for a BIP32 derivation path string.\n * @param {string} pathString - BIP32 derivation path string\n * @param {Object} [options] - additional options\n * @param {string} [options.mode] - \"hardened\" and \"unhardened\" verify respectively\n * @example\n * const validationError = validateBIP32Path(\"\");\n * console.log(validationError); // BIP32 path cannot be blank.\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validateBIP32Path(pathString, options) {\n  if (pathString === null || pathString === undefined || pathString === '') {\n    return \"BIP32 path cannot be blank.\";\n  }\n\n  if (!pathString.match(BIP32_PATH_REGEX)) {\n    return \"BIP32 path is invalid.\";\n  }\n\n  if (options && options.mode === 'hardened') {\n    if (!pathString.match(BIP32_HARDENED_PATH_REGEX)) {\n      return \"BIP32 path must be fully-hardened.\";\n    }\n  }\n\n  if (options && options.mode === 'unhardened') {\n    if (!pathString.match(BIP32_UNHARDENED_PATH_REGEX)) {\n      return \"BIP32 path cannot include hardened segments.\";\n    }\n  }\n\n  var segmentStrings = pathString.toLowerCase().split('/');\n  return validateBIP32PathSegments(segmentStrings.slice(1));\n}\n\nfunction validateBIP32PathSegments(segmentStrings) {\n  for (var i = 0; i < segmentStrings.length; i++) {\n    var segmentString = segmentStrings[i];\n    var error = validateBIP32PathSegment(segmentString);\n\n    if (error !== '') {\n      return error;\n    }\n  }\n\n  return '';\n}\n\nfunction validateBIP32PathSegment(segmentString) {\n  if (segmentString === null || segmentString === undefined || segmentString === '') {\n    return \"BIP32 path segment cannot be blank.\";\n  }\n\n  var numberString, hardened;\n\n  if (segmentString.substr(segmentString.length - 1) === \"'\") {\n    numberString = segmentString.substr(0, segmentString.length - 1);\n    hardened = true;\n  } else {\n    numberString = segmentString;\n    hardened = false;\n  } // We should never actually wind up throwing this error b/c of an\n  // earlier check against BIP32_PATH_REGEX.\n\n\n  var numberError = \"Invalid BIP32 path segment.\";\n  var number;\n\n  try {\n    number = parseInt(numberString, 10);\n  } catch (parseError) {\n    // shouldn't reach here b/c we already applied a regex check\n    return numberError;\n  }\n\n  if (Number.isNaN(number) || number.toString().length !== numberString.length) {\n    return numberError;\n  }\n\n  if (number < 0) {\n    return numberError;\n  }\n\n  if (number > (hardened ? MAX_BIP32_HARDENED_NODE_INDEX : MAX_BIP32_NODE_INDEX)) {\n    return \"BIP32 index is too high.\";\n  }\n\n  return '';\n}\n/**\n * Derive a hex representation of a child public key for derivation path.\n * @param {string} extendedPublicKey - base58 encoded extended public key\n * @param {string} bip32Path - BIP32 derivation path string\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const xpub = \"xpub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\"\n * const child = deriveChildPublicKey(xpub, \"m/0/0\", NETWORKS.MAINNET);\n * console.log(child); // 021a0b6eb37bd9d2767a364601e41635a11c1dbbbb601efab8406281e210336ace\n * @returns {string} hex string representation of the derived public key\n */\n\n\nfunction deriveChildPublicKey(extendedPublicKey, bip32Path, network) {\n  if (bip32Path.slice(0, 2) === 'm/') {\n    return deriveChildPublicKey(extendedPublicKey, bip32Path.slice(2), network);\n  }\n\n  var node = bip32.fromBase58(extendedPublicKey, (0, _networks.networkData)(network));\n  var child = node.derivePath(bip32Path);\n  return (0, _utils.toHexString)(child.publicKey);\n}\n/**\n * Derive a base58 encoded representation fo a child extended public key.\n * @param {string} extendedPublicKey - base58 encoded extended public key\n * @param {string} bip32Path - BIP32 derivation path string\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const xpub = \"xpub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\"\n * const child = deriveChildExtendedPublicKey(xpub, \"m/0/0\", NETWORKS.MAINNET);\n * console.log(child); // xpub6GYTTMaaN8bSEhicdKq7ji9H7B2SL4un33obThv9aekop4J7L7B3snYMnJUuwXJiUmsbSVSyZydbqLC97JMWnj3R4MHz6JNunMJhjEBKovS\n * @returns {string} base58 encoded representation of the derived child extended public key\n */\n\n\nfunction deriveChildExtendedPublicKey(extendedPublicKey, bip32Path, network) {\n  if (bip32Path.slice(0, 2) === 'm/') {\n    return deriveChildExtendedPublicKey(extendedPublicKey, bip32Path.slice(2), network);\n  }\n\n  var node = bip32.fromBase58(extendedPublicKey, (0, _networks.networkData)(network));\n  var child = node.derivePath(bip32Path);\n  return child.toBase58();\n}","\"use strict\";\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  TREZOR: true,\n  LEDGER: true,\n  HERMIT: true,\n  HardwareWalletExportPublicKey: true,\n  HardwareWalletExportExtendedPublicKey: true,\n  HardwareWalletSignMultisigTransaction: true\n};\nexports.HardwareWalletExportPublicKey = HardwareWalletExportPublicKey;\nexports.HardwareWalletExportExtendedPublicKey = HardwareWalletExportExtendedPublicKey;\nexports.HardwareWalletSignMultisigTransaction = HardwareWalletSignMultisigTransaction;\nexports.HERMIT = exports.LEDGER = exports.TREZOR = void 0;\n\nvar _interaction = require(\"./interaction\");\n\nObject.keys(_interaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _interaction[key];\n    }\n  });\n});\n\nvar _trezor = require(\"./trezor\");\n\nObject.keys(_trezor).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _trezor[key];\n    }\n  });\n});\n\nvar _ledger = require(\"./ledger\");\n\nObject.keys(_ledger).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ledger[key];\n    }\n  });\n});\n\nvar _hermit = require(\"./hermit\");\n\nObject.keys(_hermit).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _hermit[key];\n    }\n  });\n});\nvar TREZOR = 'trezor';\nexports.TREZOR = TREZOR;\nvar LEDGER = 'ledger';\nexports.LEDGER = LEDGER;\nvar HERMIT = 'hermit';\nexports.HERMIT = HERMIT;\n\nfunction HardwareWalletExportPublicKey(_ref) {\n  var walletType = _ref.walletType,\n      network = _ref.network,\n      bip32Path = _ref.bip32Path,\n      bip32Paths = _ref.bip32Paths;\n\n  switch (walletType) {\n    case TREZOR:\n      return new _trezor.TrezorExportPublicKey({\n        network: network,\n        bip32Path: bip32Path,\n        bip32Paths: bip32Paths\n      });\n\n    case LEDGER:\n      return new _ledger.LedgerExportPublicKey({\n        network: network,\n        bip32Path: bip32Path,\n        bip32Paths: bip32Paths\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        network: network,\n        failureCode: \"unsupported\",\n        failureText: \"This wallet is not supported when exporting public keys.\"\n      });\n  }\n}\n\nfunction HardwareWalletExportExtendedPublicKey(_ref2) {\n  var walletType = _ref2.walletType,\n      network = _ref2.network,\n      bip32Path = _ref2.bip32Path;\n\n  switch (walletType) {\n    case TREZOR:\n      return new _trezor.TrezorExportExtendedPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    case LEDGER:\n      return new _ledger.LedgerExportExtendedPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        network: network,\n        failureCode: \"unsupported\",\n        failureText: \"This wallet is not supported when exporting extended public keys.\"\n      });\n  }\n}\n\nfunction HardwareWalletSignMultisigTransaction(_ref3) {\n  var walletType = _ref3.walletType,\n      network = _ref3.network,\n      inputs = _ref3.inputs,\n      outputs = _ref3.outputs,\n      bip32Paths = _ref3.bip32Paths;\n\n  switch (walletType) {\n    case TREZOR:\n      return new _trezor.TrezorSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    case LEDGER:\n      return new _ledger.LedgerSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        network: network,\n        failureCode: \"unsupported\",\n        failureText: \"This wallet is not supported when signing multisig transactions.\"\n      });\n  }\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendedPublicKeyConvert = extendedPublicKeyConvert;\nexports.convertAndValidateExtendedPublicKey = convertAndValidateExtendedPublicKey;\nexports.validateExtendedPublicKey = validateExtendedPublicKey;\nexports.validatePublicKey = validatePublicKey;\nexports.compressPublicKey = compressPublicKey;\nexports.extendedPublicKeyVersions = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nvar _utils = require(\"./utils\");\n\nvar _networks = require(\"./networks\");\n\nvar _bitcoinjsLib = require(\"bitcoinjs-lib\");\n/**\n * This module provides validation of public keys and extended public keys.  Also it provides public key compression.\n * @module keys\n */\n\n\nvar bip32 = require('bip32');\n\nvar bs58check = require('bs58check');\n\nvar extendedPublicKeyVersions = {\n  xpub: \"0488b21e\",\n  ypub: \"049d7cb2\",\n  zpub: \"04b2430c\",\n  Ypub: \"0295b43f\",\n  Zpub: \"02aa7ed3\",\n  tpub: \"043587cf\",\n  upub: \"044a5262\",\n  vpub: \"045f1cf6\",\n  Upub: \"024289ef\",\n  Vpub: \"02575483\"\n};\nexports.extendedPublicKeyVersions = extendedPublicKeyVersions;\n\nfunction validatePrefix(prefix, prefixType) {\n  if (!~Object.keys(extendedPublicKeyVersions).indexOf(prefix)) {\n    return \"Invalid \".concat(prefixType, \" version for extended public key conversion\");\n  }\n\n  return null;\n}\n\nfunction extendedPublicKeyConvert(extendedPublicKey, targetPrefix) {\n  var targetError = validatePrefix(targetPrefix, 'target');\n  if (targetError !== null) return {\n    extendedPublicKey: extendedPublicKey,\n    error: targetError\n  };\n  var sourcePrefix = extendedPublicKey.slice(0, 4);\n  var sourceError = validatePrefix(sourcePrefix, 'source');\n  if (sourceError !== null) return {\n    extendedPublicKey: extendedPublicKey,\n    error: sourceError\n  };\n\n  try {\n    var decodedExtendedPublicKey = bs58check.decode(extendedPublicKey.trim());\n    var extendedPublicKeyNoPrefix = decodedExtendedPublicKey.slice(4);\n    var extendedPublicKeyNewPrefix = Buffer.concat([Buffer.from(extendedPublicKeyVersions[targetPrefix], 'hex'), extendedPublicKeyNoPrefix]);\n    return {\n      extendedPublicKey: bs58check.encode(extendedPublicKeyNewPrefix),\n      message: \"Your extended public key has been converted from \".concat(sourcePrefix, \" to \").concat(targetPrefix),\n      error: \"\"\n    };\n  } catch (err) {\n    return {\n      extendedPublicKey: extendedPublicKey,\n      error: \"Unable to convert extended public key: \" + err.message\n    };\n  }\n}\n\nfunction convertAndValidateExtendedPublicKey(extendedPublicKey, network) {\n  var targetPrefix = network === _networks.NETWORKS.TESTNET ? 'tpub' : 'xpub';\n  var preliminaryErrors = preExtendedPublicKeyValidation(extendedPublicKey, network);\n\n  if (preliminaryErrors !== '') {\n    return {\n      extendedPublicKey: extendedPublicKey,\n      error: preliminaryErrors\n    };\n  } else {\n    var networkError = extendedPublicKeyNetworkValidateion(extendedPublicKey, network);\n\n    if (networkError === '') {\n      var extendedPublicKeyValidation = validateExtendedPublicKey(extendedPublicKey, network);\n      if (extendedPublicKeyValidation === '') return {\n        extendedPublicKey: extendedPublicKey,\n        message: \"\",\n        error: \"\"\n      }; // valid for network, use it\n      // else convert and validate below\n    }\n  }\n\n  var convertedExtendedPublicKey = extendedPublicKeyConvert(extendedPublicKey, targetPrefix);\n\n  if (convertedExtendedPublicKey.extendedPublicKey !== extendedPublicKey) {\n    // a conversion happended\n    var _extendedPublicKeyValidation = validateExtendedPublicKey(convertedExtendedPublicKey.extendedPublicKey, network);\n\n    if (_extendedPublicKeyValidation === '') return convertedExtendedPublicKey;else return {\n      extendedPublicKey: extendedPublicKey,\n      error: _extendedPublicKeyValidation\n    };\n  } else return convertedExtendedPublicKey;\n}\n\nfunction extendedPublicKeyNetworkValidateion(extendedPublicKey, network) {\n  var requiredPrefix = \"'xpub'\";\n\n  if (network === _networks.NETWORKS.TESTNET) {\n    requiredPrefix += \" or 'tpub'\";\n  }\n\n  var notXpubError = \"Extended public key must begin with \".concat(requiredPrefix, \".\");\n  var prefix = extendedPublicKey.slice(0, 4);\n\n  if (!(prefix === 'xpub' || network === _networks.NETWORKS.TESTNET && prefix === 'tpub')) {\n    return notXpubError;\n  }\n\n  return '';\n}\n\nfunction preExtendedPublicKeyValidation(extendedPublicKey, network) {\n  if (extendedPublicKey === null || extendedPublicKey === undefined || extendedPublicKey === '') {\n    return \"Extended public key cannot be blank.\";\n  }\n\n  if (extendedPublicKey.length < 111) {\n    return \"Extended public key length is too short.\";\n  }\n\n  return '';\n}\n/**\n * Provide validation messages for an extended public key.\n * @param {string} inputString - base58 encoded extended public key\n * @param {module:networks.NETWORKS} network  - bitcoin network\n * @example\n * const key = \"apub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\";\n * const validationError = validateExtendedPublicKey(key, NETWORKS.TESTNET);\n * console.log(validationError); // Extended public key must begin with 'xpub' or 'tpub'.\"\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validateExtendedPublicKey(inputString, network) {\n  var preliminaryErrors = preExtendedPublicKeyValidation(inputString, network);\n\n  if (preliminaryErrors !== '') {\n    return preliminaryErrors;\n  }\n\n  var networkError = extendedPublicKeyNetworkValidateion(inputString, network);\n\n  if (networkError !== '') {\n    return networkError;\n  }\n\n  try {\n    bip32.fromBase58(inputString, (0, _networks.networkData)(network));\n  } catch (e) {\n    return \"Invalid extended public key: \".concat(e);\n  }\n\n  return '';\n}\n/**\n * Provide validation messages for a public key.\n * @param {string} inputString - hex public key string\n * @example\n * const validationError = validatePublicKey(\"03b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee\"); // result empty, valid key\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validatePublicKey(inputString) {\n  if (inputString === null || inputString === undefined || inputString === '') {\n    return \"Public key cannot be blank.\";\n  }\n\n  var error = (0, _utils.validateHex)(inputString);\n\n  if (error !== '') {\n    return error;\n  }\n\n  try {\n    _bitcoinjsLib.ECPair.fromPublicKey(Buffer.from(inputString, 'hex'));\n  } catch (e) {\n    return \"Invalid public key \".concat(e, \".\");\n  }\n\n  return '';\n}\n/**\n * Compresses a public key.\n * @param {string} publicKey - the hex public key to compress\n * @example\n * const compressed = compressPublicKey(\"04b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee6e43c09d025c2ad322382347ec0f69b4e78d8e23c8ff9aa0dd0cb93665ae83d5\");\n * console.log(compressed); // 03b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee\n * @returns {string} compressed public key\n */\n\n\nfunction compressPublicKey(publicKey) {\n  // validate Public Key Length\n  // validate Public Key Structure\n  var pubkeyBuffer = Buffer.from(publicKey, 'hex'); // eslint-disable-next-line no-bitwise\n\n  var prefix = (pubkeyBuffer[64] & 1) !== 0 ? 0x03 : 0x02;\n  var prefixBuffer = Buffer.alloc(1);\n  prefixBuffer[0] = prefix;\n  return Buffer.concat([prefixBuffer, pubkeyBuffer.slice(1, 1 + 32)]).toString('hex');\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAddress = validateAddress;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nvar _bitcoinAddressValidation = _interopRequireDefault(require(\"bitcoin-address-validation\"));\n\nvar _networks = require(\"./networks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This modulde provides validation messages related to addresses.\n * @module address\n */\n\n\nvar MAINNET_ADDRESS_MAGIC_BYTE_PATTERN = \"^(bc1|[13])\";\nvar TESTNET_ADDRESS_MAGIC_BYTE_PATTERN = \"^(tb1|bcrt1|[mn2])\";\nvar ADDRESS_BODY_PATTERN = \"[A-HJ-NP-Za-km-z1-9]+$\";\nvar BECH32_ADDRESS_MAGIC_BYTE_REGEX = /^(tb|bc)/;\nvar BECH32_ADDRESS_BODY_PATTERN = \"[ac-hj-np-z02-9]+$\";\n/**\n * Provide a validation messages for a given address.\n * @param {string} address - the address to validate\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const validationError = validateAddress('2Mx6Y8VRj8rmSdLfwrvnpBR7ctjctPLzpWs', NETWORKS.MAINNET);\n * console.log(validationError); // Address must start with either of 'bc1', '1' or '3' followed by letters or digits.\n * @returns {string} empty if valid or corresponding validation message\n */\n\nfunction validateAddress(address, network) {\n  if (!address || address.trim() === '') {\n    return 'Address cannot be blank.';\n  }\n\n  var magic_byte_regex = network === _networks.NETWORKS.TESTNET ? TESTNET_ADDRESS_MAGIC_BYTE_PATTERN : MAINNET_ADDRESS_MAGIC_BYTE_PATTERN;\n  var isBech32 = address.match(BECH32_ADDRESS_MAGIC_BYTE_REGEX);\n  var address_body_regex = isBech32 ? BECH32_ADDRESS_BODY_PATTERN : ADDRESS_BODY_PATTERN;\n  var address_regex = magic_byte_regex + address_body_regex;\n\n  if (!address.match(address_regex)) {\n    if (network === _networks.NETWORKS.TESTNET) {\n      return \"Address must start with one of 'tb1', 'm', 'n', or '2' followed by letters or digits.\";\n    } else {\n      return \"Address must start with either of 'bc1', '1' or '3' followed by letters or digits.\";\n    }\n  } // try {\n  //   // FIXME does this support Bech32 addresses?\n  //   bitcoin.address.toOutputScript(address, network);\n  // } catch (e) {\n  //   return `Address is invalid: ${e}`;\n  // }\n\n\n  var result = (0, _bitcoinAddressValidation[\"default\"])(address);\n\n  if (result) {\n    if (network === _networks.NETWORKS.TESTNET && !result.testnet) {\n      return \"This is a \".concat(_networks.NETWORKS.MAINNET, \" address.\");\n    }\n\n    if (network === _networks.NETWORKS.MAINNET && result.testnet) {\n      return \"This is a \".concat(_networks.NETWORKS.TESTNET, \" address.\");\n    }\n  } else {\n    return \"Address is invalid.\";\n  }\n\n  return '';\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateFeeRate = validateFeeRate;\nexports.validateFeeBTC = validateFeeBTC;\nexports.validateOutputAmountBTC = validateOutputAmountBTC;\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/** \n * This module provides validation messages related to transactions.\n * @module transactions\n */\n\n\nvar ZERO = (0, _bignumber[\"default\"])(0);\nvar MAX_FEE_RATE = new _bignumber[\"default\"](1000); // 1000 Sats/byte\n\nvar MAX_FEE_BTC = new _bignumber[\"default\"](0.025); // ~ $250 if 1 BTC = $10k\n\nvar DUST_LIMIT_SATS = (0, _bignumber[\"default\"])(546);\n/**\n * Provide a validation message for a given fee rate expressed in satoshis per byte.\n * @param {string} feeRateString - a string representation of the fee rate\n * @example\n * const feerate = -1;\n * const validationError = validateFeeRate(feerate);\n * console.log(validationError); // Fee rate must be positive.\n * @returns {string} empty if valid or corresponding validation message\n */\n\nfunction validateFeeRate(feeRateString) {\n  var feeRate;\n\n  try {\n    feeRate = new _bignumber[\"default\"](feeRateString);\n  } catch (e) {\n    return \"Invalid fee rate.\";\n  }\n\n  if (feeRate.isLessThanOrEqualTo(ZERO)) {\n    return \"Fee rate must be positive.\";\n  }\n\n  if (feeRate.isGreaterThan(MAX_FEE_RATE)) {\n    return \"Fee rate is too high.\";\n  }\n\n  return '';\n}\n/**\n * Provide a validation message for a given fee expressed in BTC.\n * @param {string} feeBTCString - total fee in BTC\n * @param {BigNumber} inputsTotalSats - total satoshis\n * @example\n * const fee = \"0.03\";\n * const validationError = validateFeeBTC(fee, BigNumber(\"100000\"));\n * console.log(validationError) // Fee is too high.\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validateFeeBTC(feeBTCString, inputsTotalSats) {\n  var fee;\n\n  try {\n    fee = new _bignumber[\"default\"](feeBTCString);\n  } catch (e) {\n    return \"Invalid fee.\";\n  }\n\n  if (fee.isLessThan(ZERO)) {\n    return \"Fee cannot be negative.\";\n  }\n\n  if (fee.isGreaterThan((0, _utils.satoshisToBitcoins)(inputsTotalSats))) {\n    return \"Fee is too high.\";\n  }\n\n  if (fee.isGreaterThan(MAX_FEE_BTC)) {\n    return \"Fee is too high.\";\n  }\n\n  return '';\n}\n/**\n * Provide a validation message for a given BTC output amount\n * @param {string} amountString - BTC output amount\n * @param {BigNumber} inputsTotalSats - total satoshis being spent\n * @example\n * const out = \"0.00000500\";\n * const validationError = validateOutputAmountBTC(out, BigNumber(1000000));\n * console.log(validationError) // Output amount is too small.\n * @returns {string} empty if valid or corresponding validation message\n */\n\n\nfunction validateOutputAmountBTC(amountString, inputsTotalSats) {\n  var amount;\n\n  try {\n    amount = new _bignumber[\"default\"](amountString);\n  } catch (e) {\n    return \"Invalid output amount.\";\n  }\n\n  if (amount.isLessThanOrEqualTo(ZERO)) {\n    return \"Output amount must be positive.\";\n  }\n\n  if (amount.isLessThanOrEqualTo((0, _utils.satoshisToBitcoins)(DUST_LIMIT_SATS))) {\n    return \"Output amount is too small.\";\n  } // Check that value does not have a fraction of a satoshi\n\n\n  if ((0, _utils.bitcoinsToSatoshis)(amount).dp()) {\n    return \"Invalid output amount.\";\n  }\n\n  if (amount.isGreaterThan((0, _utils.satoshisToBitcoins)(inputsTotalSats))) {\n    return \"Output amount is too large.\";\n  }\n\n  return '';\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multisigBIP32Root = multisigBIP32Root;\nexports.multisigBIP32Path = multisigBIP32Path;\nexports.multisigAddressType = multisigAddressType;\nexports.multisigRequiredSigners = multisigRequiredSigners;\nexports.multisigTotalSigners = multisigTotalSigners;\nexports.multisigRedeemScript = multisigRedeemScript;\nexports.multisigWitnessScript = multisigWitnessScript;\nexports.multisigPublicKeys = multisigPublicKeys;\nexports.multisigAddress = multisigAddress;\nexports.generateMultisigFromPublicKeys = generateMultisigFromPublicKeys;\nexports.generateMultisigFromHex = generateMultisigFromHex;\nexports.estimateMultisigTransactionFeeRate = estimateMultisigTransactionFeeRate;\nexports.estimateMultisigTransactionFee = estimateMultisigTransactionFee;\nexports.unsignedMultisigTransaction = unsignedMultisigTransaction;\nexports.validateMultisigSignature = validateMultisigSignature;\nexports.signedMultisigTransaction = signedMultisigTransaction;\nexports.MULTISIG_ADDRESS_TYPES = exports.P2WSH = exports.P2SH_P2WSH = exports.P2SH = void 0;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _networks = require(\"./networks\");\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _utils = require(\"./utils\");\n\nvar _bip = _interopRequireDefault(require(\"bip66\"));\n\nvar _script = require(\"./script\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * Address type constant for \"pay to script hash\" address type.\n * @type {string}\n */\n\n\nvar P2SH = \"P2SH\";\n/**\n * Address type constant for \"pay to script hash - pay to witness script hash\" address type.\n * @type {string}\n */\n\nexports.P2SH = P2SH;\nvar P2SH_P2WSH = \"P2SH-P2WSH\";\n/**\n * Address type constant for \"pay to witness script hash\" address type.\n * @type {string}\n */\n\nexports.P2SH_P2WSH = P2SH_P2WSH;\nvar P2WSH = \"P2WSH\";\n/**\n * Enumeration of possible multisig address types ([P2SH]{@link module:multisig.P2SH}|[P2SH_P2WSH]{@link module:multisig.P2SH_P2WSH}|[P2WSH]{@link module:multisig.P2WSH}).\n * @enum {string} \n */\n\nexports.P2WSH = P2WSH;\nvar MULTISIG_ADDRESS_TYPES = {\n  P2SH: P2SH,\n  P2SH_P2WSH: P2SH_P2WSH,\n  P2WSH: P2WSH\n};\n/**\n * Retrieve the standard derivation path for a given multisig address type and network.\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - type from which to create the root path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const p2sh_root = multisigBIP32Root(MULTISIG_ADDRESS_TYPES.P2SH, NETWORKS.MAINNET); // m/45'/0'/0'\n * const p2sh_p2wsh_root = multisigBIP32Root(MULTISIG_ADDRESS_TYPES.P2SH_P2WSH, NETWORKS.MAINNET); // m/48'/0'/0'/1'\n * const p2wsh_root = multisigBIP32Root(MULTISIG_ADDRESS_TYPES.P2SH, NETWORKS.MAINNET); // m/48'/0'/0'/2'\n * @returns {string} full root derivation path\n */\n\nexports.MULTISIG_ADDRESS_TYPES = MULTISIG_ADDRESS_TYPES;\n\nfunction multisigBIP32Root(addressType, network) {\n  var coinPath = network === _networks.NETWORKS.MAINNET ? \"0'\" : \"1'\";\n\n  switch (addressType) {\n    case MULTISIG_ADDRESS_TYPES.P2SH:\n      return \"m/45'/\".concat(coinPath, \"/0'\");\n\n    case MULTISIG_ADDRESS_TYPES.P2SH_P2WSH:\n      return \"m/48'/\".concat(coinPath, \"/0'/1'\");\n\n    case MULTISIG_ADDRESS_TYPES.P2WSH:\n      return \"m/48'/\".concat(coinPath, \"/0'/2'\");\n\n    default:\n      return null;\n  }\n}\n/**\n * Retrieve the standard derivation path for a given multisig address type and network at a given index.\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - type from which to create the child path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {number} index - completes the derivation path\n * @example\n * const p2sh_path = multisigBIP32Path(MULTISIG_ADDRESS_TYPES.P2SH, NETWORKS.MAINNET, 0); // m/45'/0'/0'/0\n * const p2sh_p2wsh_path = multisigBIP32Path(MULTISIG_ADDRESS_TYPES.P2SH_P2WSH, NETWORKS.MAINNET, 0); // m/48'/0'/0'/1'/0\n * const p2wsh_path = multisigBIP32Path(MULTISIG_ADDRESS_TYPES.P2WSH, NETWORKS.MAINNET, 0); // m/48'/0'/0'/2'/0\n * @returns {string} full child derivation path\n */\n\n\nfunction multisigBIP32Path(addressType, network, index) {\n  var root = multisigBIP32Root(addressType, network);\n\n  if (root) {\n    return root + \"/\".concat(index || \"0\");\n  }\n\n  return null;\n}\n/**\n * Determine the multisig address type for a Multisig object.\n * @param {Multisig} multisig - derive the address type from this object\n * @example\n * const addressType = multisigAddressType(multisig);\n * if (addressType == MULTISIG_ADDRESS_TYPES.P2SH) {\n *  // handle P2SH here\n * }\n * // check other address types and handle\n * @returns {module:multisig.MULTISIG_ADDRESS_TYPES} the address type\n */\n\n\nfunction multisigAddressType(multisig) {\n  if (multisig.redeem.redeem) {\n    return MULTISIG_ADDRESS_TYPES.P2SH_P2WSH;\n  } else {\n    // FIXME why is multisig.witness null?\n    // if (multisig.witness) {\n    if (multisig.address.match(/^(tb|bc)/)) {\n      return MULTISIG_ADDRESS_TYPES.P2WSH;\n    } else {\n      return MULTISIG_ADDRESS_TYPES.P2SH;\n    }\n  }\n}\n/**\n * Extract the number of required signers value from a Multisig object.\n * @param {Multisig} multisig - object to parse\n * @example\n * const m = multisigRequiredSigners(multisig); // m = 2 for a 2 of 3 multisig\n * @returns {number} number of signatures required to spend from a given multisig address\n */\n\n\nfunction multisigRequiredSigners(multisig) {\n  return multisigAddressType(multisig) === MULTISIG_ADDRESS_TYPES.P2SH_P2WSH ? multisig.redeem.redeem.m : multisig.redeem.m;\n}\n/**\n * Extract the total number of signers value from a Multisig object.\n * @param {Multisig} multisig - object to parse\n * @example\n * const n = multisigTotalSigners(multisig); // n = 3 for a 2 of 3 multisig\n * @returns {number} number of keys available for signing for a given multisig address\n */\n\n\nfunction multisigTotalSigners(multisig) {\n  return multisigAddressType(multisig) === MULTISIG_ADDRESS_TYPES.P2SH_P2WSH ? multisig.redeem.redeem.n : multisig.redeem.n;\n}\n/**\n * Retrieve the Multisig object representing proper redeem script from a base Multisig object.\n * @param {Multisig} multisig - object to parse\n * @example\n * const redeemMultisig = multisigRedeemScript(multisig)\n * console.log(scriptToHex(redeemMultisig)) // 522102e326263c35e...\n * @returns {Multisig|null} object for further parsing\n */\n\n\nfunction multisigRedeemScript(multisig) {\n  switch (multisigAddressType(multisig)) {\n    case MULTISIG_ADDRESS_TYPES.P2SH:\n      return multisig.redeem;\n\n    case MULTISIG_ADDRESS_TYPES.P2SH_P2WSH:\n      return multisig.redeem;\n\n    case MULTISIG_ADDRESS_TYPES.P2WSH:\n      return null;\n\n    default:\n      return null;\n  }\n}\n/**\n * Retrieve the Multisig object representing proper witness script from a base Multisig object.\n * @param {Multisig} multisig - object to parse\n * @example\n * const witnessScript = multisigWitnessScript(multisig)\n * console.log(scriptToHex(witnessScript)) // 522102e326263c35e...\n * @returns {Multisig|null} object for further parsing\n */\n\n\nfunction multisigWitnessScript(multisig) {\n  switch (multisigAddressType(multisig)) {\n    case MULTISIG_ADDRESS_TYPES.P2SH:\n      return null;\n\n    case MULTISIG_ADDRESS_TYPES.P2SH_P2WSH:\n      return multisig.redeem.redeem;\n\n    case MULTISIG_ADDRESS_TYPES.P2WSH:\n      return multisig.redeem;\n\n    default:\n      return null;\n  }\n}\n/**\n * Extract the public keys from a given Multisig object.\n * @param {Multisig} multisig - object to parse\n * @example\n * const pubkeys = multisigPublicKeys(multisig);\n * @returns {string[]} the hex representation of the public keys used in the multisig address\n */\n\n\nfunction multisigPublicKeys(multisig) {\n  return (multisigAddressType(multisig) === P2SH ? multisigRedeemScript(multisig) : multisigWitnessScript(multisig)).pubkeys.map(_utils.toHexString);\n}\n/**\n * Return the address for a given Multisig object.\n * @param {Multisig} multisig - object to parse\n * @returns {string} the address\n */\n\n\nfunction multisigAddress(multisig) {\n  return multisig.address;\n}\n/**\n * Create a Multisig object by specifying the network, address type, total number of signers and the public keys.\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - address type for determining Multisig object\n * @param {number} requiredSigners - number of signers needed to spend funds\n * @param  {...string} publicKeys - list of hex string representation of public keys\n * @example\n * const multisig = generateMultisigFromSpec(NETWORKS.MAINNET, MULTISIG_ADDRESS_TYPES.P2SH, 3, pubkey1, pubkey2, ..., pubkeyN);\n * @returns {Multisig} object for further parsing\n */\n\n\nfunction generateMultisigFromPublicKeys(network, addressType, requiredSigners) {\n  for (var _len = arguments.length, publicKeys = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    publicKeys[_key - 3] = arguments[_key];\n  }\n\n  var redeemScript = bitcoin.payments.p2ms({\n    m: requiredSigners,\n    pubkeys: publicKeys.map(function (hex) {\n      return Buffer.from(hex, 'hex');\n    }),\n    network: (0, _networks.networkData)(network)\n  });\n  return generateMultisigFromRedeemScript(addressType, redeemScript);\n}\n/**\n * Create a Multisig object from the hex representation of a redeem script.\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - address type for object creation\n * @param {string} redeemScriptHex - hex representation of the redeem script\n * @example\n * const redeemScript = \"512103a90d10bf3794352bb1fa533dbd4ea75a0ffc98e0d05124938fcc3e10cdbe1a4321030d60e8d497fa8ce59a2b3203f0e597cd0182e1fe0cc3688f73497f2e99fbf64b52ae\";\n * const multisig = generateMultisigFromHex(NETWORKS.MAINNET, MULTISIG_ADDRESS_TYPES.P2SH, redeemScript);\n * @returns {Multisig} object for further parsing\n */\n\n\nfunction generateMultisigFromHex(network, addressType, redeemScriptHex) {\n  var redeemScript = bitcoin.payments.p2ms({\n    output: Buffer.from(redeemScriptHex, 'hex'),\n    network: (0, _networks.networkData)(network)\n  });\n  return generateMultisigFromRedeemScript(addressType, redeemScript);\n}\n\nfunction generateMultisigFromRedeemScript(addressType, redeemScript) {\n  switch (addressType) {\n    case MULTISIG_ADDRESS_TYPES.P2SH:\n      return bitcoin.payments.p2sh({\n        redeem: redeemScript\n      });\n\n    case MULTISIG_ADDRESS_TYPES.P2SH_P2WSH:\n      return bitcoin.payments.p2sh({\n        redeem: bitcoin.payments.p2wsh({\n          redeem: redeemScript\n        })\n      });\n\n    case MULTISIG_ADDRESS_TYPES.P2WSH:\n      return bitcoin.payments.p2wsh({\n        redeem: redeemScript\n      });\n\n    default:\n      return null;\n  }\n}\n/**\n * Estimate transaction fee rate based on actual fee and address type, number of inputs and number of outputs.\n * @param {Object} config - configuration for the calculation\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} config.addressType - address type used for estimation\n * @param {number} config.numInputs - number of inputs used in calculation\n * @param {number} config.numOutputs - number of outputs used in calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @param {BigNumber} config.feesInSatoshis - total transaction fee in satoshis\n * @example \n * // get the fee rate a P2WSH multisig transaction with 2 inputs and 3 outputs with a known fee of 7060\n * const feerate = estimateMultisigTransactionFeeRate({\n *   addressType: MULTISIG_ADDRESS_TYPES.P2WSH, \n *   numInputs: 2, \n *   numOutputs: 3, \n *   m: 2,\n *   n: 3,\n *   feesInSatoshis: 7060\n * });\n * \n * \n * @returns {string} estimated fee rate\n */\n\n\nfunction estimateMultisigTransactionFeeRate(config) {\n  return new _bignumber[\"default\"](config.feesInSatoshis).dividedBy(estimateMultisigTransactionLength(config)).toFixed(0);\n}\n/**\n * Estimate transaction fee based on fee rate, address type, number of inputs and outputs.\n * @param {Object} config - configuration for the calculation\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} config.addressType - address type used for estimation\n * @param {number} config.numInputs - number of inputs used in calculation\n * @param {number} config.numOutputs - number of outputs used in calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @param {string} config.feesPerByteInSatoshis - satoshis per byte fee rate\n * @example\n * // get fee for P2SH multisig transaction with 2 inputs and 3 outputs at 10 satoshis per byte\n * const fee = estimateMultisigTransactionFee({\n *   addressType: MULTISIG_ADDRESS_TYPES.P2SH, \n *   numInputs: 2, \n *   numOutputs: 3, \n *   m: 2,\n *   n: 3,\n *   feesPerByteInSatoshis: 10\n * });\n * @returns {number} estimated transaction fee\n */\n\n\nfunction estimateMultisigTransactionFee(config) {\n  return new _bignumber[\"default\"](config.feesPerByteInSatoshis).multipliedBy(estimateMultisigTransactionLength(config));\n}\n\nfunction estimateMultisigTransactionLength(config) {\n  switch (config.addressType) {\n    case MULTISIG_ADDRESS_TYPES.P2SH:\n      return (0, _p2sh.estimateMultisigP2SHTransactionLength)(config);\n\n    case MULTISIG_ADDRESS_TYPES.P2SH_P2WSH:\n      return (0, _p2sh_p2wsh.estimateMultisigP2SHP2WSHTransactionLength)(config);\n\n    case MULTISIG_ADDRESS_TYPES.P2WSH:\n      return (0, _p2wsh.estimateMultisigP2WSHTransactionLength)(config);\n\n    default:\n      return null;\n  }\n}\n/**\n * Create an unsigned bitcoin transaction based on the network, inputs and outputs.\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {UTXO[]} inputs - inputs used to create transaction\n * @param {Object[]} outputs - transaction recipients\n * @example\n * const unsignedTransaction = unsignedMultisigTransaction(NETWORKS.MAINNET, inputs, outputs);\n * @returns {Transaction} an unsigned {@link https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/types/transaction.d.ts|Transaction} object\n */\n\n\nfunction unsignedMultisigTransaction(network, inputs, outputs) {\n  var transactionBuilder = new bitcoin.TransactionBuilder();\n  transactionBuilder.setVersion(1); // FIXME this depends on type...\n\n  transactionBuilder.network = (0, _networks.networkData)(network);\n\n  for (var inputIndex = 0; inputIndex < inputs.length; inputIndex += 1) {\n    var input = inputs[inputIndex];\n    transactionBuilder.addInput(input.txid, input.index);\n  }\n\n  for (var outputIndex = 0; outputIndex < outputs.length; outputIndex += 1) {\n    var output = outputs[outputIndex];\n    transactionBuilder.addOutput(output.address, new _bignumber[\"default\"](output.amountSats).toNumber());\n  }\n\n  return transactionBuilder.buildIncomplete();\n}\n/**\n * Validate a signature for a signed transaction input.\n * @param {Transaction} unsignedTransaction - transaction to validate\n * @param {number} inputIndex - the index where the input appears in the transaction\n * @param {UTXO} input - the object representing the input whose signature you wish to validate\n * @param {string} signerInputSignature - signature to validate\n * @example\n * const publicKey = validateMultisigSignature(unsignedTransaction, inputIndex, input, inputSignature);\n * if (publicKey) {\n *   // is valid, do something with publicKey\n * } else {\n *   // not valid, handle here\n * }\n * @returns {string|boolean} false if invalid or corresponding public key\n */\n\n\nfunction validateMultisigSignature(unsignedTransaction, inputIndex, input, signerInputSignature) {\n  var hash = multisigSignatureHash(unsignedTransaction, inputIndex, input);\n  var signatureBuffer = multisigSignatureBuffer(signatureNoSighashType(signerInputSignature));\n  var publicKeys = multisigPublicKeys(input.multisig);\n\n  for (var publicKeyIndex = 0; publicKeyIndex < multisigTotalSigners(input.multisig); publicKeyIndex++) {\n    var publicKey = publicKeys[publicKeyIndex];\n    var publicKeyBuffer = Buffer.from(publicKey, 'hex');\n    var keyPair = bitcoin.ECPair.fromPublicKey(publicKeyBuffer);\n\n    if (keyPair.verify(hash, signatureBuffer)) {\n      return publicKey;\n    }\n  }\n\n  return false;\n}\n\nfunction signatureNoSighashType(signature) {\n  var len = parseInt(signature.slice(2, 4), 16);\n  if (len == (signature.length - 4) / 2) return signature;else return signature.slice(0, -2);\n}\n\nfunction multisigSignatureHash(unsignedTransaction, inputIndex, input) {\n  if (multisigAddressType(input.multisig) === MULTISIG_ADDRESS_TYPES.P2WSH || multisigAddressType(input.multisig) === MULTISIG_ADDRESS_TYPES.P2SH_P2WSH) {\n    return unsignedTransaction.hashForWitnessV0(inputIndex, multisigWitnessScript(input.multisig).output, new _bignumber[\"default\"](input.amountSats).toNumber(), bitcoin.Transaction.SIGHASH_ALL);\n  } else {\n    return unsignedTransaction.hashForSignature(inputIndex, multisigRedeemScript(input.multisig).output, bitcoin.Transaction.SIGHASH_ALL);\n  }\n}\n\nfunction multisigSignatureBuffer(signature) {\n  var encodedSignerInputSignatureBuffer = new Buffer(signature, 'hex');\n\n  var decodedSignerInputSignatureBuffer = _bip[\"default\"].decode(encodedSignerInputSignatureBuffer);\n\n  var r = decodedSignerInputSignatureBuffer.r,\n      s = decodedSignerInputSignatureBuffer.s; // Ignore the leading 0 if r is 33 bytes\n\n  var rToUse = r;\n\n  if (r.byteLength > 32) {\n    rToUse = r.slice(1);\n  }\n\n  var signatureBuffer = new Buffer(64);\n  signatureBuffer.set(new Buffer(rToUse), 0);\n  signatureBuffer.set(new Buffer(s), 32);\n  return signatureBuffer;\n}\n/**\n * Add signatures to an unsigned transaction.\n * @param {Transaction} unsignedTransaction - generated transaction object from call to unsignedMultisigTransaction\n * @param {UTXO[]} inputs - generated array of inputs to the transaction (blockExplorerGetAddresesUTXOs|bitcoindListUnspent)\n * @param {Object[]} inputsSignaturesByPublicKey - input signatures mapped to the pulic key index [{signature: index},...]\n * @example\n * const keysigs = [{[pubkey1]: signature1}, {[pubkey2]: signature2}]\n * const signedTx = signedMultisigTransaction(unsignedTx, inputs, keysigs)\n * console.log(signedTx.toHex()) // 0100000001d73e679f...\n * @returns {Transaction} a signed {@link https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/types/transaction.d.ts|Transaction} object\n */\n\n\nfunction signedMultisigTransaction(unsignedTransaction, inputs, inputsSignaturesByPublicKey) {\n  var signedTransaction = bitcoin.Transaction.fromHex(unsignedTransaction.toHex()); // FIXME inefficient?\n\n  var _loop = function _loop(inputIndex) {\n    var input = inputs[inputIndex];\n    var inputPublicKeys = multisigPublicKeys(input.multisig); // Sort the signatures for this input across signers by the index\n    // of their public key within this input's redeem script.\n\n    var sortedSignatures = inputPublicKeys.map(function (publicKey) {\n      return inputsSignaturesByPublicKey[inputIndex][publicKey];\n    }).filter(function (signature) {\n      return signature ? signatureNoSighashType(signature) : signature;\n    });\n\n    if (multisigAddressType(input.multisig) === MULTISIG_ADDRESS_TYPES.P2WSH) {\n      var witness = multisigWitnessField(input.multisig, sortedSignatures);\n      signedTransaction.setWitness(inputIndex, witness);\n    } else if (multisigAddressType(input.multisig) === MULTISIG_ADDRESS_TYPES.P2SH_P2WSH) {\n      var _witness = multisigWitnessField(input.multisig, sortedSignatures);\n\n      signedTransaction.setWitness(inputIndex, _witness);\n      var scriptSig = multisigRedeemScript(input.multisig);\n      signedTransaction.ins[inputIndex].script = Buffer.from([scriptSig.output.length].concat(_toConsumableArray(scriptSig.output)));\n    } else {\n      var _scriptSig = multisigScriptSig(input.multisig, sortedSignatures);\n\n      signedTransaction.ins[inputIndex].script = _scriptSig.input;\n    }\n  };\n\n  for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n    _loop(inputIndex);\n  }\n\n  return signedTransaction;\n}\n\nfunction multisigWitnessField(multisig, sortedSignatures) {\n  var witness = [\"\"].concat(sortedSignatures.map(function (s) {\n    return signatureNoSighashType(s) + '01';\n  }));\n  var witnessScript = multisigWitnessScript(multisig);\n  witness.push((0, _script.scriptToHex)(witnessScript));\n  return witness.map(function (wit) {\n    return Buffer.from(wit, 'hex');\n  });\n}\n\nfunction multisigScriptSig(multisig, signersInputSignatures) {\n  var signatureOps = signersInputSignatures.map(function (signature) {\n    return \"\".concat(signatureNoSighashType(signature), \"01\");\n  }).join(' '); // 01 => SIGHASH_ALL\n\n  var inputScript = \"OP_0 \".concat(signatureOps);\n  var inputScriptBuffer = bitcoin.script.fromASM(inputScript);\n  var redeemScript = bitcoin.payments.p2ms({\n    network: multisig.network,\n    output: Buffer.from(multisigRedeemScript(multisig).output, 'hex'),\n    input: inputScriptBuffer\n  });\n  return generateMultisigFromRedeemScript(multisigAddressType(multisig), redeemScript);\n}\n/**\n* @typedef {'Multisig'} Multisig - IMPORTANT: Always parse this and never use properties directly!\n*/\n\n/**\n* A utxo object for signing with various wallets\n* @typedef {Object} UTXO\n* @property {boolean} confirmed - This is for UI developers and not signing related\n* @property {string} txid - The transaction ID where funds were received\n* @property {number} index - The index in the transaction referred to by {txid}\n* @property {string} amount - String representation of BTC value\n* @property {BigNumber} amountSats - Value in satoshis\n* @property {string} [transactionHex] - Hex representation of the raw transaction referred to by txid\n* @property {Multisig} [multisig] - For parsing only\n*/","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2SHTransactionLength = estimateMultisigP2SHTransactionLength;\n/**\n * This module provides a utility function for P2SH address type.\n * @module p2sh\n */\n\n/**\n * Estimate the transaction size for P2SH address type.\n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - input count used for calculation\n * @param {number} config.numOutputs - output count used for calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @returns {number} estimated transaction size in bytes\n */\n\nfunction estimateMultisigP2SHTransactionLength(config) {\n  var baseSize = 41 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72 + 1; // approx including push byte\n\n  var scriptOverhead = 4;\n  var keylength = 33 + 1; // push byte\n\n  var sigSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + scriptOverhead * config.numInputs;\n  var vsize = baseSize + sigSize;\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2SHP2WSHTransactionLength = estimateMultisigP2SHP2WSHTransactionLength;\n/**\n * This module provides a utility function for P2SH-P2WSH address type.\n * @module p2sh_p2wsh\n */\n\n/**\n * Estimate the transaction vsize for P2SH-P2WSH address type.\n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - input count used for calculation\n * @param {number} config.numOutputs - output count used for calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @returns {number} estimated transaction vsize in bytes\n */\n\nfunction estimateMultisigP2SHP2WSHTransactionLength(config) {\n  var baseSize = 76 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72;\n  var overhead = 6;\n  var keylength = 33;\n  var witnessSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + overhead * config.numInputs;\n  var vsize = Math.ceil(0.75 * baseSize + 0.25 * (baseSize + witnessSize));\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2WSHTransactionLength = estimateMultisigP2WSHTransactionLength;\n/**\n * This module provides a utility function for P2WSH address type.\n * @module p2wsh\n */\n\n/**\n * Estimate the transaction vsize for P2WSH address type.\n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - input count used for calculation\n * @param {number} config.numOutputs - output count used for calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @returns {number} estimated transaction vsize in bytes\n */\n\nfunction estimateMultisigP2WSHTransactionLength(config) {\n  var baseSize = 41 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72;\n  var overhead = 6;\n  var keylength = 33;\n  var witnessSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + overhead * config.numInputs;\n  var vsize = Math.ceil(0.75 * baseSize + 0.25 * (baseSize + witnessSize));\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blockExplorerURL = blockExplorerURL;\nexports.blockExplorerAPIURL = blockExplorerAPIURL;\nexports.blockExplorerTransactionURL = blockExplorerTransactionURL;\nexports.blockExplorerAddressURL = blockExplorerAddressURL;\n\nvar _networks = require(\"./networks\");\n/**\n * This module provides various helper functions for the Blockstream block explorer and associated API.\n * Use this to easily access the block explorer links and API endpoint URLs\n * @module block_explorer\n */\n\n\nvar BASE_URL_MAINNET = 'https://blockstream.info';\nvar BASE_URL_TESTNET = 'https://blockstream.info/testnet';\n\nfunction blockExplorerBaseURL(network) {\n  return network === _networks.NETWORKS.TESTNET ? BASE_URL_TESTNET : BASE_URL_MAINNET;\n}\n/**\n * Formats the proper URL based on the block explorer path and network.\n * @param {string} path - the explorer path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const path = \"/block/00000000000000000011341d69792271766e4683e29b3ea169eacc59bde10a57\";\n * const url = blockExplorerURL(path, NETWORKS.MAINNET);\n * console.log(url) // https://blockstream.info/block/00000000000000000011341d69792271766e4683e29b3ea169eacc59bde10a57\n * @returns {string} the full block explorer url\n */\n\n\nfunction blockExplorerURL(path, network) {\n  return \"\".concat(blockExplorerBaseURL(network)).concat(path);\n}\n/**\n * Formats the proper API URL based on the api path and network.\n * @param {string} path - the api path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const path = \"/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\";\n * const url = blockExplorerAPIURL(path, NETWORKS.MAINNET);\n * console.log(url); // https://blockstream.info/api/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n * @returns {string} the full block explorer url\n */\n\n\nfunction blockExplorerAPIURL(path, network) {\n  return \"\".concat(blockExplorerBaseURL(network), \"/api\").concat(path);\n}\n/**\n * Formats the proper URL for a transaction on a given network.\n * @param {string} txid - the transaction id to look up\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const txid = \"1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\";\n * const url = blockExplorerTransactionURL(txid, NETWORKS.MAINNET);\n * console.log(url); // https://blockstream.info/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n * @returns {string} the full transaction URL\n */\n\n\nfunction blockExplorerTransactionURL(txid, network) {\n  return blockExplorerURL(\"/tx/\".concat(txid), network);\n}\n/**\n * Formats the proper URL for an address on a given network.\n * @param {string} address the address to look up\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @example\n * const address = \"39YqNoLULDpbjmeCTdGJ42DQhrQLzRcMdX\";\n * const url = blockExplorerAddressURL(address, NETWORKS.MAINNET);\n * console.log(url); // https://blockstream.info/address/39YqNoLULDpbjmeCTdGJ42DQhrQLzRcMdX\n * @returns {string} full URL for address lookup\n */\n\n\nfunction blockExplorerAddressURL(address, network) {\n  return blockExplorerURL(\"/address/\".concat(address), network);\n}"],"sourceRoot":""}