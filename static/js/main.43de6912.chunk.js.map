{"version":3,"sources":["../../unchained-wallets/lib/trezor.js","../../unchained-wallets/lib/ledger.js","../../unchained-wallets/lib/images.js","../../unchained-wallets/lib/hermit.js","images/logo.png","utils/index.js","components/Disclaimer.jsx","components/Help.jsx","actions/settingsActions.js","components/NetworkPicker.jsx","components/QuorumPicker.jsx","components/AddressTypePicker.jsx","block_explorer.js","bitcoind.js","blockchain.js","actions/utils.js","actions/clientActions.jsx","components/ClientPicker.jsx","components/Wallet/ConfirmWallet.jsx","actions/walletActions.jsx","actions/transactionActions.jsx","components/Copyable.jsx","components/Wallet/WalletDeposit.jsx","components/Spend/UTXOSet.jsx","components/MultisigDetails.jsx","components/Wallet/Node.jsx","components/BitcoindAddressImporter.jsx","components/Wallet/NodeSet.jsx","components/Spend/OutputEntry.jsx","components/Spend/OutputsForm.jsx","components/Spend/TextSignatureImporter.jsx","components/Hermit/HermitReader.jsx","components/Hermit/HermitDisplayer.jsx","components/InteractionMessages.jsx","components/Spend/HermitSignatureImporter.jsx","components/Spend/HardwareWalletSignatureImporter.jsx","components/EditableName.jsx","actions/signatureImporterActions.jsx","components/Spend/SignatureImporter.jsx","components/Spend/Transaction.jsx","components/Wallet/ExtendedPublicKeySelector.jsx","components/Wallet/WalletSign.jsx","components/Wallet/WalletSpend.jsx","components/Wallet/WalletView.jsx","components/Wallet/WalletControl.jsx","actions/extendedPublicKeyImporterActions.js","components/Wallet/WalletGenerator.jsx","components/Wallet/ExtendedPublicKeyExtendedPublicKeyImporter.jsx","components/Wallet/TextExtendedPublicKeyImporter.jsx","components/Wallet/HermitExtendedPublicKeyImporter.jsx","components/Wallet/HardwareWalletExtendedPublicKeyImporter.jsx","components/CreateAddress/Conflict.jsx","components/Wallet/ExtendedPublicKeyImporter.jsx","components/Wallet/index.jsx","actions/publicKeyImporterActions.js","components/CreateAddress/AddressGenerator.jsx","components/CreateAddress/TextPublicKeyImporter.jsx","components/CreateAddress/ExtendedPublicKeyPublicKeyImporter.jsx","components/CreateAddress/HermitPublicKeyImporter.jsx","components/CreateAddress/HardwareWalletPublicKeyImporter.jsx","components/CreateAddress/PublicKeyImporter.jsx","components/CreateAddress/index.jsx","actions/testSuiteRunActions.js","actions/keystoreActions.js","actions/errorNotificationActions.js","actions/testRunActions.js","components/TestSuiteRun/Note.js","components/TestSuiteRun/KeystorePicker.js","tests/Test.js","components/TestSuiteRun/TestSuiteRunSummary.js","components/TestSuiteRun/TestRun.js","components/TestSuiteRun/Seed.js","components/TestSuiteRun/index.js","actions/ownershipActions.jsx","components/Spend/ScriptEntry.jsx","components/Spend/ConfirmOwnership.jsx","components/Spend/index.jsx","components/Navbar.jsx","components/Footer.jsx","components/ErrorBoundary.js","components/ErrorNotification.js","components/App.jsx","registerServiceWorker.js","reducers/utils.js","reducers/settingsReducer.jsx","reducers/clientReducer.jsx","reducers/braidReducer.jsx","reducers/quorumReducer.jsx","reducers/addressReducer.jsx","reducers/walletReducer.jsx","reducers/ownershipReducer.jsx","reducers/signatureImportersReducer.js","reducers/transactionReducer.js","reducers/keystoreReducer.js","tests/publicKeys.js","tests/signing.js","tests/addresses.js","tests/trezor.js","tests/ledger.js","tests/hermit.js","tests/index.js","reducers/testSuiteRunReducer.js","reducers/errorNotificationReducer.js","reducers/index.js","index.jsx","../../unchained-bitcoin/lib/utils.js","../../unchained-bitcoin/lib/networks.js","components/Spend/styles.module.scss","../../unchained-bitcoin/lib/p2sh.js","../../unchained-bitcoin/lib/p2sh_p2wsh.js","../../unchained-bitcoin/lib/p2wsh.js","../../unchained-bitcoin/lib/multisig.js","../../unchained-wallets/lib/interaction.js","../../unchained-bitcoin/lib/inputs.js","../../unchained-bitcoin/lib/index.js","../../unchained-wallets/lib/index.js","../../unchained-bitcoin/lib/script.js","../../unchained-bitcoin/lib/addresses.js","../../unchained-bitcoin/lib/signatures.js","../../unchained-bitcoin/lib/outputs.js","../../unchained-bitcoin/lib/paths.js","../../unchained-bitcoin/lib/keys.js","../../unchained-bitcoin/lib/fees.js","../../unchained-bitcoin/lib/transactions.js","../../unchained-bitcoin/lib/block_explorer.js","../../unchained-bitcoin/lib/fixtures.js"],"names":["_regeneratorRuntime","__webpack_require__","Object","defineProperty","exports","value","trezorCoin","TrezorConfirmMultisigAddress","TrezorSignMultisigTransaction","TrezorExportExtendedPublicKey","TrezorExportPublicKey","TrezorExportHDNode","TrezorGetMetadata","TrezorInteraction","TREZOR","obj","_ADDRESS_SCRIPT_TYPES","_bignumber","__esModule","default","_unchainedBitcoin","_interaction","_typeof","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","ReferenceError","_assertThisInitialized","_get","property","receiver","Reflect","get","base","object","hasOwnProperty","_getPrototypeOf","_superPropBase","desc","getOwnPropertyDescriptor","o","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_setPrototypeOf","p","_defineProperty","TrezorConnect","ADDRESS_SCRIPT_TYPES","P2SH","P2SH_P2WSH","P2WSH","manifest","email","appUrl","e","console","error","_DirectKeystoreIntera","_ref","_this","network","this","DirectKeystoreInteraction","messages","state","PENDING","level","INFO","text","code","ACTIVE","_this$connectParams","_this$connectParams2","method","params","result","async","_context","prev","connectParams","awrap","sent","success","Error","payload","abrupt","parse","stop","_TrezorInteraction","getFeatures","major_version","minor_version","patch_version","label","model","pin_protection","passphrase_protection","spec","concat","version","major","minor","patch","string","pin","passphrase","_TrezorInteraction2","_ref2","_this2","bip32Path","bip32Paths","bip32PathSegments","split","ERROR","coinPath","MAINNET","match","WARNING","TESTNET","getPublicKey","path","coin","crossChain","bundle","map","bip32path","_TrezorExportHDNode","apply","arguments","publicKey","_TrezorExportHDNode2","xpub","_TrezorInteraction3","_ref3","_this3","inputs","outputs","_this4","signTransaction","input","inputIndex","requiredSigners","multisigRequiredSigners","multisig","addressType","multisigAddressType","script_type","m","pubkeys","multisigPublicKeys","trezorPublicKey","signatures","fill","prev_hash","txid","prev_index","index","address_n","bip32PathToSequence","amount","amountSats","trezorInput","output","toFixed","address","trezorOutput","_TrezorInteraction4","_ref4","_this5","getAddress","multisigAddress","showOnTrezor","scriptType","node","depth","child_num","fingerprint","chain_code","repeat","public_key","Buffer","LedgerSignMultisigTransaction","LedgerExportPublicKey","LedgerGetMetadata","LedgerBitcoinInteraction","LedgerDashboardInteraction","LedgerInteraction","LEDGER_BOTH_BUTTONS","LEDGER_RIGHT_BUTTON","LEDGER_LEFT_BUTTON","LEDGER","_interopRequireDefault","_images","_toConsumableArray","arr2","_arrayWithoutHoles","iter","from","_iterableToArray","_nonIterableSpread","bitcoin","TransportU2F","LedgerBtc","callback","transport","_context3","withTransport","app","_context2","_LedgerInteraction","_LedgerInteraction2","_LedgerDashboardInter","_context5","rawResult","_context4","setScrambleKey","send","parseMetadata","response","byteArray","data","slice","targetId","readUIntBE","seVersionLength","seVersion","flagsLength","flags","mcuVersionLength","mcuVersion","allocUnsafeSlow","includes","replace","_split2","majorVersion","minorVersion","patchVersion","_split4","mcuMajorVersion","mcuMinorVersion","MODEL_RANGES","minTargetId","range","LedgerExportHDNode","_LedgerBitcoinInterac","hasBIP32PathWarning","image","warning","action","derivationPathIsUnusualV1","derivationPathV1","rejectIfNotSureV1","addressScrollV1","some","indices","hardeningOffset","Math","pow","hardened0","hardened44","hardened100","_context7","withApp","_context6","getWalletPublicKey","verify","_LedgerExportHDNode","_context9","parsePublicKey","publicKeys","_result","_context8","publicKeyResult","compressPublicKey","_LedgerBitcoinInterac2","preProcessingTime","postProcessingTime","anySegwitInputs","_this6","_context11","_context10","setExchangeTimeout","signP2SHTransaction","ledgerInputs","ledgerKeysets","ledgerOutputScriptHex","inputTransaction","splitTransaction","transactionHex","scriptFn","multisigRedeemScript","multisigWitnessScript","scriptHex","scriptToHex","_this7","ledgerBIP32Path","txTmp","TransactionBuilder","setVersion","networks","testnet","addOutput","toNumber","j","addInput","txHex","buildIncomplete","toHex","splitTx","serializeTransactionOutputs","join","r","__webpack_exports__","ledger","mimeType","parseHermitQRCodeData","encodeHermitQRCodeData","HermitSignTransaction","HermitExportExtendedPublicKey","HermitExportPublicKey","HermitDisplayer","HermitReader","HermitInteraction","HERMIT","_hiBase","_pako","ownKeys","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","encodedString","errorPrefix","compressedBytes","decode","asBytes","json","inflate","to","JSON","message","startsWith","jsonString","stringify","deflate","gzip","encode","commandMessage","source","forEach","getOwnPropertyDescriptors","defineProperties","_objectSpread","mode","instructions","command","_IndirectKeystoreInte","IndirectKeystoreInteraction","_HermitInteraction","reader","_HermitReader","displayer","_HermitReader2","pubkey","_HermitReader3","_HermitDisplayer","inputAddressType","inputsAreSupported","outputsAreSupported","MULTISIG_ADDRESS_TYPES","statet","UNSUPPORTED","signatureRequestData","hermitInputsByRedeemScript","redeemScriptHex","values","module","externalLink","url","react_default","a","createElement","href","rel","downloadFile","body","filename","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","URL","createObjectURL","download","appendChild","click","removeChild","naiveCoinSelection","spendableInputs","outputTotal","selectedUtxos","inputTotal","BigNumber","_loop","spendableInput","utxos","utxo","objectSpread","change","plus","balanceSats","isGreaterThanOrEqualTo","Disclaimer","Card","CardHeader","title","CardContent","Help","Box","mt","mb","Typography","variant","Grid","container","spacing","item","md","direction","List","ListItem","ListItemIcon","Description","ListItemText","YouTube","GitHub","CardActions","Button","BugReport","components_Disclaimer","SET_NETWORK","SET_TOTAL_SIGNERS","SET_REQUIRED_SIGNERS","SET_ADDRESS_TYPE","SET_FROZEN","setFrozen","NetworkPicker","handleNetworkChange","event","setNetwork","_this$props","frozen","FormControl","component","RadioGroup","FormControlLabel","id","control","Radio","color","name","onChange","checked","disabled","FormHelperText","React","Component","mapDispatchToProps","connect","settings","MAX_TOTAL_SIGNERS","QuorumPicker","renderIncrementRequiredSigners","totalSigners","IconButton","onClick","handleIncrementRequiredSigners","AddCircle","renderDecrementRequiredSigners","_this$props2","handleDecrementRequiredSigners","RemoveCircle","renderIncrementTotalSigners","_this$props3","handleIncrementTotalSigners","renderDecrementTotalSigners","_this$props4","handleDecrementTotalSigners","_this$props5","setRequiredSigners","preventDefault","_this$props6","_this$props7","setTotalSigners","_this$props8","_this$props9","justify","xs","alignItems","number","AddressTypePicker","handleTypeChange","setType","_callee2","utxosResult","regenerator_default","wrap","axios","blockExplorerAPIURL","Promise","all","asyncToGenerator","mark","_callee","transactionResult","confirmed","status","vout","satoshisToBitcoins","time","block_time","_x8","t0","_callee3","addressesult","addressData","used","chain_stats","funded_txo_count","mempool_stats","_callee4","feeEstimatesResult","feeEstimates","ceil","_callee5","broadcastResult","post","callBitcoind","auth","_args2","_ref6","resolve","reject","headers","Accept","Content-Type","jsonrpc","then","resp","catch","_x9","isWalletAddressNotFoundError","bitcoindParams","client","username","password","addresses","_ref7","addressParam","promises","previousTransactions","mapindex","confirmations","bitcoinsToSatoshis","hex","blocktime","_x10","bitcoindGetAddressStatus","_x5","_bitcoindGetAddressStatus","_callee6","_ref3$numBlocks","numBlocks","feeRate","feerate","_callee7","log","BLOCK_EXPLORER","fetchAddressUTXOs","_x","_x2","_x3","_fetchAddressUTXOs","unsortedUTXOs","fetchAddressUTXOsUnsorted","sortInputs","_blockExplorerGetAddresesUTXOs","blockExplorerGetAddresesUTXOs","_x4","_bitcoindListUnspent","bitcoindListUnspent","getAddressStatus","_blockExplorerGetAddressStatus","blockExplorerGetAddressStatus","fetchFeeEstimate","_blockExplorerGetFeeEstimate","blockExplorerGetFeeEstimate","_x6","_bitcoindEstimateSmartFee","bitcoindEstimateSmartFee","broadcastTransaction","_x7","_blockExplorerBroadcastTransaction","blockExplorerBroadcastTransaction","_bitcoindSendRawTransaction","bitcoindSendRawTransaction","actionWrapper","numberedActionWrapper","wrappedNumberedActions","mapping","actionIndex","wrappedMapping","actionFunctionNames","actionFunctionName","actionType","ClientPicker","url_edited","connectError","connectSuccess","setUrl","handleUrlChange","setUrlError","validateUrl","setState","handleUsernameChange","setUsername","setUsernameError","validateUsername","handlePasswordChange","setPassword","setPasswordError","validatePassword","toggle","charAt","toUpperCase","Switch_Switch","testConnection","host","exec","pass","url_error","username_error","password_error","_this$state","publicNotes","TextField","fullWidth","helperText","privateNotes","wrappedActions","setStatus","WalletConfirmation","render","Table","TableHead","TableRow","TableCell","TableBody","renderConfirmationInfo","extendedPublicKeyImporters","importer","extendedPublicKey","quorum","UPDATE_DEPOSIT_NODE","UPDATE_CHANGE_NODE","RESET_NODES_SPEND","UPDATE_AUTO_SPEND","UPDATE_WALLET_NAME","UPDATE_WALLET_MODE","RESET_WALLET_VIEW","SPEND_NODES","WALLET_MODES","VIEW","DEPOSIT","SPEND","updateDepositNodeAction","updateChangeNodeAction","updateAutoSpendAction","resetWalletView","CHOOSE_PERFORM_SPEND","SET_INPUTS","ADD_OUTPUT","SET_OUTPUT_ADDRESS","SET_OUTPUT_AMOUNT","DELETE_OUTPUT","SET_FEE_RATE","SET_FEE","FINALIZE_OUTPUTS","RESET_OUTPUTS","SET_TXID","RESET_TRANSACTION","SET_IS_WALLET","SET_CHANGE_OUTPUT_INDEX","setInputs","setOutputAddress","setOutputAmount","amountString","setFeeRate","valueString","finalizeOutputs","finalized","Copyable","copied","timer","componentWillUnmount","clearTimeout","newline","children","stopPropagation","react_copy_to_clipboard_lib_default","onCopy","options","format","className","badge","FileCopy","fontSize","setTimeout","defaultProps","icon","depositTimer","WalletDeposit","amountError","showReceived","getDepositAddress","depositNode","updateDepositNode","setInterval","clearInterval","reduce","accumulator","currentValue","fetchedUTXOs","fetchUTXOsError","renderReceived","ml","handleAmountChange","decimal","qrString","_this$state2","components_Copyable","qrcode_react_lib_default","size","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","ContentProps","aria-describedby","wallet","deposits","nextNode","UTXOSet","renderInputs","confirmedStyle","styles","utxoTxid","unconfirmed","confirmedTitle","hover","blockExplorerTransactionURL","OpenInNew","inputsTotalSats","TableFooter","colSpan","MultisigDetails","renderScript","script","ops","scriptToOps","sm","redeemScript","witnessScript","align","blockExplorerAddressURL","Chip","networkLabel","multisigTotalSigners","Node","componentDidMount","generate","spend","walletMode","addressKnown","spending","Checkbox","handleSpend","isEqualTo","minUtxoDate","renderAddress","mintime","min","toConsumableArray","isNaN","Date","toLocaleDateString","addressContent","addressUsed","spent","Launch_default","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","ExpansionPanelDetails","components_MultisigDetails","isGreaterThan","Spend_UTXOSet","present","addNode","updateNode","updateAutoSpend","interval","ownProps","braid","nodes","transaction","info","BitcoindAddressImporter","imported","importError","rescan","addressesError","addressPresent","autoImport","checkAddress","handleRescan","_status","import","statusText","importCallback","_ref5","imports","scriptPubKey","timestamp","bitcoindImportMulti","responseError","c","prevProps","pluralOrSingularAddress","NodeSet","page","nodesPerPage","filterIncludeSpent","filterIncludeZeroBalance","orderBy","orderDir","unknownAddresses","sortAddresses","renderFilters","FormGroup","row","FormLabel","mr","filterAddresses","_this$setState","getUnknownAddressNodes","changeNodes","depositNodes","addressesImported","unknown","addr","addressStatus","updates","getNodeSet","_this$state3","nodeSet","sort","b","parseInt","reverse","amin","bmin","nodesObject","currentNode","renderNodes","_this$state4","startingIndex","nodesRows","whichOne","nodeRow","Wallet_Node","handlePageChange","selected","handleChangeRowsPerPage","pageCount","rowCount","generateAnotherPage","_this$state5","toggleChange","_this$state6","canLoad","useAddressImporter","components_BitcoindAddressImporter","style","tableLayout","width","TableSortLabel","active","TablePagination","count","rowsPerPage","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage","OutputEntry","addChangeAddress","changeNode","setAddress","setChangeOutput","handleBalance","renderChangeAdornment","changeOutputIndex","disable","endAdornment","InputAdornment","position","Tooltip","placement","AccountBalanceWallet_default","handleAddressChange","hasAddressError","addressError","setAmount","hasAmountError","isNotBalanceable","feeError","newAmount","autoBalancedAmount","validateOutputAmount","isBalanceable","hasBalanceError","balanceError","fee","outputTotalSats","feeSats","minus","balanceAction","hasError","handleDelete","remove","_this$props10","finalizedOutputs","placeholder","outputsFormInput","InputProps","Delete","OutputsForm","titleRef","createRef","feeRateFetchError","initialOutputState","scrollToTitle","componentDidUpdate","signatureImporters","k","current","scrollIntoView","behavior","renderOutputs","Spend_OutputEntry","inputsTotal","outputsAndFeeTotal","hasFeeRateFetchError","hasFeeRateError","feeRateError","hasFeeError","handleAddOutput","handleFeeRateChange","handleFeeChange","setFee","handleFinalize","handleReset","resetOutputs","getFeeEstimate","newFeeRate","finish","gatherSignaturesDisabled","outputAmount","ref","Speed","readOnly","TextSignatureImporter","signatureJSON","multiline","rows","handleChange","finalize","setError","parseError","validateAndSetSignature","QR_CODE_READER_DELAY","interaction","startText","messageFor","handleStart","react_qr_reader_lib_default","delay","onError","handleError","onScan","handleScan","facingMode","handleStop","onStart","onClear","onSuccess","errorMessage","MessagesList","maxHeight","overflow","dense","renderMessage","messageIcon","renderMessageBodyAndSubmessages","renderMessageBody","src","alt","Info","Warning","esm_Error","VersionTabPanel","_this2$props","currentVersion","role","hidden","aria-labelledby","InteractionMessages_MessagesList","filteredMessages","_this2$props2","InteractionMessages","_this3$filteredMessag","versions","Paper","square","Tabs","Tab","InteractionMessages_VersionTabPanel","newValue","_this3$props","excludeCodes","excludeCode","HermitSignatureImporter","classCallCheck","possibleConstructorReturn","signatureImporter","SignMultisigTransaction","keystore","disableChangeMethod","resetBIP32Path","bip32PathError","signatureError","src_components_InteractionMessages","messagesFor","handleBIP32PathChange","hasBIP32PathError","bip32PathIsDefault","Hermit_HermitDisplayer","request","Hermit_HermitReader","clear","signature","enableChangeMethod","validateAndSetBIP32Path","defaultBIP32Path","bip32PathFinalized","isSupported","HardwareWalletSignatureImporter","inConstructor","verified","ExportPublicKey","messageTextFor","renderAction","renderDeviceConfirmInfo","renderTargets","verifyError","sign","hasMessagesFor","setBIP32PathError","run","verifyPublicKey","publicKeyIndex","indexOf","signatureImporterNum","otherSignatureImporter","otherPublicKeyIndex","stateUpdate","EditableName","editing","newName","submit","Check","cancel","Clear","startEditing","Edit","setName","setSignatureImporterName","setSignatureImporterMethod","setSignatureImporterBIP32Path","setSignatureImporterPublicKeys","setSignatureImporterSignature","setSignatureImporterFinalized","setSignatureImporterComplete","TEXT","SignatureImporter","showUnsignedTransaction","getCurrent","components_EditableName","renderImport","notMyTurn","labelId","InputLabel","Select","handleMethodChange","MenuItem","renderImportByMethod","Spend_TextSignatureImporter","Spend_HermitSignatureImporter","Spend_HardwareWalletSignatureImporter","setMethod","reset","renderUnsignedTransaction","unsignedTransaction","handleHideUnsignedTransaction","handleShowUnsignedTransaction","setSignature","setPublicKeys","setFinalized","isWallet","multisigBIP32Root","multisigBIP32Path","setBIP32Path","errback","validateBIP32Path","renderSignature","inputsSignatures","setComplete","finalizedSignatureImporters","inputNumber","inputSignature","validateHex","validateMultisigSignature","finalizedSignatureImporterNum","finalizedSignatureImporter","Transaction","broadcasting","buildSignedTransaction","signedMultisigTransaction","handleBroadcast","setTxid","signedTransaction","transactionURL","signedTransactionHex","ExtendedPublicKeySelector","selection","renderKeySelectorMenu","renderSignatureImporter","Spend_SignatureImporter","handleKeyChange","renderKeySelectorMenuItems","extendedPublicKeyImporterNotUsed","extendedPublicKeyImporter","derivedKey","deriveChildPublicKey","importerIndex","extendedPublicKeys","extendedPublicKeyImporterNum","importMethod","WalletSign","handleCancel","renderKeySelectors","signaturesFinalized","Spend_Transaction","transactionFinalized","handleReturn","keySelectors","keySelectorNum","Wallet_ExtendedPublicKeySelector","renderSignatureImporters","every","spendNodes","updateChangeNode","changeAddress","resetTransaction","coinSelectTimer","WalletSpend","outputsAmount","feeAmount","renderSpend","autoSpend","handleSpendMode","Wallet_NodeSet","selectCoins","resetNodesSpend","coinSelection","sum","selectedInputs","selectedUtxo","nextProps","Spend_OutputsForm","Wallet_WalletSign","WalletView","MAX_TRAILING_EMPTY_NODES","MAX_FETCH_UTXOS_ERRORS","WalletControl","scrollRef","totalBalance","handleModeChange","indicatorColor","textColor","renderModeComponent","addressesAreLoaded","Wallet_WalletDeposit","Wallet_WalletSpend","Wallet_WalletView","progress","LinearProgress","trailingEmptyNodes","fetchUTXOsErrors","setMode","SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE","setExtendedPublicKeyImporterName","resetExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterMethod","setExtendedPublicKeyImporterExtendedPublicKey","setExtendedPublicKeyImporterFinalized","WalletGenerator","generating","extendedPublicKeyCount","toggleImporters","setImportersVisible","configuring","freeze","isChange","update","attemptToKeepGenerating","multisigUpdates","generateMultisig","extendedPublicKeyImporterNumber","utxoUpdates","generateMultisigFromPublicKeys","fetchUTXOs","generateNextNodeIfNecessary","allBIP32Paths","p1","p2","p1Segments","p2Segments","pathSegments","maxIndex","nextBIP32Path","setIsWallet","downloadWalletDetails","Wallet_WalletControl","Link","ConfirmWallet","updateAutoSpned","DEFAULT_BIP32_PATH","ExtendedPublicKeyExtendedPublicKeyImporter","setBIP32PathToDefault","extendedPublicKeyError","handleExtendedPublicKeyChange","hasExtendedPublicKeyError","validateAndSetExtendedPublicKey","deriveChildExtendedPublicKey","validateExtendedPublicKey","find","TextExtendedPublicKeyImporter","HermitExtendedPublicKeyImporter","walletState","bip32_path","HardwareWalletExtendedPublicKeyImporter","ExportExtendedPublicKey","Conflict","XPUB","ExtendedPublicKeyImporter","conversionMessage","Wallet_HardwareWalletExtendedPublicKeyImporter","Wallet_HermitExtendedPublicKeyImporter","Wallet_ExtendedPublicKeyExtendedPublicKeyImporter","Wallet_TextExtendedPublicKeyImporter","setExtendedPublicKey","moveUp","moveDown","renderBIP32Path","renderExtendedPublicKey","_this$props11","conversionAppend","NETWORKS","_this$props12","convertedPublicKey","convertAndValidateExtendedPublicKey","extendedPublicKeyImporterIndex","_this$props13","finalizedNetwork","hasConflict","conflict","conflictMessage","CreateAddress_Conflict","bip32","require","CreateWallet","showSettings","walletName","renderExtendedPublicKeyImporters","Wallet_WalletGenerator","renderSettings","components_QuorumPicker","components_AddressTypePicker","components_NetworkPicker","components_ClientPicker","right","toggleDrawer","Settings","Drawer","anchor","onClose","textAlign","display","Wallet_ExtendedPublicKeyImporter","walletDetailsText","walletDetailsFilename","extendedPublicKeyImporterBIP32Paths","extendedPublicKeyImporterBIP32Path","SORT_PUBLIC_KEY_IMPORTERS","UPDATE_MULTISIG_ADDRESS","setPublicKeyImporterName","resetPublicKeyImporterBIP32Path","setPublicKeyImporterBIP32Path","setPublicKeyImporterMethod","setPublicKeyImporterPublicKey","setPublicKeyImporterFinalized","movePublicKeyImporterUp","movePublicKeyImporterDown","AddressGenerator","publicKeyCount","isInConflict","publicKeyImporters","publicKeyImporter","publicKeysAreCanonicallySorted","sortedPublicKeys","canonicallySortPublicKeys","sortPublicKeyImporters","setMultisigAddress","publicKeyImporterNum","downloadAddressDetails","addressDetailsText","addressDetailsFilename","redeemScriptLine","witnessScriptLine","scriptsSpacer","publicKeyImporterBIP32Paths","publicKeyImporterBIP32Path","canonicallySorted","TextPublicKeyImporter","validateAndSetPublicKey","validatePublicKey","ExtendedPublicKeyPublicKeyImporter","enteredExtendedPublicKey","HermitPublicKeyImporter","publicKeyError","HardwareWalletPublicKeyImporter","PublicKeyImporter","ArrowUpward","ArrowDownward","CreateAddress_HardwareWalletPublicKeyImporter","CreateAddress_HermitPublicKeyImporter","CreateAddress_ExtendedPublicKeyPublicKeyImporter","CreateAddress_TextPublicKeyImporter","setPublicKey","renderPublicKey","publicKeyImporterIndex","CreateAddress","renderPublicKeyImporters","CreateAddress_AddressGenerator","renderClientPicker","CreateAddress_PublicKeyImporter","START_TEST_SUITE_RUN","SET_CURRENT_TEST_RUN","setCurrentTestRun","runIndex","SET_KEYSTORE","SET_KEYSTORE_NOTE","SET_KEYSTORE_STATUS","SET_ERROR_NOTIFICATION","CLEAR_ERROR_NOTIFICATION","setErrorNotification","START_TEST_RUN","END_TEST_RUN","RESET_TEST_RUN","SET_TEST_RUN_NOTE","TEST_RUN_MODE","NoteBase","setNote","testRunIndex","newNote","note","mapDispatchToKeystoreNoteProps","mapDispatchToTestRunNoteProps","KeystoreNote","TestRunNote","testSuiteRun","currentTestRunIndex","testRuns","KeystorePickerBase","setKeystore","handleVersionChange","GetMetadata","detectVersion","setKeystoreStatus","keystoreType","KeystorePicker","Test","createClass","description","expected","_actual","postprocess","thing","actual","diffChars","diffArrays","diffJSON","_run","matches","diff","SUCCESS","FAILURE","TestSuiteRunSummaryBase","environment","Bowser","getParser","userAgent","getOSName","getOSVersion","getBrowserName","getBrowserVersion","UNCHAINED_WALLETS_VERSION","keystoreName","subheader","renderTests","testRun","Divider","renderTestRun","button","testRunChooser","started","renderTestRunResult","test","moment","duration","endedAt","startedAt","asSeconds","Notes","MoreHoriz","ThumbUp","ThumbDown","CircularProgress","TestSuiteRunSummary","SPACEBAR_CODE","TestRunBase","addEventListener","handleKeyDown","removeEventListener","isLastTest","nextTest","keyCode","tagName","toLowerCase","start","renderInteractionMessages","testComplete","renderResult","startTestRun","endTestRun","handleResult","formatMessage","resetTestRun","formatOutput","formatDiffSegment","segment","diffSegmentClass","added","removed","TestRun","bip39Phrase","TEST_FIXTURES","SeedBase","renderSeedWord","word","Seed","LEFT_ARROW_CODE","UP_ARROW_CODE","RIGHT_ARROW_CODE","DOWN_ARROW_CODE","TestSuiteRunBase","currentTestIsActive","isFirstTest","previousTest","tag","startDisabled","TestSuiteRunSummary_TestSuiteRunSummary","renderBody","renderSetup","TestRun_TestRun","ArrowBack","ArrowForward","startTestSuiteRun","TestSuiteRun","CHOOSE_CONFIRM_OWNERSHIP","SET_OWNERSHIP_MULTISIG","RESET_PUBLIC_KEY_IMPORTER","RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_METHOD","SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY","ScriptEntry","scriptError","hasScriptError","hasFetchUTXOsError","scriptName","scriptTitle","substring","handleScriptChange","generateMultisigFromHex","renderDetails","chosePerformSpend","choseConfirmOwnership","buttonsDisabled","performSpend","confirmOwnership","choosePerformSpend","fetchUTXOsResult","isLessThanOrEqualTo","chooseConfirmOwnership","setOwnershipMultisig","autoFocus","ownership","chosen","ConfirmOwnership","renderConfirmation","GreenListItemIcon","styled","Check_default","Clear_default","Spend","Spend_ScriptEntry","Spend_ConfirmOwnership","spendable","addressFinalized","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","Navbar","classes","AppBar","Toolbar","logo","Footer","height","ErrorBoundary","errorInfo","mx","my","whiteSpace","componentStack","ErrorNotificationBase","clearErrorNotification","Close","ErrorNotification","errorNotification","App","CssBaseline","Container","maxWidth","components_Navbar","ErrorBoundary_ErrorBoundary","HashRouter","Switch","Route","Wallet","components_Footer","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","updateState","initialState","initialNodeState","spendingSats","newNodes","updatedState","nodeFoundWithValue","otherNode","getNextNode","braidReducer","resetSpend","getTime","initialExtendedPublicKeyImporterState","bip32PathModified","confliect","1","2","3","finalizedAddressType","updateExtendedPublicKeyImporterState","field","extendedPublicKeyImporterChange","newState","setConflict","updateImporterPaths","initialPublicKeyImporterState","updatePublicKeyImporterState","publicKeyImporterChange","initialSignatureImporterState","updateSignatureImporterState","signatureImporterChange","x","y","n","initialOutputsState","validateTransaction","isLessThan","absoluteValue","setFeeForRate","feeRateString","nout","estimateMultisigTransactionFee","numInputs","numOutputs","feesPerByteInSatoshis","ExportPublicKeyTest","pub","publicKeyTests","SignMultisigTransactionTest","outputAddress","outputAmountSats","total","unsignedMultisigTransaction","signingTests","transactions","fixture","ConfirmMultisigAddressTest","ConfirmMultisigAddress","addressTests","multisigs","segwit","SUITE","trezorTests","ledgerTests","hermitTests","initialTestRunState","testRunsForKeystore","supports","keystoreVersion","updatedTestRun","spendReducers","combineReducers","updateMultisig","keyResetState","updateInputs","newOutputs","validateAddress","outputIndex","updateOutputAddress","updateOutputAmount","deleteOutput","validateFeeRate","updateFeeRate","feeString","validateFee","estimateMultisigTransactionFeeRate","feesInSatoshis","updateFee","finalizeSignatureImporterState","walletReducers","resetWalletViews","rootReducers","updateNetwork","updateAddressType","stub","updateTotalSigners","updateFinalizedSettings","abovePublicKeyImporter","belowPublicKeyImporter","sortedPublicKeyImporters","publicKeyImportersChange","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","logger","ReduxPromise","thunk","ReactDOM","es","components_App","getElementById","process","origin","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","toHexString","_byte","inputString","satoshis","integerValue","ROUND_DOWN","shiftedBy","num","ZERO","networkData","feeMagicBtn","estimateMultisigP2SHTransactionVSize","config","baseSize","sigSize","estimateMultisigP2SH_P2WSHTransactionVSize","witnessSize","estimateMultisigP2WSHTransactionVSize","_len","_key","payments","p2ms","_networks","generateMultisigFromRedeemScript","multisigScriptHex","_p2sh_p2wsh","redeem","multisigScript","_p2sh","_p2wsh","_utils","p2sh","p2wsh","UnsupportedInteraction","KeystoreInteraction","LEVELS","STATES","_bowser","_KeystoreInteraction","_KeystoreInteraction2","direct","_KeystoreInteraction3","indirect","input1","input2","validateMultisigInputs","utxoIDs","validateMultisigInput","utxoID","validateTransactionID","validateTransactionIndex","indexString","isFinite","_paths","_keys","_script","_addresses","_fees","_signatures","_transactions","_multisig","_block_explorer","_fixtures","_inputs","_outputs","_exportNames","VERSION","DIRECT_KEYSTORES","INDIRECT_KEYSTORES","KEYSTORES","_trezor","_ledger","_hermit","_package","toASM","trim","magic_byte_regex","TESTNET_ADDRESS_MAGIC_BYTE_PATTERN","MAINNET_ADDRESS_MAGIC_BYTE_PATTERN","isBech32","BECH32_ADDRESS_MAGIC_BYTE_REGEX","address_regex","BECH32_ADDRESS_BODY_PATTERN","ADDRESS_BODY_PATTERN","_bitcoinAddressValidation","signerInputSignature","hash","hashForWitnessV0","SIGHASH_ALL","hashForSignature","multisigSignatureHash","signatureBuffer","encodedSignerInputSignatureBuffer","decodedSignerInputSignatureBuffer","_bip","s","rToUse","byteLength","set","multisigSignatureBuffer","signatureNoSighashType","publicKeyBuffer","keyPair","ECPair","fromPublicKey","validateOutputs","validateOutput","DUST_LIMIT_SATS","its","hardenedBIP32Index","HARDENING_OFFSET","pathString","splice","pathSegment","substr","bip32SequenceToPath","sequence","BIP32_PATH_REGEX","BIP32_HARDENED_PATH_REGEX","BIP32_UNHARDENED_PATH_REGEX","segmentStrings","segmentString","validateBIP32PathSegment","validateBIP32PathSegments","MAX_BIP32_HARDENED_NODE_INDEX","MAX_BIP32_NODE_INDEX","numberString","hardened","numberError","Number","extendedPublicKeyConvert","targetPrefix","preliminaryErrors","preExtendedPublicKeyValidation","networkError","requiredPrefix","notXpubError","prefix","extendedPublicKeyNetworkValidateion","extendedPublicKeyValidation","convertedExtendedPublicKey","_extendedPublicKeyValidation","pubkeyHex","_bitcoinjsLib","pubkeyBuffer","prefixBuffer","alloc","fromBase58","child","derivePath","toBase58","extendedPublicKeyVersions","bs58check","ypub","zpub","Ypub","Zpub","tpub","upub","vpub","Upub","Vpub","validatePrefix","prefixType","targetError","sourcePrefix","sourceError","extendedPublicKeyNoPrefix","extendedPublicKeyNewPrefix","xpubString","feeRateSatsPerVbyte","fr","MAX_FEE_RATE_SATS_PER_VBYTE","fs","MAX_FEE_SATS","dividedBy","estimateMultisigTransactionVSize","multipliedBy","transactionSignatures","transactionSignature","transactionSignatureIndex","fromHex","inputSignatures","requiredSignatures","inputSignaturesByPublicKey","sortedSignatures","witness","multisigWitnessField","setWitness","_witness","scriptSig","ins","_scriptSig","signersInputSignatures","signatureOps","inputScript","inputScriptBuffer","fromASM","multisigScriptSig","transactionBuilder","wit","blockExplorerURL","blockExplorerBaseURL","BASE_URL_MAINNET","BASE_URL_TESTNET","EXTENDED_PUBLIC_KEY_CONVERSIONS","RECEIVING_ADDRESSES","MULTISIGS","redeemScriptOps","scriptOps","witnessScriptOps","witnessScriptHex","multisigScriptOps","selectFirstUTXOFromEach","tests","unsortedBIP32Paths","unsortedPublicKeys","sortedUTXOs","sortedBIP32Paths","unsortedIndex","findIndex","otherUTXO","TRANSACTIONS","singleMultisigTransaction","m/45'/0'/0'","m/45'/0'/0'/0/0","m/45'/0'/4'","m/45'/0'/4'/0/0","m/45'/0'/4'/6/2","m/45'/0'/4'/99'","m/45'/0'/4'/99'/0/0","m/45'/0'/4'/99'/2147483647/3/1","m/45'/1'/0'/0/0","m/48'/0'/0'/1'/0/0","m/48'/1'/0'/1'/0/0","m/48'/0'/0'/2'/0/0","m/48'/1'/0'/2'/0/0","extendedPublicKeyConversions"],"mappings":"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","file":"static/js/main.43de6912.chunk.js","sourcesContent":["\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trezorCoin = trezorCoin;\nexports.TrezorConfirmMultisigAddress = exports.TrezorSignMultisigTransaction = exports.TrezorExportExtendedPublicKey = exports.TrezorExportPublicKey = exports.TrezorExportHDNode = exports.TrezorGetMetadata = exports.TrezorInteraction = exports.TREZOR = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.string.repeat\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.fill\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nvar _ADDRESS_SCRIPT_TYPES;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Constant defining Trezor interactions.\n *\n * @type {string}\n * @default trezor\n */\n\n\nvar TREZOR = 'trezor';\nexports.TREZOR = TREZOR;\n\nvar TrezorConnect = require(\"trezor-connect\")[\"default\"];\n\nvar ADDRESS_SCRIPT_TYPES = (_ADDRESS_SCRIPT_TYPES = {}, _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2SH, 'SPENDMULTISIG'), _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2SH_P2WSH, 'SPENDP2SHWITNESS'), _defineProperty(_ADDRESS_SCRIPT_TYPES, _unchainedBitcoin.P2WSH, 'SPENDWITNESS'), _ADDRESS_SCRIPT_TYPES);\n\ntry {\n  TrezorConnect.manifest({\n    email: \"help@unchained-capital.com\",\n    appUrl: \"https://github.com/unchained-capital/unchained-wallets\"\n  });\n} catch (e) {\n  // We hit this if we run this code outside of a browser, for example\n  // during unit testing.\n  console.error(\"Unable to call TrezorConnect.manifest.\");\n}\n/**\n * Base class for interactions with Trezor hardware wallets.\n *\n * Assumes we are using TrezorConnect to talk to the device.\n *\n * Subclasses *must* implement a method `this.connectParams` which\n * returns a 2-element array.  The first element of this array should\n * be a `TrezorConnect` method to use (e.g. -\n * `TrezorConnect.getAddress`).  The second element of this array\n * should be the parameters to pass to the given `TrezorConnect`\n * method.\n *\n * Errors thrown when calling TrezorConnect are not caught, so users\n * of this class (and its subclasses) should use `try...catch` as\n * always.\n *\n * Unsuccessful responses (the request succeeded but the Trezor device\n * returned an error message) are intercepted and thrown as errors.\n * This allows upstream `try...catch` blocks to intercept errors &\n * failures uniformly.\n *\n * Subclasses *may* implement the `parse(payload)` method which\n * accepts the response payload object and returns the relevant data.\n *\n * Subclasses will also want to implement a `messages()` method to\n * manipulate the messages returned to the user for each interaction.\n *\n * @extends {module:interaction.DirectKeystoreInteraction}\n * @example\n * import {TrezorInteraction} from \"unchained-wallets\";\n * // Simple subclass\n *\n * class SimpleTrezorInteraction extends TrezorInteraction {\n *\n *   constructor({network, param}) {\n *     super({network});\n *     this.param =  param;\n *   }\n *\n *   connectParams() {\n *     return [\n *       TrezorConnect.doSomething, // Not a real TrezorConnect function...\n *       {\n *         // Many Trezor methods require the `coin` parameter.  The\n *         // value of `this.trezorCoin` is set appropriately based on the\n *         // `network` provided in the constructor.\n *         coin: this.trezorCoin,\n *\n *         // Pass whatever arguments are required\n *         // by the TrezorConnect function being called.\n *         param: this.param,\n *         // ...\n *       }\n *     ];\n *   }\n *\n *   parse(payload) {\n *     return payload.someValue;\n *   }\n *\n * }\n *\n * // usage\n * import {MAINNET} from \"unchained-bitcoin\";\n * const interaction = new SimpleTrezorInteraction({network: MAINNET, param: \"foo\"});\n * const result = await interaction.run();\n * console.log(result); // someValue from payload\n */\n\n\nvar TrezorInteraction =\n/*#__PURE__*/\nfunction (_DirectKeystoreIntera) {\n  _inherits(TrezorInteraction, _DirectKeystoreIntera);\n  /**\n   * Trezor interactions require knowing the bitcoin network they are\n   * for.\n   *\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   */\n\n\n  function TrezorInteraction(_ref) {\n    var _this;\n\n    var network = _ref.network;\n\n    _classCallCheck(this, TrezorInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrezorInteraction).call(this));\n    _this.network = network;\n    _this.trezorCoin = trezorCoin(network);\n    return _this;\n  }\n  /**\n   * Default messages are added asking the user to plug in their\n   * Trezor device (`device.connect`) and about the TrezorConnect\n   * popups (`trezor.connect.generic`).\n   *\n   * Subclasses should override this method and add their own messages\n   * (don't forget to call `super()`).\n   *\n   * @returns {module:interaction.Message[]} messages\n   */\n\n\n  _createClass(TrezorInteraction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure your Trezor device is plugged in.\",\n        code: \"device.connect\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Your browser should open a new Trezor Connect window.  If you do not see this window, ensure you have enabled popups for this site.\",\n        code: \"trezor.connect.generic\"\n      });\n      return messages;\n    }\n    /**\n     * Awaits the call of `this.method`, passing in the output of\n     * `this.params()`.\n     *\n     * If the call returns but is unsuccessful (`result.success`) is\n     * false, will throw the returned error message.  If some other\n     * error is thrown, it will not be caught.\n     *\n     * Otherwise it returns the result of passing `result.payload` to\n     * `this.parse`.\n     *\n     * @returns {Promise}\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this$connectParams, _this$connectParams2, method, params, result;\n\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$connectParams = this.connectParams(), _this$connectParams2 = _slicedToArray(_this$connectParams, 2), method = _this$connectParams2[0], params = _this$connectParams2[1];\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(method(params));\n\n            case 3:\n              result = _context.sent;\n\n              if (result.success) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error(result.payload.error);\n\n            case 6:\n              return _context.abrupt(\"return\", this.parse(result.payload));\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\n     * Override this method in a subclass to return a 2-element array.\n     *\n     * The first element should be a functin to call, typically a\n     * `TrezorConnect` method, e.g. `TrezorConnect.getAddress`.\n     *\n     * The second element should be the parameters to pass to this\n     * function.\n     *\n     * By default, the function passed just throws an error.\n     *\n     * @returns {Array<function,Object>}\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [function (params) {\n        throw new Error(\"Override the `connectParams` method on a subclass of TrezorInteraction.\");\n      }, {}];\n    }\n    /**\n     * Override this method in a subclass to parse the payload of a\n     * successful response from the device.\n     *\n     * By default, the entire payload is returned.\n     *\n     * @param {Object} payload\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      return payload;\n    }\n  }]);\n\n  return TrezorInteraction;\n}(_interaction.DirectKeystoreInteraction);\n/**\n * Returns metadata about Trezor device.\n *\n * Includes model name, device label, firmware version, &\n * PIN/passphrase enablement.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {TrezorGetMetadata} from \"unchained-wallets\";\n * const interaction = new TrezorGetMetadata();\n * const result = await interaction.run();\n * console.log(result);\n * {\n *   spec: \"Model 1 v1.8.3 w/PIN\",\n *   model: \"Model 1\",\n *   version: {\n *     major: 1,\n *     minor: 8,\n *     patch: 3,\n *     string: \"1.8.3\",\n *   },\n *   label: \"My Trezor\",\n *   pin: true,\n *   passphrase: false,\n * }\n */\n\n\nexports.TrezorInteraction = TrezorInteraction;\n\nvar TrezorGetMetadata =\n/*#__PURE__*/\nfunction (_TrezorInteraction) {\n  _inherits(TrezorGetMetadata, _TrezorInteraction);\n  /**\n   * This class doesn't actually require a `network`.\n   *\n   * @constructor\n   */\n\n\n  function TrezorGetMetadata() {\n    _classCallCheck(this, TrezorGetMetadata);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorGetMetadata).call(this, {}));\n  }\n  /**\n   * It is underdocumented, but TrezorConnect does support the\n   * `getFeatures` API call.\n   *\n   * See {@link https://github.com/trezor/connect/blob/v8/src/js/core/methods/GetFeatures.js}.\n   *\n   * @returns {Array<function, Object>}\n   */\n\n\n  _createClass(TrezorGetMetadata, [{\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getFeatures, {}];\n    }\n    /**\n     * Parses Trezor device featuress into an appropriate metadata\n     * shape.\n     *\n     * @param {Object} payload\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      // Example result:\n      //\n      // {\n      //   bootloader_hash: \"5112...846e9\"\n      //   bootloader_mode: null\n      //   device_id: \"BDF9...F198\"\n      //   firmware_present: null\n      //   flags: 0\n      //   fw_major: null\n      //   fw_minor: null\n      //   fw_patch: null\n      //   fw_vendor: null\n      //   fw_vendor_keys: null\n      //   imported: false\n      //   initialized: true\n      //   label: \"My Trezor\"\n      //   language: null\n      //   major_version: 1\n      //   minor_version: 6\n      //   model: \"1\"\n      //   needs_backup: false\n      //   no_backup: null\n      //   passphrase_cached: false\n      //   passphrase_protection: false\n      //   patch_version: 3\n      //   pin_cached: true\n      //   pin_protection: true\n      //   revision: \"ef8...862d7\"\n      //   unfinished_backup: null\n      //   vendor: \"bitcointrezor.com\"\n      // }\n      var major_version = payload.major_version,\n          minor_version = payload.minor_version,\n          patch_version = payload.patch_version,\n          label = payload.label,\n          model = payload.model,\n          pin_protection = payload.pin_protection,\n          passphrase_protection = payload.passphrase_protection;\n      var spec = \"Model \".concat(model, \" v.\").concat(major_version, \".\").concat(minor_version, \".\").concat(patch_version);\n\n      if (pin_protection) {\n        spec += \" w/PIN\";\n      }\n\n      if (passphrase_protection) {\n        spec += \" w/PASS\";\n      }\n\n      return {\n        spec: spec,\n        model: \"Model \".concat(model),\n        version: {\n          major: major_version,\n          minor: minor_version,\n          patch: patch_version,\n          string: \"\".concat(major_version, \".\").concat(minor_version, \".\").concat(patch_version)\n        },\n        label: label,\n        pin: pin_protection,\n        passphrase: passphrase_protection\n      };\n    }\n  }]);\n\n  return TrezorGetMetadata;\n}(TrezorInteraction);\n/**\n * Base class for interactions exporting information about an HD node\n * at a given BIP32 path.\n *\n * You may want to use `TrezorExportPublicKey` or\n * `TrezorExportExtendedPublicKey` directly.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportHDNode} from \"unchained-wallets\";\n * const interaction = new TrezorExportHDNode({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const node = await interaction.run();\n * console.log(node); // {publicKey: \"\", xpub: \"\", ...}\n *\n */\n\n\nexports.TrezorGetMetadata = TrezorGetMetadata;\n\nvar TrezorExportHDNode =\n/*#__PURE__*/\nfunction (_TrezorInteraction2) {\n  _inherits(TrezorExportHDNode, _TrezorInteraction2);\n  /**\n   * Requires a BIP32 path to the node to export as well as which network.\n   *\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {string} [bip32Path] - the BIP32 path from which to retrieve a single public key.  Note, you must provide either the bip32Path or the bip32Paths argument.\n   * @param {Array<string>} [bip32Paths] - the BIP32 path from which to retrieve a multiple public keys   */\n\n\n  function TrezorExportHDNode(_ref2) {\n    var _this2;\n\n    var network = _ref2.network,\n        bip32Path = _ref2.bip32Path,\n        bip32Paths = _ref2.bip32Paths;\n\n    _classCallCheck(this, TrezorExportHDNode);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportHDNode).call(this, {\n      network: network\n    }));\n    _this2.bip32Paths = bip32Paths || [bip32Path];\n    return _this2;\n  }\n  /**\n   * Adds messages related to warnings Trezor devices make depending\n   * on the BIP32 path passed.\n   *\n   * @returns {module:interaction.Message[]}\n   */\n\n\n  _createClass(TrezorExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorExportHDNode.prototype), \"messages\", this).call(this);\n\n      for (var i = 0; i < this.bip32Paths.length; i++) {\n        var bip32Path = this.bip32Paths[i];\n        var bip32PathSegments = (bip32Path || '').split('/');\n\n        if (bip32PathSegments.length < 4) {\n          // m, 45', 0', 0', ...\n          messages.push({\n            state: _interaction.PENDING,\n            level: _interaction.ERROR,\n            text: \"BIP32 path must be at least depth 3.\",\n            code: \"trezor.bip32_path.minimum\"\n          });\n          break;\n        } else {\n          var coinPath = bip32PathSegments[2];\n\n          if (this.network === _unchainedBitcoin.MAINNET) {\n            if (!coinPath.match(/^0'/)) {\n              messages.push({\n                state: _interaction.PENDING,\n                level: _interaction.WARNING,\n                text: \"On Trezor model T the screen may display a 'Confirm path' warning message.\",\n                code: \"trezor.bip32_path.mismatch\"\n              });\n              break;\n            }\n          }\n\n          if (this.network === _unchainedBitcoin.TESTNET) {\n            if (!coinPath.match(/^1'/)) {\n              messages.push({\n                state: _interaction.PENDING,\n                level: _interaction.WARNING,\n                text: \"On Trezor model T the screen may display a 'Confirm path' warning message.\",\n                code: \"trezor.bip32_path.mismatch\"\n              });\n              break;\n            }\n          }\n        }\n      }\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Export public key'.  You may be prompted to enter your PIN.\",\n        code: \"trezor.connect.export_hdnode\"\n      });\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/getPublicKey.md}.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getPublicKey, this.bip32Paths.length === 1 ? {\n        path: this.bip32Paths[0],\n        coin: this.trezorCoin,\n        crossChain: true\n      } : {\n        bundle: this.bip32Paths.map(function (bip32path) {\n          return {\n            path: bip32path\n          };\n        }),\n        coin: this.trezorCoin,\n        crossChain: true\n      }];\n    }\n  }]);\n\n  return TrezorExportHDNode;\n}(TrezorInteraction);\n/**\n * Returns the public key at a given BIP32 path.\n *\n * @extends {module:trezor.TrezorExportHDNode}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportPublicKey} from \"unchained-wallets\";\n * const interaction = new TrezorExportPublicKey({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const publicKey = await interaction.run();\n * console.log(publicKey);\n * // \"03...\"\n */\n\n\nexports.TrezorExportHDNode = TrezorExportHDNode;\n\nvar TrezorExportPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode) {\n  _inherits(TrezorExportPublicKey, _TrezorExportHDNode);\n\n  function TrezorExportPublicKey() {\n    _classCallCheck(this, TrezorExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportPublicKey, [{\n    key: \"parse\",\n\n    /**\n     * Parses the public key from the HD node response.\n     *\n     * @param {object} payload\n     * @returns {string} the (compressed) public key in hex\n     */\n    value: function parse(payload) {\n      if (Array.isArray(payload)) {\n        return payload.map(function (key) {\n          return key.publicKey;\n        });\n      }\n\n      return payload.publicKey;\n    }\n  }]);\n\n  return TrezorExportPublicKey;\n}(TrezorExportHDNode);\n/**\n * Returns the extended public key at a given BIP32 path.\n *\n * @extends {module:trezor.TrezorExportHDNode}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {TrezorExportExtendedPublicKey} from \"unchained-wallets\";\n * const interaction = new TrezorExportExtendedPublicKey({network: MAINNET, bip32Path: \"m/48'/0'/0'\"});\n * const xpub = await interaction.run();\n * console.log(xpub);\n * // \"xpub...\"\n */\n\n\nexports.TrezorExportPublicKey = TrezorExportPublicKey;\n\nvar TrezorExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_TrezorExportHDNode2) {\n  _inherits(TrezorExportExtendedPublicKey, _TrezorExportHDNode2);\n\n  function TrezorExportExtendedPublicKey() {\n    _classCallCheck(this, TrezorExportExtendedPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TrezorExportExtendedPublicKey).apply(this, arguments));\n  }\n\n  _createClass(TrezorExportExtendedPublicKey, [{\n    key: \"parse\",\n\n    /**\n     * Parses the extended public key from the HD node response.\n     *\n     * @param {object} payload\n     * @returns {string} the extended public key\n     */\n    value: function parse(payload) {\n      return payload.xpub;\n    }\n  }]);\n\n  return TrezorExportExtendedPublicKey;\n}(TrezorExportHDNode);\n/**\n * Returns a signature for a bitcoin transaction with inputs from one\n * or many multisig addresses.\n *\n * - `inputs` is an array of `UTXO` objects from `unchained-bitcoin`\n * - `outputs` is an array of `TransactionOutput` objects from `unchained-bitcoin`\n * - `bip32Paths` is an array of (`string`) BIP32 paths, one for each input, identifying the path on this device to sign that input with\n *\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {TrezorSignMultisigTransaction} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = new TrezorSignMultisigTransaction({\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n * @extends {module:trezor.TrezorInteraction}\n */\n\n\nexports.TrezorExportExtendedPublicKey = TrezorExportExtendedPublicKey;\n\nvar TrezorSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_TrezorInteraction3) {\n  _inherits(TrezorSignMultisigTransaction, _TrezorInteraction3);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {UTXO[]} options.inputs - inputs for the transaction\n   * @param {TransactionOutput[]} options.outputs - outputs for the transaction\n   * @param {string[]} options.bip32Paths - BIP32 paths on this device to sign with, one per each input\n   */\n\n\n  function TrezorSignMultisigTransaction(_ref3) {\n    var _this3;\n\n    var network = _ref3.network,\n        inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, TrezorSignMultisigTransaction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorSignMultisigTransaction).call(this, {\n      network: network\n    }));\n    _this3.inputs = inputs;\n    _this3.outputs = outputs;\n    _this3.bip32Paths = bip32Paths;\n    return _this3;\n  }\n  /**\n   * Adds messages describing the signing flow.\n   *\n   * @returns {module:interaction.Message[]}\n   */\n\n\n  _createClass(TrezorSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorSignMultisigTransaction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Confirm in the Trezor Connect window that you want to 'Sign \".concat(this.network, \" transaction'.  You may be prompted to enter your PIN.\"),\n        code: \"trezor.connect.sign\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"You Trezor device will ask you to confirm each output address above with its corresponding output amount.  Check each address and amount carefully against both the values displayed in this application and your own expectations.\",\n        code: \"trezor.signing.outputs\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Finally, your Trezor device will ask you to confirm the overall transaction output amount and fee.  Check both carefully against both the values displayed in this application and your own expectations.\",\n        code: \"trezor.signing.final\"\n      });\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/signTransaction.md}.\n     *\n     * @returns {Array<function, Object>}\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      var _this4 = this;\n\n      return [TrezorConnect.signTransaction, {\n        inputs: this.inputs.map(function (input, inputIndex) {\n          return trezorInput(input, _this4.bip32Paths[inputIndex]);\n        }),\n        outputs: this.outputs.map(function (output) {\n          return trezorOutput(output);\n        }),\n        coin: this.trezorCoin\n      }];\n    }\n    /**\n     * Parses the signature out of the response payload.\n     *\n     * @param {Object} payload\n     * @returns {string[]} signature -- one signature per input\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(payload) {\n      return payload.signatures;\n    }\n  }]);\n\n  return TrezorSignMultisigTransaction;\n}(TrezorInteraction);\n/**\n * Shows a multisig address on the device and prompts the user to\n * confirm it.\n *\n * @extends {module:trezor.TrezorInteraction}\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {TrezorConfirmMultisigAddress} from \"unchained-wallets\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\");\n * const interaction = new TrezorConfirmMultisigAddress({network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0/\", multisig});\n * await interaction.run();\n */\n\n\nexports.TrezorSignMultisigTransaction = TrezorSignMultisigTransaction;\n\nvar TrezorConfirmMultisigAddress =\n/*#__PURE__*/\nfunction (_TrezorInteraction4) {\n  _inherits(TrezorConfirmMultisigAddress, _TrezorInteraction4);\n  /**\n   * Most of the information required to confirm a multisig address\n   * lives in the `Multisig` object from `unchained-bitcoin`.\n   *\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {string} options.bip32Path - BIP32 path to the public key on this device used in the multisig address\n   * @param {Multisig} options.multisig - multisig object\n   */\n\n\n  function TrezorConfirmMultisigAddress(_ref4) {\n    var _this5;\n\n    var network = _ref4.network,\n        bip32Path = _ref4.bip32Path,\n        multisig = _ref4.multisig;\n\n    _classCallCheck(this, TrezorConfirmMultisigAddress);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(TrezorConfirmMultisigAddress).call(this, {\n      network: network\n    }));\n    _this5.bip32Path = bip32Path;\n    _this5.multisig = multisig;\n    return _this5;\n  }\n  /**\n   * Adds messages about BIP32 path warnings.\n   *\n   */\n\n\n  _createClass(TrezorConfirmMultisigAddress, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(TrezorConfirmMultisigAddress.prototype), \"messages\", this).call(this); // FIXME add messages!\n\n\n      return messages;\n    }\n    /**\n     * See {@link https://github.com/trezor/connect/blob/v8/docs/methods/getAddress.md}.\n     *\n     * @returns {Array<function, Object>}\n     */\n\n  }, {\n    key: \"connectParams\",\n    value: function connectParams() {\n      return [TrezorConnect.getAddress, {\n        path: this.bip32Path,\n        address: (0, _unchainedBitcoin.multisigAddress)(this.multisig),\n        showOnTrezor: true,\n        coin: this.trezorCoin,\n        crossChain: true,\n        multisig: {\n          m: (0, _unchainedBitcoin.multisigRequiredSigners)(this.multisig),\n          pubkeys: (0, _unchainedBitcoin.multisigPublicKeys)(this.multisig).map(function (publicKey) {\n            return trezorPublicKey(publicKey);\n          })\n        },\n        scriptType: ADDRESS_SCRIPT_TYPES[(0, _unchainedBitcoin.multisigAddressType)(this.multisig)]\n      }];\n    }\n  }]);\n\n  return TrezorConfirmMultisigAddress;\n}(TrezorInteraction);\n/**\n * Returns the Trezor API version of the given network.\n *\n * @param {string} network - bitcoin network\n * @returns {string}\n */\n\n\nexports.TrezorConfirmMultisigAddress = TrezorConfirmMultisigAddress;\n\nfunction trezorCoin(network) {\n  return network === _unchainedBitcoin.MAINNET ? \"Bitcoin\" : \"Testnet\";\n}\n\nfunction trezorInput(input, bip32Path) {\n  var requiredSigners = (0, _unchainedBitcoin.multisigRequiredSigners)(input.multisig);\n  var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n  var spendType = ADDRESS_SCRIPT_TYPES[addressType];\n  return {\n    script_type: spendType,\n    multisig: {\n      m: requiredSigners,\n      pubkeys: (0, _unchainedBitcoin.multisigPublicKeys)(input.multisig).map(function (publicKey) {\n        return trezorPublicKey(publicKey);\n      }),\n      signatures: Array(requiredSigners).fill('')\n    },\n    prev_hash: input.txid,\n    prev_index: input.index,\n    address_n: (0, _unchainedBitcoin.bip32PathToSequence)(bip32Path),\n    amount: (0, _bignumber[\"default\"])(input.amountSats).toString()\n  };\n}\n\nfunction trezorPublicKey(publicKey) {\n  return {\n    address_n: [],\n    node: {\n      // FIXME are all these 0's OK?\n      depth: 0,\n      child_num: 0,\n      fingerprint: 0,\n      chain_code: '0'.repeat(64),\n      public_key: publicKey\n    }\n  };\n}\n\nfunction trezorOutput(output) {\n  return {\n    amount: (0, _bignumber[\"default\"])(output.amountSats).toFixed(0),\n    address: output.address,\n    script_type: 'PAYTOADDRESS'\n  };\n}","\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerSignMultisigTransaction = exports.LedgerExportPublicKey = exports.LedgerGetMetadata = exports.LedgerBitcoinInteraction = exports.LedgerDashboardInteraction = exports.LedgerInteraction = exports.LEDGER_BOTH_BUTTONS = exports.LEDGER_RIGHT_BUTTON = exports.LEDGER_LEFT_BUTTON = exports.LEDGER = void 0;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.some\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.string.includes\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nvar _images = _interopRequireDefault(require(\"./images\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n/**\n * Constant defining Ledger interactions.\n *\n * @type {string}\n * @default ledger\n */\n\n\nvar LEDGER = 'ledger';\nexports.LEDGER = LEDGER;\n\nvar bitcoin = require('bitcoinjs-lib');\n\nvar TransportU2F = require(\"@ledgerhq/hw-transport-u2f\")[\"default\"];\n\nvar LedgerBtc = require(\"@ledgerhq/hw-app-btc\")[\"default\"];\n/**\n * Constant representing the action of pushing the left button on a\n * Ledger device.\n *\n * @type {string}\n * @default 'ledger_left_button'\n */\n\n\nvar LEDGER_LEFT_BUTTON = 'ledger_left_button';\n/**\n * Constant representing the action of pushing the right button on a\n * Ledger device.\n *\n * @type {string}\n * @default 'ledger_right_button'\n */\n\nexports.LEDGER_LEFT_BUTTON = LEDGER_LEFT_BUTTON;\nvar LEDGER_RIGHT_BUTTON = 'ledger_right_button';\n/**\n * Constant representing the action of pushing both buttons on a\n * Ledger device..\n *\n * @type {string}\n * @default 'ledger_both_buttons'\n */\n\nexports.LEDGER_RIGHT_BUTTON = LEDGER_RIGHT_BUTTON;\nvar LEDGER_BOTH_BUTTONS = 'ledger_both_buttons';\n/**\n * Base class for interactions with Ledger hardware wallets.\n *\n * Subclasses must implement their own `run()` method.  They may use\n * the `withTransport` and `withApp` methods to connect to the Ledger\n * API's transport or app layers, respectively.\n *\n * Errors are not caught, so users of this class (and its subclasses)\n * should use `try...catch` as always.\n *\n * @extends {module:interaction.DirectKeystoreInteraction}\n * @example\n * import {LedgerInteraction} from \"unchained-wallets\";\n * // Simple subclass\n *\n * class SimpleLedgerInteraction extends LedgerInteraction {\n *\n *   constructor({param}) {\n *     super({});\n *     this.param =  param;\n *   }\n *\n *   async run() {\n *     return await this.withApp(async (app, transport) => {\n *       return app.doSomething(this.param); // Not a real Ledger API call\n *     });\n *   }\n *\n * }\n *\n * // usage\n * const interaction = new SimpleLedgerInteraction({param: \"foo\"});\n * const result = await interaction.run();\n * console.log(result); // whatever value `app.doSomething(...)` returns\n *\n */\n\nexports.LEDGER_BOTH_BUTTONS = LEDGER_BOTH_BUTTONS;\n\nvar LedgerInteraction =\n/*#__PURE__*/\nfunction (_DirectKeystoreIntera) {\n  _inherits(LedgerInteraction, _DirectKeystoreIntera);\n\n  function LedgerInteraction() {\n    _classCallCheck(this, LedgerInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` messages at the `info` level about ensuring the\n     * device is plugged in (`device.connect`) and unlocked\n     * (`device.unlock`).  Adds an `active` message at the `info` level\n     * when communicating with the device (`device.active`).\n     *\n     * @return {module:interaction.Message[]}\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure your Ledger is plugged in.\",\n        code: \"device.connect\"\n      });\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure you have unlocked your Ledger.\",\n        code: \"device.unlock\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Communicating with Ledger...\",\n        code: \"device.active\"\n      });\n      return messages;\n    }\n    /**\n     * Can be called by a subclass during its `run()` method.\n     *\n     * Creates a transport layer connection and passes control to the\n     * `callback` function, with the transport API as the first argument\n     * to the function.\n     *\n     * See the [Ledger API]{@link https://github.com/LedgerHQ/ledgerjs} for general information or a [specific transport API]{@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-transport-u2f} for examples of API calls.\n     *\n     * @param {function} callback -- accepts a single parameter `transport`\n     * @example\n     * async run() {\n     *   return await this.withTransport(async (transport) => {\n     *     return transport.doSomething(); // Not a real Ledger transport API call\n     *   });\n     * }\n     */\n\n  }, {\n    key: \"withTransport\",\n    value: function withTransport(callback) {\n      var transport;\n      return _regeneratorRuntime.async(function withTransport$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(TransportU2F.create());\n\n            case 2:\n              transport = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(callback(transport));\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n    /**\n     * Can be called by a subclass during its `run()` method.\n     *\n     * Creates a transport layer connection, initializes a bitcoin app\n     * object, and passes control to the `callback` function, with the\n     * app API as the first argument to the function and the transport\n     * API as the second.\n     *\n     * See the [Ledger API]{@link https://github.com/LedgerHQ/ledgerjs} for genereal information or the [bitcoin app API]{@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc} for examples of API calls.\n     *\n     * @param {function} callback -- accepts two parameters, `app` and `transport`, which are the Ledger APIs for the bitcoin app and the transport layer, respectively.\n     * @example\n     * async run() {\n     *   return await this.withApp(async (app, transport) => {\n     *     return app.doSomething(); // Not a real Ledger bitcoin app API call\n     *   });\n     * }\n     */\n\n  }, {\n    key: \"withApp\",\n    value: function withApp(callback) {\n      return _regeneratorRuntime.async(function withApp$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.withTransport(function _callee(transport) {\n                var app;\n                return _regeneratorRuntime.async(function _callee$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        app = new LedgerBtc(transport);\n                        _context2.next = 3;\n                        return _regeneratorRuntime.awrap(callback(app, transport));\n\n                      case 3:\n                        return _context2.abrupt(\"return\", _context2.sent);\n\n                      case 4:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerInteraction;\n}(_interaction.DirectKeystoreInteraction);\n/**\n * Base class for interactions which must occur when the Ledger device\n * is not in any app but in the dashboard.\n *\n * @extends {module:ledger.LedgerInteraction}\n *\n */\n\n\nexports.LedgerInteraction = LedgerInteraction;\n\nvar LedgerDashboardInteraction =\n/*#__PURE__*/\nfunction (_LedgerInteraction) {\n  _inherits(LedgerDashboardInteraction, _LedgerInteraction);\n\n  function LedgerDashboardInteraction() {\n    _classCallCheck(this, LedgerDashboardInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerDashboardInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerDashboardInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` and `active` messages at the `info` level urging\n     * the user to be in the Ledger dashboard, not the bitcoin app\n     * (`ledger.app.dashboard`).\n     *\n     * @return {module:interaction.Message[]}\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerDashboardInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure you have the main Ledger dashboard open, NOT the Bitcoin app.\",\n        code: \"ledger.app.dashboard\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Make sure you have the main Ledger dashboard open, NOT the Bitcoin app.\",\n        code: \"ledger.app.dashboard\"\n      });\n      return messages;\n    }\n  }]);\n\n  return LedgerDashboardInteraction;\n}(LedgerInteraction);\n/**\n * Base class for interactions which must occur when the Ledger device\n * is open to the bitcoin app.\n *\n * @extends {module:ledger.LedgerInteraction}\n */\n\n\nexports.LedgerDashboardInteraction = LedgerDashboardInteraction;\n\nvar LedgerBitcoinInteraction =\n/*#__PURE__*/\nfunction (_LedgerInteraction2) {\n  _inherits(LedgerBitcoinInteraction, _LedgerInteraction2);\n\n  function LedgerBitcoinInteraction() {\n    _classCallCheck(this, LedgerBitcoinInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerBitcoinInteraction).apply(this, arguments));\n  }\n\n  _createClass(LedgerBitcoinInteraction, [{\n    key: \"messages\",\n\n    /**\n     * Adds `pending` and `active` messages at the `info` level urging\n     * the user to be in the bitcoin app (`ledger.app.bitcoin`).\n     *\n     * @return {module:interaction.Message[]}\n     */\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerBitcoinInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.PENDING,\n        level: _interaction.INFO,\n        text: \"Make sure you have the Bitcoin app open.\",\n        code: \"ledger.app.bitcoin\"\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        text: \"Make sure you have the Bitcoin app open.\",\n        code: \"ledger.app.bitcoin\"\n      });\n      return messages;\n    }\n  }]);\n\n  return LedgerBitcoinInteraction;\n}(LedgerInteraction);\n/**\n * Returns metadata about Ledger device.\n *\n * Includes model name, firmware & MCU versions.\n *\n * @extends {module:ledger.LedgerDashboardInteraction}\n * @example\n * import {LedgerGetMetadata} from \"unchained-wallets\";\n * const interaction = new LedgerGetMetadata();\n * const result = await interaction.run();\n * console.log(result);\n * {\n *   spec: \"Nano S v1.4.2 (MCU v1.7)\",\n *   model: \"Nano S\",\n *   version: {\n *     major: \"1\",\n *     minor: \"4\",\n *     patch: \"2\",\n *     string: \"1.4.2\",\n *   },\n *   mcuVersion: {\n *     major: \"1\",\n *     minor: \"7\",\n *     string: \"1.7\",\n *   }\n * }\n *\n */\n\n\nexports.LedgerBitcoinInteraction = LedgerBitcoinInteraction;\n\nvar LedgerGetMetadata =\n/*#__PURE__*/\nfunction (_LedgerDashboardInter) {\n  _inherits(LedgerGetMetadata, _LedgerDashboardInter);\n\n  function LedgerGetMetadata() {\n    _classCallCheck(this, LedgerGetMetadata);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerGetMetadata).apply(this, arguments));\n  }\n\n  _createClass(LedgerGetMetadata, [{\n    key: \"run\",\n    // FIXME entire implementation here is rickety AF.\n    value: function run() {\n      var _this = this;\n\n      return _regeneratorRuntime.async(function run$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(this.withTransport(function _callee2(transport) {\n                var rawResult;\n                return _regeneratorRuntime.async(function _callee2$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        transport.setScrambleKey('B0L0S');\n                        _context4.next = 3;\n                        return _regeneratorRuntime.awrap(transport.send(0xe0, 0x01, 0x00, 0x00));\n\n                      case 3:\n                        rawResult = _context4.sent;\n                        return _context4.abrupt(\"return\", _this.parseMetadata(rawResult));\n\n                      case 5:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 2:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\n     * Parses the binary data returned from the Ledger API call into a\n     * metadata object.\n     *\n     * @param {ByteArray} response\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"parseMetadata\",\n    value: function parseMetadata(response) {\n      try {\n        // From\n        //\n        //   https://github.com/LedgerHQ/ledger-live-common/blob/master/src/hw/getVersion.js\n        //   https://github.com/LedgerHQ/ledger-live-common/blob/master/src/hw/getDeviceInfo.js\n        //   https://git.xmr.pm/LedgerHQ/ledger-live-common/commit/9ffc75acfc7f1e9aa9101a32b3e7481770fb3b89\n        var PROVIDERS = {\n          \"\": 1,\n          das: 2,\n          club: 3,\n          shitcoins: 4,\n          ee: 5\n        };\n        var ManagerAllowedFlag = 0x08;\n        var PinValidatedFlag = 0x80;\n\n        var byteArray = _toConsumableArray(response);\n\n        var data = byteArray.slice(0, byteArray.length - 2);\n        var targetIdStr = Buffer.from(data.slice(0, 4));\n        var targetId = targetIdStr.readUIntBE(0, 4);\n        var seVersionLength = data[4];\n        var seVersion = Buffer.from(data.slice(5, 5 + seVersionLength)).toString();\n        var flagsLength = data[5 + seVersionLength];\n        var flags = Buffer.from(data.slice(5 + seVersionLength + 1, 5 + seVersionLength + 1 + flagsLength));\n        var mcuVersionLength = data[5 + seVersionLength + 1 + flagsLength];\n        var mcuVersion = Buffer.from(data.slice(7 + seVersionLength + flagsLength, 7 + seVersionLength + flagsLength + mcuVersionLength));\n\n        if (mcuVersion[mcuVersion.length - 1] === 0) {\n          mcuVersion = mcuVersion.slice(0, mcuVersion.length - 1);\n        }\n\n        mcuVersion = mcuVersion.toString();\n\n        if (!seVersionLength) {\n          seVersion = \"0.0.0\";\n          flags = Buffer.allocUnsafeSlow(0);\n          mcuVersion = \"\";\n        }\n\n        var isOSU = seVersion.includes(\"-osu\");\n        var version = seVersion.replace(\"-osu\", \"\");\n        var m = seVersion.match(/([0-9]+.[0-9]+)(.[0-9]+)?(-(.*))?/);\n\n        var _ref = m || [],\n            _ref2 = _slicedToArray(_ref, 5),\n            majMin = _ref2[1],\n            providerName = _ref2[4];\n\n        var providerId = PROVIDERS[providerName] || 1;\n        var isBootloader = (targetId & 0xf0000000) !== 0x30000000;\n        var flag = flags.length > 0 ? flags[0] : 0;\n        var managerAllowed = !!(flag & ManagerAllowedFlag);\n        var pin = !!(flag & PinValidatedFlag);\n\n        var _split = (version || '').split('.'),\n            _split2 = _slicedToArray(_split, 3),\n            majorVersion = _split2[0],\n            minorVersion = _split2[1],\n            patchVersion = _split2[2];\n\n        var _split3 = (mcuVersion || '').split('.'),\n            _split4 = _slicedToArray(_split3, 2),\n            mcuMajorVersion = _split4[0],\n            mcuMinorVersion = _split4[1]; // https://gist.github.com/TamtamHero/b7651ffe6f1e485e3886bf4aba673348\n        // +-----------------+------------+\n        // |    FirmWare     | Target ID  |\n        // +-----------------+------------+\n        // | Nano S <= 1.3.1 | 0x31100002 |\n        // | Nano S 1.4.x    | 0x31100003 |\n        // | Nano S 1.5.x    | 0x31100004 |\n        // |                 |            |\n        // | Blue 2.0.x      | 0x31000002 |\n        // | Blue 2.1.x      | 0x31000004 |\n        // | Blue 2.1.x V2   | 0x31010004 |\n        // |                 |            |\n        // | Nano X          | 0x33000004 |\n        // |                 |            |\n        // | MCU,any version | 0x01000001 |\n        // +-----------------+------------+\n        //\n        //  Order matters -- high to low minTargetId\n\n\n        var MODEL_RANGES = [{\n          minTargetId: 0x33000004,\n          model: \"Nano X\"\n        }, {\n          minTargetId: 0x31100002,\n          model: \"Nano S\"\n        }, {\n          minTargetId: 0x31100002,\n          model: \"Blue\"\n        }, {\n          minTargetId: 0x01000001,\n          model: \"MCU\"\n        }];\n        var model = 'Unknown';\n\n        if (targetId) {\n          for (var i = 0; i < MODEL_RANGES.length; i++) {\n            var range = MODEL_RANGES[i];\n\n            if (targetId >= range.minTargetId) {\n              model = range.model;\n              break;\n            }\n          }\n        }\n\n        var spec = \"\".concat(model, \" v\").concat(version, \" (MCU v\").concat(mcuVersion, \")\"); // if (pin) {\n        //   spec += \" w/PIN\";\n        // }\n\n        return {\n          spec: spec,\n          model: model,\n          version: {\n            major: majorVersion,\n            minor: minorVersion,\n            patch: patchVersion,\n            string: version\n          },\n          mcuVersion: {\n            major: mcuMajorVersion,\n            minor: mcuMinorVersion,\n            string: mcuVersion\n          } // pin,\n\n        };\n      } catch (e) {\n        console.error(e);\n        throw new Error(\"Unable to parse metadata from Ledger device.\");\n      }\n    }\n  }]);\n\n  return LedgerGetMetadata;\n}(LedgerDashboardInteraction);\n/**\n * Base class for interactions exporting information about an HD node\n * at a given BIP32 path.\n *\n * You may want to use `LedgerExportPublicKey` directly.\n *\n * @extends {module:ledger.LedgerBitcoinInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {LedgerExportHDNode} from \"unchained-wallets\";\n * const interaction = new LedgerExportHDNode({network: MAINNET, bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const node = await interaction.run();\n * console.log(node);\n */\n\n\nexports.LedgerGetMetadata = LedgerGetMetadata;\n\nvar LedgerExportHDNode =\n/*#__PURE__*/\nfunction (_LedgerBitcoinInterac) {\n  _inherits(LedgerExportHDNode, _LedgerBitcoinInterac);\n  /**\n   * Requires a valid BIP32 path to the node to export.\n   *\n   * @param {object} options\n   * @param {string} bip32Path - the BIP32 path for the HD node\n   */\n\n\n  function LedgerExportHDNode(_ref3) {\n    var _this2;\n\n    var bip32Path = _ref3.bip32Path,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, LedgerExportHDNode);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportHDNode).call(this));\n    _this2.bip32Paths = bip32Paths || [bip32Path];\n    return _this2;\n  }\n  /**\n   * Adds messages related to the warnings Ledger devices produce on various BIP32 paths.\n   *\n   * @returns {module:interaction.Message[]}\n   */\n\n\n  _createClass(LedgerExportHDNode, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerExportHDNode.prototype), \"messages\", this).call(this);\n\n      if (this.hasBIP32PathWarning()) {\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.WARNING,\n          version: \"<1.6.0\",\n          text: \"Your Ledger will display a \\\"WARNING!\\\" message.  It is safe to continue through the prompts till you see a bitcoin address.\",\n          code: \"ledger.path.warning\",\n          messages: [{\n            image: _images[\"default\"][LEDGER].warning,\n            text: \"Your Ledger will display a \\\"WARNING!\\\" message.\",\n            action: LEDGER_BOTH_BUTTONS\n          }, {\n            image: _images[\"default\"][LEDGER].derivationPathIsUnusualV1,\n            text: \"Your Ledger will display a message saying the \\\"derivation path is unusual\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }, {\n            image: _images[\"default\"][LEDGER].derivationPathV1,\n            text: \"Your Ledger will display the derivation path \".concat(this.bip32Paths[0], \".\"),\n            action: LEDGER_BOTH_BUTTONS\n          }, {\n            image: _images[\"default\"][LEDGER].rejectIfNotSureV1,\n            text: \"Your Ledger will ask if you to \\\"Reject if you're not sure\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }]\n        });\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.WARNING,\n          version: \">=1.6.0\",\n          text: \"Your Ledger will display a message saying \\\"derivation path is unusual\\\".  It is safe to continue through the prompts till you see a bitcoin address.\",\n          code: \"ledger.path.warning\",\n          messages: [{\n            text: \"Your Ledger will display a message about an unusual derivation path.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the derivation path \".concat(this.bip32Paths[0], \".\"),\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Reject if you're not sure\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Approve derivation path\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }]\n        });\n      }\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \"<1.6.0\",\n        text: \"Your Ledger will scroll a bitcoin address across its screen.\",\n        code: \"ledger.export.hdnode\",\n        image: _images[\"default\"][LEDGER].addressScrollV1,\n        action: LEDGER_RIGHT_BUTTON\n      });\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        version: \">=1.6.0\",\n        text: \"Your Ledger will display a bitcoin address in several parts.  Approve exporting the corresponding public key.\",\n        code: \"ledger.export.hdnode\",\n        messages: [{\n          text: \"Your Ledger will display a bitcoin address in several parts.\",\n          action: LEDGER_RIGHT_BUTTON\n        }, {\n          text: \"Your Ledger will ask you if want to \\\"Approve\\\" this request.\",\n          action: LEDGER_BOTH_BUTTONS\n        }]\n      });\n      return messages;\n    }\n    /**\n     * Returns whether or not the Ledger device will display a warning\n     * to the user about an unusual BIP32 path.\n     *\n     * A \"usual\" BIP32 path is exactly 5 segments long.  The segments\n     * have the following constraints:\n     *\n     * - Segment 1: Must be equal to `44'`\n     * - Segment 2: Can have any value\n     * - Segment 3: Must be between `0'` and `100'`\n     * - Segment 4: Must be equal to `0`\n     * - Segment 5: Must be between `0 and 50000`\n     *\n     * Any other kind of path is considered unusual and will trigger the\n     * warning.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasBIP32PathWarning\",\n    value: function hasBIP32PathWarning() {\n      // 0 -> 44'\n      // 1 -> anything\n      // 2 -> 0' - 100'\n      // 3 -> 0\n      // 4 -> 0 - 50000\n      return this.bip32Paths.some(function (bip32Path) {\n        var indices = (0, _unchainedBitcoin.bip32PathToSequence)(bip32Path); // FIXME  -- Error when calling `hardenedBIP32Index` here for some reason?\n        // const hardened0   = hardenedBIP32Index(0);\n        // const hardened44  = hardenedBIP32Index(44);\n        // const hardened100 = hardenedBIP32Index(100);\n\n        var hardeningOffset = Math.pow(2, 31);\n        var hardened0 = 0 + hardeningOffset;\n        var hardened44 = 44 + hardeningOffset;\n        var hardened100 = 100 + hardeningOffset;\n\n        if (indices.length !== 5) {\n          return true;\n        }\n\n        if (indices[0] !== hardened44) {\n          return true;\n        }\n\n        if (indices[2] < hardened0 || indices[2] > hardened100) {\n          return true;\n        }\n\n        if (indices[3] !== 0) {\n          return true;\n        }\n\n        if (indices[4] < 0 || indices[4] > 50000) {\n          return true;\n        }\n      });\n    }\n    /**\n     * See {@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc#getwalletpublickey}.\n     *\n     * @returns {object} the HD node object.\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this3 = this;\n\n      return _regeneratorRuntime.async(function run$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(this.withApp(function _callee3(app) {\n                return _regeneratorRuntime.async(function _callee3$(_context6) {\n                  while (1) {\n                    switch (_context6.prev = _context6.next) {\n                      case 0:\n                        _context6.next = 2;\n                        return _regeneratorRuntime.awrap(app.getWalletPublicKey(_this3.bip32Paths[0], {\n                          verify: true\n                        }));\n\n                      case 2:\n                        return _context6.abrupt(\"return\", _context6.sent);\n\n                      case 3:\n                      case \"end\":\n                        return _context6.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return LedgerExportHDNode;\n}(LedgerBitcoinInteraction);\n/**\n * Returns the public key at a given BIP32 path.\n *\n * @extends {module:ledger.LedgerExportHDNode}\n * @example\n * import {LedgerExportPublicKey} from \"unchained-wallets\";\n * const interaction = new LedgerExportPublicKey({bip32Path: \"m/48'/0'/0'/2'/0\"});\n * const publicKey = await interaction.run();\n * console.log(publicKey);\n * // \"03...\"\n */\n\n\nvar LedgerExportPublicKey =\n/*#__PURE__*/\nfunction (_LedgerExportHDNode) {\n  _inherits(LedgerExportPublicKey, _LedgerExportHDNode);\n\n  function LedgerExportPublicKey() {\n    _classCallCheck(this, LedgerExportPublicKey);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LedgerExportPublicKey).apply(this, arguments));\n  }\n\n  _createClass(LedgerExportPublicKey, [{\n    key: \"run\",\n\n    /**\n     * Parses out and compresses the public key from the response of\n     * `LedgerExportHDNode`.\n     *\n     * @returns {string} -- (compressed) public key in hex\n     */\n    value: function run() {\n      var _this4 = this;\n\n      var result;\n      return _regeneratorRuntime.async(function run$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(this.bip32Paths.length === 1)) {\n                _context9.next = 7;\n                break;\n              }\n\n              _context9.next = 3;\n              return _regeneratorRuntime.awrap(_get(_getPrototypeOf(LedgerExportPublicKey.prototype), \"run\", this).call(this));\n\n            case 3:\n              result = _context9.sent;\n              return _context9.abrupt(\"return\", this.parsePublicKey((result || {}).publicKey));\n\n            case 7:\n              if (!(this.bip32Paths.length > 1)) {\n                _context9.next = 13;\n                break;\n              }\n\n              _context9.next = 10;\n              return _regeneratorRuntime.awrap(this.withApp(function _callee4(app) {\n                var publicKeys, i, _result;\n\n                return _regeneratorRuntime.async(function _callee4$(_context8) {\n                  while (1) {\n                    switch (_context8.prev = _context8.next) {\n                      case 0:\n                        publicKeys = [];\n                        i = 0;\n\n                      case 2:\n                        if (!(i < _this4.bip32Paths.length)) {\n                          _context8.next = 10;\n                          break;\n                        }\n\n                        _context8.next = 5;\n                        return _regeneratorRuntime.awrap(app.getWalletPublicKey(_this4.bip32Paths[i], {\n                          verify: true\n                          /*i === 0*/\n\n                        }));\n\n                      case 5:\n                        _result = _context8.sent;\n                        publicKeys.push(_result.publicKey);\n\n                      case 7:\n                        i++;\n                        _context8.next = 2;\n                        break;\n\n                      case 10:\n                        return _context8.abrupt(\"return\", _this4.parsePublicKey(publicKeys));\n\n                      case 11:\n                      case \"end\":\n                        return _context8.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 10:\n              return _context9.abrupt(\"return\", _context9.sent);\n\n            case 13:\n              throw new Error(\"You must provide a bip32 path string or an array of bip32 paths\");\n\n            case 14:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\n     * Compress the given public key.\n     *\n     * @param {string} publicKeyResult - the uncompressed public key in hex\n     * @returns {string} - the compressed public key in hex\n     *\n     */\n\n  }, {\n    key: \"parsePublicKey\",\n    value: function parsePublicKey(publicKeyResult) {\n      if (publicKeyResult) {\n        try {\n          return this.bip32Paths.length === 1 ? (0, _unchainedBitcoin.compressPublicKey)(publicKeyResult) : publicKeyResult.map(function (result) {\n            return (0, _unchainedBitcoin.compressPublicKey)(result);\n          });\n        } catch (e) {\n          console.error(e);\n          throw new Error(\"Unable to compress public key from Ledger device.\");\n        }\n      } else {\n        throw new Error(\"Received no public key from Ledger device.\");\n      }\n    }\n  }]);\n\n  return LedgerExportPublicKey;\n}(LedgerExportHDNode);\n/**\n * Returns a signature for a bitcoin transaction with inputs from one\n * or many multisig addresses.\n *\n * - `inputs` is an array of `UTXO` objects from `unchained-bitcoin`\n * - `outputs` is an array of `TransactionOutput` objects from `unchained-bitcoin`\n * - `bip32Paths` is an array of (`string`) BIP32 paths, one for each input, identifying the path on this device to sign that input with\n *\n * @extends {module:ledger.LedgerBitcoinInteraction}\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {LedgerSignMultisigTransaction} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = new LedgerSignMultisigTransaction({\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n */\n\n\nexports.LedgerExportPublicKey = LedgerExportPublicKey;\n\nvar LedgerSignMultisigTransaction =\n/*#__PURE__*/\nfunction (_LedgerBitcoinInterac2) {\n  _inherits(LedgerSignMultisigTransaction, _LedgerBitcoinInterac2);\n  /**\n   * @param {object} options\n   * @param {string} options.network - bitcoin network\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n\n\n  function LedgerSignMultisigTransaction(_ref4) {\n    var _this5;\n\n    var network = _ref4.network,\n        inputs = _ref4.inputs,\n        outputs = _ref4.outputs,\n        bip32Paths = _ref4.bip32Paths;\n\n    _classCallCheck(this, LedgerSignMultisigTransaction);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(LedgerSignMultisigTransaction).call(this));\n    _this5.network = network;\n    _this5.inputs = inputs;\n    _this5.outputs = outputs;\n    _this5.bip32Paths = bip32Paths;\n    return _this5;\n  }\n  /**\n   * Adds messages describing the signing flow.\n   *\n   * @returns {module:interaction.Message[]}\n   */\n\n\n  _createClass(LedgerSignMultisigTransaction, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(LedgerSignMultisigTransaction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.WARNING,\n        code: \"ledger.sign.delay\",\n        text: \"Your Ledger device may take up to several minutes to process a transaction with many inputs.\",\n        preProcessingTime: this.preProcessingTime(),\n        postProcessingTime: this.postProcessingTime()\n      });\n\n      if (this.anySegwitInputs()) {\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \"<1.6.0\",\n          text: \"Your Ledger will ask you to \\\"Confirm transaction\\\" and display each output amount and address followed by the the fee amount.\",\n          action: LEDGER_RIGHT_BUTTON\n        });\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \">=1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"Your Ledger will ask you to \\\"Review transaction\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"For each output, your Ledger device will display the output amount...\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"...followed by the output address in several parts\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the transaction fees.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask you to \\\"Accept and send\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }]\n        });\n      } else {\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \"<1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"For each output, your Ledger will display the output amount and address for you to confirm.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Confirm the transaction\\\".  Due to a bug in the Ledger software, your device may display the transaction fee as \\\"UNKNOWN\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }]\n        });\n        messages.push({\n          state: _interaction.ACTIVE,\n          level: _interaction.INFO,\n          code: \"ledger.sign\",\n          version: \">=1.6.0\",\n          text: \"Confirm each output on your Ledger device and approve the transaction.\",\n          messages: [{\n            text: \"For each output, your Ledger will ask you to \\\"Review output\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the output amount.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will display the output address in several parts.\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Accept\\\" the output.\",\n            action: LEDGER_BOTH_BUTTONS\n          }, {\n            text: \"Your Ledger will ask if you want to \\\"Confirm the transaction\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Due to a bug in the Ledger software, your device will display the transaction fee as \\\"UNKNOWN\\\".\",\n            action: LEDGER_RIGHT_BUTTON\n          }, {\n            text: \"Your Ledger will ask you to \\\"Accept and send\\\".\",\n            action: LEDGER_BOTH_BUTTONS\n          }]\n        });\n      }\n\n      return messages;\n    }\n  }, {\n    key: \"preProcessingTime\",\n    value: function preProcessingTime() {\n      // FIXME\n      return 10;\n    }\n  }, {\n    key: \"postProcessingTime\",\n    value: function postProcessingTime() {\n      // FIXME\n      return 10;\n    }\n    /**\n     * See {@link https://github.com/LedgerHQ/ledgerjs/tree/master/packages/hw-app-btc#signp2shtransaction}.\n     *\n     * @returns {string[]} signature, one per input\n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this6 = this;\n\n      return _regeneratorRuntime.async(function run$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _regeneratorRuntime.awrap(this.withApp(function _callee5(app, transport) {\n                return _regeneratorRuntime.async(function _callee5$(_context10) {\n                  while (1) {\n                    switch (_context10.prev = _context10.next) {\n                      case 0:\n                        // FIXME: Explain the rationale behind this choice.\n                        transport.setExchangeTimeout(20000 * _this6.outputs.length);\n                        _context10.next = 3;\n                        return _regeneratorRuntime.awrap(app.signP2SHTransaction(_this6.ledgerInputs(app), _this6.ledgerKeysets(), _this6.ledgerOutputScriptHex(app), 0, // locktime, 0 is no locktime\n                        1, // sighash type, 1 is SIGHASH_ALL\n                        _this6.anySegwitInputs(), 1 // tx version\n                        ));\n\n                      case 3:\n                        return _context10.abrupt(\"return\", _context10.sent);\n\n                      case 4:\n                      case \"end\":\n                        return _context10.stop();\n                    }\n                  }\n                });\n              }));\n\n            case 2:\n              return _context11.abrupt(\"return\", _context11.sent);\n\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"ledgerInputs\",\n    value: function ledgerInputs(app) {\n      return this.inputs.map(function (input) {\n        var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n        var inputTransaction = app.splitTransaction(input.transactionHex, true); // FIXME: should the 2nd parameter here always be true?\n\n        var scriptFn = addressType === _unchainedBitcoin.P2SH ? _unchainedBitcoin.multisigRedeemScript : _unchainedBitcoin.multisigWitnessScript;\n        var scriptHex = (0, _unchainedBitcoin.scriptToHex)(scriptFn(input.multisig));\n        return [inputTransaction, input.index, scriptHex]; // can add sequence number for RBF as an additional element\n      });\n    }\n  }, {\n    key: \"ledgerKeysets\",\n    value: function ledgerKeysets() {\n      var _this7 = this;\n\n      return this.bip32Paths.map(function (bip32Path) {\n        return _this7.ledgerBIP32Path(bip32Path);\n      });\n    }\n  }, {\n    key: \"ledgerOutputScriptHex\",\n    value: function ledgerOutputScriptHex(app) {\n      // This seems like an inefficient way to achieve the final\n      // result...\n      var txTmp = new bitcoin.TransactionBuilder();\n      txTmp.setVersion(1);\n\n      if (this.network === _unchainedBitcoin.TESTNET) {\n        txTmp.network = bitcoin.networks.testnet;\n      }\n\n      for (var i = 0; i < this.outputs.length; i++) {\n        txTmp.addOutput(this.outputs[i].address, new _bignumber[\"default\"](this.outputs[i].amountSats).toNumber());\n      }\n\n      for (var j = 0; j < this.inputs.length; j++) {\n        txTmp.addInput(this.inputs[j].txid, this.inputs[j].index);\n      }\n\n      var txToSign = txTmp.buildIncomplete();\n      var txHex = txToSign.toHex();\n      var splitTx = app.splitTransaction(txHex, this.anySegwitInputs());\n      return app.serializeTransactionOutputs(splitTx).toString('hex');\n    }\n  }, {\n    key: \"ledgerBIP32Path\",\n    value: function ledgerBIP32Path(bip32Path) {\n      return bip32Path.split(\"/\").slice(1).join(\"/\");\n    }\n  }, {\n    key: \"anySegwitInputs\",\n    value: function anySegwitInputs() {\n      for (var i = 0; i < this.inputs.length; i++) {\n        var input = this.inputs[i];\n        var addressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n\n        if (addressType === _unchainedBitcoin.P2SH_P2WSH || addressType === _unchainedBitcoin.P2WSH) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return LedgerSignMultisigTransaction;\n}(LedgerBitcoinInteraction);\n\nexports.LedgerSignMultisigTransaction = LedgerSignMultisigTransaction;","export default {\n  \"ledger\": {\n    \"warning\": {\n      \"label\": \"Ledger screen displaying a `WARNING!` message.\",\n      \"mimeType\": \"image/png\",\n      \"data\": \"\"\n    },\n    \"derivationPathIsUnusualV1\": {\n      \"label\": \"Ledger screen displaying a message about an 'unusual path'.\",\n      \"mimeType\": \"image/png\",\n      \"data\": \"\"\n    },\n    \"derivationPathV1\": {\n      \"label\": \"Ledger screen displaying a derivation path.\",\n      \"mimeType\": \"image/png\",\n      \"data\": \"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\"\n    },\n    \"rejectIfNotSureV1\": {\n      \"label\": \"Ledger screen displaying a prompt about being sure.\",\n      \"mimeType\": \"image/png\",\n      \"data\": \"\"\n    },\n    \"addressScrollV1\": {\n      \"label\": \"Ledger screen displaying a bitcoin address.\",\n      \"mimeType\": \"image/png\",\n      \"data\": \"\"\n    }\n  }\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseHermitQRCodeData = parseHermitQRCodeData;\nexports.encodeHermitQRCodeData = encodeHermitQRCodeData;\nexports.HermitSignTransaction = exports.HermitExportExtendedPublicKey = exports.HermitExportPublicKey = exports.HermitDisplayer = exports.HermitReader = exports.HermitInteraction = exports.HERMIT = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.object.values\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.string.starts-with\");\n\nvar _hiBase = _interopRequireDefault(require(\"hi-base32\"));\n\nvar _pako = _interopRequireDefault(require(\"pako\"));\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _unchainedBitcoin = require(\"unchained-bitcoin\");\n\nvar _interaction = require(\"./interaction\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar HERMIT = 'hermit';\n/**\n * Parse the data from a Hermit-created QR-code.\n *\n * @param {string} encodedString - base32-encoded, gzipped, JSON data\n * @returns {object} the parsed data\n */\n\nexports.HERMIT = HERMIT;\n\nfunction parseHermitQRCodeData(encodedString) {\n  var errorPrefix = \"Unable to parse QR code\";\n\n  try {\n    var compressedBytes = _hiBase[\"default\"].decode.asBytes(encodedString);\n\n    try {\n      var json = _pako[\"default\"].inflate(compressedBytes, {\n        to: 'string'\n      });\n\n      try {\n        return JSON.parse(json);\n      } catch (e) {\n        throw new Error(\"\".concat(errorPrefix, \" (JSON parse error)\"));\n      }\n    } catch (e) {\n      if (e.message && e.message.startsWith(errorPrefix)) {\n        throw e;\n      } else {\n        throw new Error(\"\".concat(errorPrefix, \" (gzip decompression error)\"));\n      }\n    }\n  } catch (e) {\n    if (e.message && e.message.startsWith(errorPrefix)) {\n      throw e;\n    } else {\n      throw new Error(\"\".concat(errorPrefix, \" (Base32 decode error)\"));\n    }\n  }\n}\n/**\n * Encode the given `data` as a string to be put into a\n * Hermit-readable QR code.\n *\n * @param {object} data\n * @returns {string} base32-encoded, gzipped, JSON data\n */\n\n\nfunction encodeHermitQRCodeData(data) {\n  var errorPrefix = \"Unable to create QR code\";\n\n  try {\n    var jsonString = JSON.stringify(data);\n\n    try {\n      var compressedBytes = _pako[\"default\"].deflate(jsonString, {\n        gzip: true\n      });\n\n      try {\n        return _hiBase[\"default\"].encode(compressedBytes);\n      } catch (e) {\n        throw new Error(\"\".concat(errorPrefix, \" (Base32 encode error)\"));\n      }\n    } catch (e) {\n      if (e.message && e.message.startsWith(errorPrefix)) {\n        throw e;\n      } else {\n        throw new Error(\"\".concat(errorPrefix, \" (gzip compression error)\"));\n      }\n    }\n  } catch (e) {\n    if (e.message && e.message.startsWith(errorPrefix)) {\n      throw e;\n    } else {\n      throw new Error(\"\".concat(errorPrefix, \" (JSON encode error)\"));\n    }\n  }\n}\n\nfunction commandMessage(data) {\n  return _objectSpread({}, {\n    state: _interaction.PENDING,\n    level: _interaction.INFO,\n    code: \"hermit.command\",\n    mode: \"wallet\"\n  }, {}, {\n    text: \"\".concat(data.instructions, \" '\").concat(data.command, \"'\")\n  }, {}, data);\n}\n/**\n * Base class for interactions with Hermit.\n * \n * @extends {module:interaction.IndirectKeystoreInteraction}\n */\n\n\nvar HermitInteraction =\n/*#__PURE__*/\nfunction (_IndirectKeystoreInte) {\n  _inherits(HermitInteraction, _IndirectKeystoreInte);\n\n  function HermitInteraction() {\n    _classCallCheck(this, HermitInteraction);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(HermitInteraction).apply(this, arguments));\n  }\n\n  return HermitInteraction;\n}(_interaction.IndirectKeystoreInteraction);\n/**\n * Base class for interactions which read a QR code displayed by a\n * Hermit command.\n * \n * @extends {module:hermit.HermitInteraction}\n */\n\n\nexports.HermitInteraction = HermitInteraction;\n\nvar HermitReader =\n/*#__PURE__*/\nfunction (_HermitInteraction) {\n  _inherits(HermitReader, _HermitInteraction);\n\n  function HermitReader() {\n    var _this;\n\n    _classCallCheck(this, HermitReader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HermitReader).call(this));\n    _this.reader = true;\n    return _this;\n  }\n\n  _createClass(HermitReader, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitReader.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: _interaction.ACTIVE,\n        level: _interaction.INFO,\n        code: \"hermit.scanning\",\n        text: \"Scan Hermit QR code now.\"\n      });\n      return messages;\n    }\n  }]);\n\n  return HermitReader;\n}(HermitInteraction);\n/**\n * Base class for interactions which display data as a QR code for\n * Hermit to read and then read the QR code Hermit displays in\n * response.\n * \n * @extends {module:hermit.HermitInteraction}\n */\n\n\nexports.HermitReader = HermitReader;\n\nvar HermitDisplayer =\n/*#__PURE__*/\nfunction (_HermitReader) {\n  _inherits(HermitDisplayer, _HermitReader);\n\n  function HermitDisplayer() {\n    var _this2;\n\n    _classCallCheck(this, HermitDisplayer);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(HermitDisplayer).call(this));\n    _this2.displayer = true;\n    return _this2;\n  }\n\n  return HermitDisplayer;\n}(HermitReader);\n/**\n * Reads a public key from data in a Hermit QR code.\n * \n * @extends {module:hermit.HermitReader}\n * @example\n * const interaction = new HermitExportPublicKey();\n * const encodedString = readHermitQRCode(); // application dependent\n * const {pubkey, bip32Path} = interaction.parse(encoodedString);\n * console.log(pubkey);\n * // \"03...\"\n * console.log(bip32Path);\n * // \"m/45'/0'/0'/0/0\"\n */\n\n\nexports.HermitDisplayer = HermitDisplayer;\n\nvar HermitExportPublicKey =\n/*#__PURE__*/\nfunction (_HermitReader2) {\n  _inherits(HermitExportPublicKey, _HermitReader2);\n\n  function HermitExportPublicKey(_ref) {\n    var _this3;\n\n    var bip32Path = _ref.bip32Path;\n\n    _classCallCheck(this, HermitExportPublicKey);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportPublicKey).call(this));\n    _this3.bip32Path = bip32Path;\n    return _this3;\n  }\n\n  _createClass(HermitExportPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportPublicKey.prototype), \"messages\", this).call(this);\n\n      messages.push(commandMessage({\n        instructions: \"Run the following Hermit command, replacing the BIP32 path if you need to:\",\n        command: \"export-pub \".concat(this.bip32Path)\n      }));\n      return messages;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var xpub = result.xpub,\n          pubkey = result.pubkey,\n          bip32Path = result.bip32Path;\n\n      if (!pubkey) {\n        if (xpub) {\n          throw new Error(\"Make sure you export a plain public key and NOT an extended public key.\");\n        } else {\n          throw new Error(\"No public key in QR code.\");\n        }\n      }\n\n      if (!bip32Path) {\n        throw new Error(\"No BIP32 path in QR code.\");\n      }\n\n      return result;\n    }\n  }]);\n\n  return HermitExportPublicKey;\n}(HermitReader);\n/**\n * Reads an extended public key from data in a Hermit QR code.\n * \n * @extends {module:hermit.HermitReader}\n * @example\n * const interaction = new HermitExportExtendedPublicKey();\n * const encodedString = readHermitQRCode(); // application dependent\n * const {xpub, bip32Path} = interaction.parse(encoodedString);\n * console.log(xpub);\n * // \"xpub...\"\n * console.log(bip32Path);\n * // \"m/45'/0'/0'\"\n */\n\n\nexports.HermitExportPublicKey = HermitExportPublicKey;\n\nvar HermitExportExtendedPublicKey =\n/*#__PURE__*/\nfunction (_HermitReader3) {\n  _inherits(HermitExportExtendedPublicKey, _HermitReader3);\n\n  function HermitExportExtendedPublicKey(_ref2) {\n    var _this4;\n\n    var bip32Path = _ref2.bip32Path;\n\n    _classCallCheck(this, HermitExportExtendedPublicKey);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(HermitExportExtendedPublicKey).call(this));\n    _this4.bip32Path = bip32Path;\n    return _this4;\n  }\n\n  _createClass(HermitExportExtendedPublicKey, [{\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitExportExtendedPublicKey.prototype), \"messages\", this).call(this);\n\n      messages.push(commandMessage({\n        instructions: \"Run the following Hermit command, replacing the BIP32 path if you need to:\",\n        command: \"export-xpub \".concat(this.bip32Path)\n      }));\n      return messages;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var xpub = result.xpub,\n          pubkey = result.pubkey,\n          bip32Path = result.bip32Path;\n\n      if (!xpub) {\n        if (pubkey) {\n          throw new Error(\"Make sure you export an extended public key and NOT a plain public key.\");\n        } else {\n          throw new Error(\"No extended public key in QR code.\");\n        }\n      }\n\n      if (!bip32Path) {\n        throw new Error(\"No BIP32 path in QR code.\");\n      }\n\n      return result;\n    }\n  }]);\n\n  return HermitExportExtendedPublicKey;\n}(HermitReader);\n/**\n * Returns signature request data to display in a QR code for Hermit\n * and reads the signature data passed back by Hermit in another QR\n * code.\n *\n * NOTE: Transactions with inputs & outputs to non-P2SH addresses are not supported by Hermit.\n * \n * @extends {module:hermit.HermitDisplayer}\n * @example\n * const interaction = new HermitSignTransaction({inputs, outputs, bip32Paths});\n * console.log(interaction.request());\n * // \"IJQXGZI...\"\n * \n * // Display a QR code containing the above data to Hermit running\n * // `sign-bitcoin` and it will return another QR code which needs\n * // parsed.\n * const encodedString = readHermitQRCode(); // application dependent\n * const signatures = interaction.parse(encoodedString);\n * console.log(signatures);\n * // [\"ababa...\", ... ]\n * \n */\n\n\nexports.HermitExportExtendedPublicKey = HermitExportExtendedPublicKey;\n\nvar HermitSignTransaction =\n/*#__PURE__*/\nfunction (_HermitDisplayer) {\n  _inherits(HermitSignTransaction, _HermitDisplayer);\n  /**\n   *\n   * @param {object} options\n   * @param {array<object>} options.inputs - inputs for the transaction\n   * @param {array<object>} options.outputs - outputs for the transaction\n   * @param {array<string>} options.bip32Paths - BIP32 paths\n   */\n\n\n  function HermitSignTransaction(_ref3) {\n    var _this5;\n\n    var inputs = _ref3.inputs,\n        outputs = _ref3.outputs,\n        bip32Paths = _ref3.bip32Paths;\n\n    _classCallCheck(this, HermitSignTransaction);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(HermitSignTransaction).call(this));\n    _this5.inputs = inputs;\n    _this5.outputs = outputs;\n    _this5.bip32Paths = bip32Paths;\n    _this5.inputAddressType = '';\n    return _this5;\n  }\n\n  _createClass(HermitSignTransaction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return this.inputsAreSupported() && this.outputsAreSupported();\n    }\n  }, {\n    key: \"outputsAreSupported\",\n    value: function outputsAreSupported() {\n      if (this.outputs && this.outputs.length) {\n        for (var i = 0; i < this.outputs.length; i++) {\n          var output = this.outputs[i];\n\n          if (output.address.match(/^(tb|bc)/)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"inputsAreSupported\",\n    value: function inputsAreSupported() {\n      if (this.inputs && this.inputs.length) {\n        for (var i = 0; i < this.inputs.length; i++) {\n          var input = this.inputs[i];\n          var inputAddressType = (0, _unchainedBitcoin.multisigAddressType)(input.multisig);\n\n          if (inputAddressType !== _unchainedBitcoin.MULTISIG_ADDRESS_TYPES.P2SH) {\n            this.inputAddressType = inputAddressType;\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(HermitSignTransaction.prototype), \"messages\", this).call(this);\n\n      if (!this.inputsAreSupported()) {\n        messages.push({\n          statet: _interaction.UNSUPPORTED,\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.inputaddress\",\n          text: \"Unsupported input address type \".concat(this.inputAddressType, \", must be P2SH.\")\n        });\n      }\n\n      if (!this.outputsAreSupported()) {\n        messages.push({\n          state: _interaction.UNSUPPORTED,\n          level: _interaction.ERROR,\n          code: \"hermit.unsupported.outputaddress\",\n          text: \"Unsupported output address type. bech32 addresses are unsupported.\"\n        });\n      }\n\n      if (!this.inputsAreSupported() || !this.outputsAreSupported()) return messages;\n      messages.push(commandMessage({\n        instructions: \"Scan this QR code into Hermit by running the following command:\",\n        command: \"sign-bitcoin\"\n      }));\n      return messages;\n    }\n  }, {\n    key: \"request\",\n    value: function request() {\n      var data = this.signatureRequestData();\n      return encodeHermitQRCodeData(data);\n    }\n  }, {\n    key: \"signatureRequestData\",\n    value: function signatureRequestData() {\n      var hermitInputsByRedeemScript = {};\n\n      for (var i = 0; i < this.inputs.length; i++) {\n        var input = this.inputs[i];\n        var bip32Path = this.bip32Paths[i];\n        var redeemScriptHex = (0, _unchainedBitcoin.scriptToHex)((0, _unchainedBitcoin.multisigRedeemScript)(input.multisig));\n\n        if (!hermitInputsByRedeemScript[redeemScriptHex]) {\n          hermitInputsByRedeemScript[redeemScriptHex] = [redeemScriptHex, bip32Path];\n        }\n\n        hermitInputsByRedeemScript[redeemScriptHex].push({\n          txid: input.txid,\n          index: input.index,\n          amount: new _bignumber[\"default\"](input.amountSats).toNumber()\n        });\n      }\n\n      return {\n        inputs: Object.values(hermitInputsByRedeemScript),\n        outputs: this.outputs.map(function (output) {\n          return {\n            address: output.address,\n            amount: new _bignumber[\"default\"](output.amountSats).toNumber()\n          };\n        })\n      };\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(encodedString) {\n      var result = parseHermitQRCodeData(encodedString);\n      var signatures = result.signatures;\n\n      if (!signatures || signatures.length === 0) {\n        throw new Error(\"No signatures in QR code.\");\n      }\n\n      return signatures;\n    }\n  }]);\n\n  return HermitSignTransaction;\n}(HermitDisplayer);\n\nexports.HermitSignTransaction = HermitSignTransaction;","module.exports = __webpack_public_path__ + \"static/media/logo.66481e66.png\";","import React from \"react\";\nimport BigNumber from 'bignumber.js'\n\nexport function externalLink(url, text) {\n  return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{text}</a>;\n}\n\nexport function wrapText(text, columns) {\n  let lines   = [];\n  let index   = 0;\n  let element = 0;\n  while (index <= text.length) {\n    lines.push(<span key={element}>{text.slice(index, index += (columns || 64))}</span>);\n    lines.push(<br key={element + 1}/>);\n    element += 2;\n  }\n  return lines;\n}\n\nexport function validatePositiveInteger(numberString) {\n  if (numberString === null || numberString === undefined || numberString === '') {\n    return \"Cannot be blank.\";\n  }\n  const number = parseInt(numberString, 10);\n  if (Number.isNaN(number) || number.toString().length !== numberString.length || number <= 0) {\n    return \"Must be a positive whole number.\";\n  }\n\n  return '';\n\n}\n\nexport function downloadFile(body, filename) {\n  const blob = new Blob([body], {type: 'text/plain'});\n  if(window.navigator.msSaveOrOpenBlob) {\n    window.navigator.msSaveBlob(blob, filename);\n  }\n  else{\n      var elem = window.document.createElement('a');\n      elem.href = window.URL.createObjectURL(blob);\n      elem.download = filename;\n      document.body.appendChild(elem);\n      elem.click();\n      document.body.removeChild(elem);\n  }\n}\n\n/**\n * simple coin selection\n * @param {Array<object>} spendableInputs - available addresses with balanceSats property as a BigNumber\n * @param {BigNumber} outputTotal - how much is being spent including estimated fees\n * @returns {Array<object>} list of address objects meeting the outputTotal or all if insufficient.\n */\nexport function naiveCoinSelection(spendableInputs, outputTotal) {\n  let selectedUtxos = [];\n  let inputTotal = new BigNumber(0);\n  for (let inputIndex=0; inputIndex < spendableInputs.length; inputIndex++) {\n    const spendableInput = spendableInputs[inputIndex];\n    spendableInput.utxos.forEach(utxo => {\n      selectedUtxos.push({...utxo, multisig: spendableInput.multisig, bip32Path: spendableInput.bip32Path, change: spendableInput.change});\n    })\n    inputTotal = inputTotal.plus(spendableInput.balanceSats);\n    if (inputTotal.isGreaterThanOrEqualTo(outputTotal)) {\n      break;\n    }\n  }\n  return selectedUtxos;\n}\n","import React from 'react';\n\n// Components\nimport { Card, CardHeader, CardContent, } from \"@material-ui/core\";\n\nconst Disclaimer = () => (\n  <Card>\n    <CardHeader title=\"Disclaimer\"/>\n    <CardContent>\n      <small>\n        This application is in “alpha” state and is presented\n        for evaluation and testing only. It is provided “as is,”\n        and any express or implied warranties, including but not\n        limited to the implied warranties of merchantability and\n        fitness for a particular purpose, are disclaimed. By\n        using this application, you accept all risks of such\n        use, including full responsibility for any direct or\n        indirect loss of any kind resulting from the use of this\n        application, which may involve complete loss of any\n        Bitcoin or other coins associated with addresses used\n        with this application. In no event shall Unchained\n        Capital, Inc., its employees and affiliates, or\n        developers of this application be liable for any direct,\n        indirect, incidental, special, exemplary, or\n        consequential damages (including, but not limited to,\n        procurement of substitute goods or services; loss of\n        use, data, or profits; or business interruption) however\n        caused and on any theory of liability, whether in\n        contract, strict liability, or tort (including\n        negligence or otherwise) arising in any way out of the\n        use of this application, even if advised of the\n        possibility of such damage.\n      </small>\n        \n      </CardContent>\n    </Card>\n);\n\nexport default Disclaimer;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\n\n// Components\nimport {\n  Box, Typography, CardHeader, CardContent, Grid, Card, Button,\n  List, ListItem, ListItemText, ListItemIcon, CardActions,\n} from \"@material-ui/core\";\nimport {Description, GitHub, YouTube, BugReport} from \"@material-ui/icons\";\nimport Disclaimer from \"./Disclaimer\";\n\nconst Help = () => (\n  <div>\n\n    <Box mt={4} mb={2}>\n      <Typography variant=\"h2\">Welcome to Caravan!</Typography>\n    </Box>\n\n    <Grid container spacing={3}>\n\n      <Grid container item md={8} spacing={2} direction=\"column\">\n\n        <Grid item>\n          <Card>\n\n            <CardHeader title=\"Stateless Multisig Coordinator\"/>\n\n            <CardContent>\n\n              <p>\n                Caravan is making bitcoin <strong>multisig</strong> custody easier and safer through transparency and standards.\n              </p>\n\n              <p>\n                Caravan is a <strong>coordination</strong> software.  It connects to a source of consensus and your keys to build and interact with multisig bitcoin addresses.\n              </p>\n\n              <p>Caravan is also <strong>stateless</strong>.  It does not itself store any data.  You must safekeep the addresses (and redeem scripts & BIP32 paths) you create.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keys\"/>\n            <CardContent>\n\n              <p>All bitcoin is ultimately protected by private keys.</p>\n\n              <p>Your private key may live on a piece of paper, a hardware wallet, some software on a laptop, or even just in your mind.  Caravan, being stateless, cannot store your private key but it can talk to hardware devices or software applications which do.</p>\n\n              <p>Caravan supports entering public keys and signatures via text, so any wallet which can export such data can be made compatible with Caravan.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Consensus\"/>\n            <CardContent>\n\n              <p>In order to look up address balances and broadcast transactions, Caravan requires knowledge of the constantly changing bitcoin network.</p>\n\n              <p>Running a full bitcoin node is the best way to determine the current state of the bitcoin network.  Caravan can be easily configured to use your own bitcoin node for consensus information and broadcasting transactions.</p>\n\n              <p>If you don't want to or cannot run your own full node, Caravan defaults to using the freely available API at <code>blockstream.info</code>.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n      </Grid>\n\n      <Grid container item md={4} spacing={4} direction=\"column\">\n\n        <Grid item>\n\n          <Card>\n            <CardHeader title=\"Learn More\"></CardHeader>\n            <CardContent>\n\n              <List>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <Description />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.unchained-capital.com/blog/the-caravan-arrives/\", \"Blog Post\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <YouTube />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.youtube.com/playlist?list=PLUM8mrUjWoPRsVGEZ1gTntqPd4xrQZoiH\", \"Video Tutorials\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <GitHub />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://github.com/unchained-capital/caravan\", \"Source Code\")}\n                  </ListItemText>\n                </ListItem>\n\n              </List>\n            </CardContent>\n          </Card>\n\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Supported Devices\"></CardHeader>\n            <CardContent>\n              Caravan has been <a href=\"#/test\" target=\"_blank\">tested</a> with the following hardware wallets:\n              <ul>\n                <li>{externalLink(\"https://shop.trezor.io/product/trezor-one-white\", \"Trezor One\")}</li>\n                <li>{externalLink(\"https://www.ledger.com/products/ledger-nano-s\", \"Ledger Nano S\")}</li>\n              </ul>\n              And web browsers:\n              <ul>\n                <li>{externalLink(\"https://www.google.com/chrome/\", \"Chrome\")}</li>\n                <li>{externalLink(\"https://www.mozilla.org/en-US/firefox/new/\", \"Firefox\")}</li>\n              </ul>\n              Seeing a bug or need a feature?\n            </CardContent>\n            <CardActions>\n              <Button href=\"https://github.com/unchained-capital/caravan/issues\"><BugReport /> &nbsp; Report Issue</Button>\n            </CardActions>\n          </Card>\n\n        </Grid>\n\n      </Grid>\n    </Grid>\n\n\n    <Box mt={2}>\n      <Disclaimer />\n    </Box>\n\n  </div>\n);\n\nexport default Help;\n","export const SET_NETWORK = 'SET_NETWORK';\nexport const SET_TOTAL_SIGNERS    = \"SET_TOTAL_SIGNERS\";\nexport const SET_REQUIRED_SIGNERS = \"SET_REQUIRED_SIGNERS\";\nexport const SET_ADDRESS_TYPE = 'SET_ADDRESS_TYPE';\nexport const SET_FROZEN = 'SET_FROZEN';\n\nexport function setNetwork(value) {\n  return {\n    type: SET_NETWORK,\n    value: value,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setAddressType(value) {\n  return {\n    type: SET_ADDRESS_TYPE,\n    value: value,\n  };\n}\n\n\nexport function setFrozen(value) {\n  return {\n    type: SET_FROZEN,\n    value: value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  TESTNET,\n  MAINNET,\n} from \"unchained-bitcoin\";\n\n// Components\n\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n         Radio, FormHelperText } from '@material-ui/core';\n\n// Actions\nimport { setNetwork } from '../actions/settingsActions';\n\nclass NetworkPicker extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setNetwork: PropTypes.func.isRequired,\n  };\n\n  handleNetworkChange = (event) => {\n    const { setNetwork } = this.props;\n    setNetwork(event.target.value);\n  };\n\n  render() {\n    const { network, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Network\"/>\n        <CardContent>\n\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id=\"mainnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"mainnet\"\n            label={(<strong>Mainnet</strong>)}\n            onChange={this.handleNetworkChange}\n            checked={network === MAINNET}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id=\"testnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"testnet\"\n            label=\"Testnet\"\n            onChange={this.handleNetworkChange}\n            checked={network === TESTNET}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>{'Choose \\'Mainnet\\' if you don\\'t understand the difference.'}</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { \n    network: state.settings.network, \n    frozen: state.settings.frozen,\n  };\n}\n\nconst mapDispatchToProps = {\n  setNetwork,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Actions\nimport {\n  setTotalSigners,\n  setRequiredSigners,\n} from \"../actions/settingsActions\";\n\n// Components\nimport {\n  Typography, Grid, IconButton,\n  Card, CardHeader, CardContent, Box,\n} from '@material-ui/core';\nimport { AddCircle, RemoveCircle } from '@material-ui/icons';\nimport './styles.css';\n\nconst MAX_TOTAL_SIGNERS = 7;\n\nclass QuorumPicker extends React.Component {\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {requiredSigners, totalSigners} = this.props;\n\n    return (\n      <Card>\n        <CardHeader title=\"Quorum\"></CardHeader>\n        <CardContent>\n\n          <Box>\n            <Grid container justify=\"center\">\n\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n              <Grid container item xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementRequiredSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{requiredSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Required</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementRequiredSigners()}\n                </Grid>\n\n              </Grid>\n\n              <Grid container item xs={2} direction=\"column\" alignItems=\"center\" justify=\"center\">\n\n                <Grid item>\n                  <Typography variant=\"h6\">of</Typography>\n                </Grid>\n\n              </Grid>\n\n              <Grid item container xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementTotalSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{totalSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Total</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementTotalSigners()}\n                </Grid>\n\n              </Grid>\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n            </Grid>\n\n          </Box>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n\n  renderIncrementRequiredSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (requiredSigners === totalSigners || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementRequiredSigners} disabled={disabled}>\n        <AddCircle/>\n      </IconButton>\n    );\n  }\n\n  renderDecrementRequiredSigners = () => {\n    const {requiredSigners, frozen} = this.props;\n    const disabled = (requiredSigners === 1 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementRequiredSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  renderIncrementTotalSigners = () => {\n    const {totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === MAX_TOTAL_SIGNERS || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementTotalSigners} disabled={disabled}>\n        <AddCircle />\n      </IconButton>\n    );\n  }\n\n  renderDecrementTotalSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === requiredSigners || totalSigners === 2 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementTotalSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  handleIncrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners - 1);\n    event.preventDefault();\n  }\n\n  handleIncrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners - 1);\n    event.preventDefault();\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n  setTotalSigners,\n  setRequiredSigners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuorumPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n          Radio, FormHelperText } from '@material-ui/core';\n// Actions\nimport {\n    setAddressType,\n} from '../actions/settingsActions';\n\n\nclass AddressTypePicker extends React.Component {\n\n  static propTypes = {\n    addressType: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setType: PropTypes.func.isRequired,\n  };\n\n  handleTypeChange = (event) => {\n    const { setType } = this.props;\n    setType(event.target.value);\n  };\n\n  render() {\n    const { addressType, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Address Type\"/>\n        <CardContent>\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id={P2SH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH}\n            label={P2SH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2SH_P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH_P2WSH}\n            label={P2SH_P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH_P2WSH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2WSH}\n            label={P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2WSH}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>Choose '{P2WSH}' for best practices, '{P2SH}' for greatest compatibility.</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n        </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\n\nconst mapDispatchToProps = {\n    setType: setAddressType,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressTypePicker);\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {\n  satoshisToBitcoins,\n  blockExplorerAPIURL,\n} from \"unchained-bitcoin\";\n\n/**\n * Fetch information for signing transactions from block explorer API\n * @param {string} address - The address from which to obtain the information\n * @param {string} network - The network for the transaction to sign (mainnet|testnet)\n * @returns {multisig.UTXO} object for signing transaction inputs\n */\nexport async function blockExplorerGetAddresesUTXOs(address, network) {\n  try {\n    const utxosResult = await axios.get(blockExplorerAPIURL(`/address/${address}/utxo`, network));\n    const utxos = utxosResult.data;\n    return await Promise.all(utxos.map(async (utxo) => {\n      // FIXME: inefficient, need to cache here by utxo.txid\n      const transactionResult = await axios.get(blockExplorerAPIURL(`/tx/${utxo.txid}/hex`, network));\n      const transactionHex = transactionResult.data;\n      const amount = new BigNumber(utxo.value);\n      return {\n        confirmed: utxo.status.confirmed,\n        txid: utxo.txid,\n        index: utxo.vout,\n        amount: satoshisToBitcoins(amount).toFixed(8),\n        amountSats: amount,\n        transactionHex,\n        time: utxo.status.block_time\n      };\n    }));\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerGetAddressStatus(address, network) {\n  try {\n    const addressesult = await axios.get(blockExplorerAPIURL(`/address/${address}`, network));\n    const addressData = addressesult.data;\n    return {\n      used: addressData.chain_stats.funded_txo_count > 0 || addressData.mempool_stats.funded_txo_count > 0\n    }\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerGetFeeEstimate(network) {\n  try {\n    const feeEstimatesResult = await axios.get(blockExplorerAPIURL('/fee-estimates', network));\n    const feeEstimates = feeEstimatesResult.data;\n    return Math.ceil(feeEstimates[2]);\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerBroadcastTransaction(transactionHex, network) {\n  try {\n    const broadcastResult = await axios.post(blockExplorerAPIURL('/tx', network), transactionHex);\n    return broadcastResult.data;\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\n/**\n * @module block_explorer\n */\n\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {bitcoinsToSatoshis} from \"unchained-bitcoin\";\n\nasync function callBitcoind(url, auth, method, params = []) {\n  return new Promise(async (resolve, reject) => {\n    axios(url, {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      auth,\n      data: {\n        jsonrpc: '2.0',\n        id: 0,\n        method: `${method}`,\n        params,\n      },\n    }).then(resp => resolve(resp.data)).catch(reject);\n  });\n}\n\n/**\n * check if error from bitcoind is address not found in wallet\n * this allows client side interpretation of the error\n * @param {Error} e - the error object to check\n * @returns {boolean} true if the desired error\n */\nexport function isWalletAddressNotFoundError(e) {\n  return e.response &&\n  e.response.data &&\n  e.response.data.error &&\n  e.response.data.error.code === -4;\n}\n\nexport function bitcoindParams(client) {\n  const {url, username, password} = client;\n  const auth = { username, password };\n  return {url, auth};\n}\n\n/**\n * Fetch information for signing transactions from bitcoind RPC\n * @param {Object} options - what is needed to communicate with the RPC\n * @param {string} options.url - where to connect\n * @param {AxiosBasicCredentials} options.auth - username and password\n * @param {string} options.address - The address from which to obtain the information\n * @returns {UTXO} object for signing transaction inputs\n */\nexport async function bitcoindListUnspent({url, auth, address, addresses}) {\n  return new Promise(async (resolve) => {\n    try {\n      const addressParam = addresses || [address]\n      const resp = await callBitcoind(url, auth, 'listunspent', [0, 9999999, addressParam], );\n      const promises = [];\n      resp.result.forEach(utxo => {\n        promises.push(callBitcoind(url, auth, 'getrawtransaction', [utxo.txid, 1]))\n      })\n      const previousTransactions = await Promise.all(promises)\n      resolve(resp.result.map((utxo, mapindex) => {\n        const amount = new BigNumber(utxo.amount);\n        return {\n          confirmed: (utxo.confirmations || 0) > 0,\n          txid: utxo.txid,\n          index: utxo.vout,\n          amount: amount.toFixed(8),\n          amountSats: bitcoinsToSatoshis(amount),\n          transactionHex: previousTransactions[mapindex].result.hex,\n          time: previousTransactions[mapindex].result.blocktime,\n        };\n      }));\n\n    } catch(e) {throw(e)}\n  });\n}\n\nexport async function bitcoindGetAddressStatus({url, auth, address}) {\n  try {\n    const resp = await callBitcoind(url, auth, 'getreceivedbyaddress', [address] );\n    if (typeof resp.result === 'undefined') {\n      throw(new Error(\"Error: invalid response from \"+url))\n    }\n    return {\n      used: resp.result > 0\n    }\n  } catch(e) {\n    throw(e);\n  }\n}\n\nexport async function bitcoindEstimateSmartFee({url, auth, numBlocks = 2}) {\n  const resp = await callBitcoind(url, auth, 'estimatesmartfee', [numBlocks]);\n  const feeRate = resp.result.feerate;\n  return Math.ceil(feeRate * 100000);\n}\n\nexport async function bitcoindSendRawTransaction({url, auth, hex}) {\n  try {\n    const resp = await callBitcoind(url, auth, 'sendrawtransaction', [hex]);\n    return resp.result;\n    } catch(e) {\n      console.log('send tx error', e)\n      throw((e.response && e.response.data.error.message) || e);\n  }\n\n}\n\nexport function bitcoindImportMulti({url, auth, addresses, label, rescan}) {\n  const imports = addresses.map(address => {\n    return {\n      scriptPubKey: {\n        address: address\n      },\n      label: label,\n      timestamp: 0 // TODO: better option to ensure address history is picked up?\n    }\n  });\n  if (rescan) {\n    callBitcoind(url, auth, 'importmulti', [imports, {rescan: rescan}]); // TODO: what to do on catch?\n    return new Promise(resolve => resolve({result:[]}));\n  } else {\n    return callBitcoind(url, auth, 'importmulti', [imports, {rescan: rescan}]);\n  }\n}","import {sortInputs} from \"unchained-bitcoin\";\nimport {\n  blockExplorerGetAddresesUTXOs,\n  blockExplorerGetFeeEstimate,\n  blockExplorerBroadcastTransaction,\n  blockExplorerGetAddressStatus,\n} from \"./block_explorer\";\nimport {\n  bitcoindListUnspent,\n  bitcoindEstimateSmartFee,\n  bitcoindSendRawTransaction,\n  bitcoindParams,\n  bitcoindGetAddressStatus,\n} from \"./bitcoind\";\n\nexport const BLOCK_EXPLORER = 'public';\nexport const BITCOIND = 'private';\n\nexport async function fetchAddressUTXOs(address, network, client) {\n  const unsortedUTXOs = await fetchAddressUTXOsUnsorted(address, network, client);\n  return sortInputs(unsortedUTXOs);\n}\n\nfunction fetchAddressUTXOsUnsorted(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddresesUTXOs(address, network);\n  } else {\n    return bitcoindListUnspent({\n      ...bitcoindParams(client),\n      ...{address}\n    });\n  }\n}\n\nexport function getAddressStatus(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddressStatus(address, network);\n  } else {\n    return bitcoindGetAddressStatus({\n      ...bitcoindParams(client),\n      ...{address}\n    });\n  }\n}\n\nexport function fetchFeeEstimate(network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetFeeEstimate(network);\n  } else {\n    return bitcoindEstimateSmartFee({\n      ...bitcoindParams(client),\n      ...{numBlocks: 1}\n    });\n  }\n}\n\nexport function broadcastTransaction(transactionHex, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerBroadcastTransaction(transactionHex, network);\n  } else {\n    return bitcoindSendRawTransaction({\n      ...bitcoindParams(client),\n      ...{hex: transactionHex}\n    });\n  }\n}\n","function actionWrapper(type) {\n  return (value) => {\n    return  {type, value,};\n  };\n}\n\nexport function wrappedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = actionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n\nfunction numberedActionWrapper(type) {\n  return (number, value) => {\n    return  {type, number, value,};\n  };\n}\n\nexport function wrappedNumberedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = numberedActionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n","export const SET_CLIENT_TYPE = 'SET_CLIENT_TYPE';\nexport const SET_CLIENT_URL = 'SET_CLIENT_URL';\nexport const SET_CLIENT_USERNAME = 'SET_CLIENT_USERNAME';\nexport const SET_CLIENT_PASSWORD = 'SET_CLIENT_PASSWORD';\n\nexport const SET_CLIENT_URL_ERROR = 'SET_CLIENT_URL_ERROR';\nexport const SET_CLIENT_USERNAME_ERROR = 'SET_CLIENT_USERNAME_ERROR';\nexport const SET_CLIENT_PASSWORD_ERROR = 'SET_CLIENT_PASSWORD_ERROR';\n\nexport const SET_CLIENT_STATUS = 'SET_CLIENT_STATUS';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {externalLink} from \"../utils\";\nimport {fetchFeeEstimate} from \"../blockchain\";\n\n// Components\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControlLabel,\n  TextField,\n  Switch,\n  Button,\n  FormHelperText,\n  Box,\n} from '@material-ui/core';\n\n// Actions\nimport { wrappedActions } from '../actions/utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst propTypes = {\n  client: PropTypes.shape({}).isRequired,\n  network: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n  setPasswordError: PropTypes.func.isRequired,\n  setType: PropTypes.func.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  setUsernameError: PropTypes.func.isRequired,\n};\n\nclass ClientPicker extends React.Component {\n  state = {\n    url_edited: false,\n    connectError: \"\",\n    connectSuccess: false\n  }\n\n  handleTypeChange = (event) => {\n    const { setType, network, setUrl } = this.props;\n    const type = event.target.checked ? 'private' : 'public';\n    if (type === 'private' && !this.state.url_edited) {\n      setUrl(`http://localhost:${network === 'mainnet' ? 8332 : 18332}`)\n    }\n    setType(type);\n  }\n\n  handleUrlChange = (event) => {\n    const { setUrl, setUrlError } = this.props;\n    const url = event.target.value;\n    const error = this.validateUrl(url);\n    if (!this.state.url_edited && !error) this.setState({url_edited: true});\n    setUrl(url);\n    setUrlError(error);\n  };\n\n  handleUsernameChange = (event) => {\n    const { setUsername, setUsernameError } = this.props;\n    const username = event.target.value;\n    const error = this.validateUsername(username);\n    setUsername(username);\n    setUsernameError(error);\n  };\n\n  handlePasswordChange = (event) => {\n    const { setPassword, setPasswordError } = this.props;\n    const password = event.target.value;\n    const error = this.validatePassword(password);\n    setPassword(password);\n    setPasswordError(error);\n  };\n\n  validateUrl(host) {\n    const validhost = /^http(s)?:\\/\\/[^\\s]+$/.exec(host);\n    if (!validhost) return 'Must be a valid URL.'\n    return '';\n  }\n\n  validatePassword(pass) {\n    return '';\n  }\n\n  validateUsername(username) {\n    return '';\n  }\n\n  toggle = () => {\n    const { client } = this.props;\n    const label = client.type.charAt(0).toUpperCase() + client.type.slice(1);\n    return (\n      <FormControlLabel\n        control={\n          <Switch\n            color=\"primary\"\n            checked={client.type === 'private'}\n            onChange={this.handleTypeChange}\n            value=\"private\" />\n        }\n        label={label}\n      />\n    );\n  }\n\n  title = () => (\n    <Grid container justify=\"space-between\">\n      <Grid item>Consensus</Grid>\n      <Grid item>{this.toggle()}</Grid>\n    </Grid>\n  )\n\n  disabled = () => (false);\n\n  render() {\n    const { client, url_error, username_error, password_error } = this.props;\n    const { connectSuccess, connectError } = this.state;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {(client.type === 'public')\n           ? (\n             <div>\n              <p>\n                {\"'Public' uses the \"}\n                <code>blockstream.info</code>\n                {' API. Switch to private to use a '}\n                <code>bitcoind</code>\n                {' node.'}\n              </p>\n              {typeof this.props.publicNotes !== 'undefined' && this.props.publicNotes}\n             </div>\n           ) : (\n             <div>\n              <p>A <code>bitcoind</code>-compatible client is required to query UTXO data, estimate fees, and broadcast transactions.</p>\n              <p>\n                <small>\n                  {'Due to CORS requirements, you must use a proxy around the node. Instructions are available '}\n                  {externalLink(\"https://github.com/unchained-capital/caravan#adding-cors-headers\", \"here\")}\n                  {'.'}\n                </small>\n              </p>\n               <form>\n\n                 <Grid container direction=\"column\" spacing={1}>\n\n                   <Grid item>\n                     <TextField\n                       fullWidth\n                       label=\"URL\"\n                       value={client.url}\n                       onChange={this.handleUrlChange}\n                       disabled={this.disabled()}\n                       error={url_error !== ''}\n                       helperText={url_error}\n                     />\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       id=\"bitcoind-username\"\n                       fullWidth\n                       label=\"Username\"\n                       value={client.username}\n                       onChange={this.handleUsernameChange}\n                       disabled={this.disabled()}\n                       error={username_error}\n                       helperText={username_error}\n                     />\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       id=\"bitcoind-password\"\n                       fullWidth\n                       type=\"password\"\n                       label=\"Password\"\n                       value={client.password}\n                       onChange={this.handlePasswordChange}\n                       disabled={this.disabled()}\n                       error={password_error}\n                       helperText={password_error}\n                     />\n                   </Grid>\n                   <Grid item>\n                     <Box mt={1}>\n                      <Button\n                        variant=\"contained\"\n                        onClick={this.testConnection}\n                        >\n                        Test Connection\n                        </Button>\n                     </Box>\n                     <Box mt={2}>\n                        { connectSuccess && <FormHelperText>Connection Success!</FormHelperText>}\n                        { connectError !== \"\" && <FormHelperText error>{connectError}</FormHelperText>}\n                     </Box>\n                   </Grid>\n                 </Grid>\n               </form>\n               {typeof this.props.privateNotes !== 'undefined' && this.props.privateNotes}\n             </div>\n           )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  testConnection = async () => {\n    const { network, client } = this.props\n    this.setState({connectError: \"\", connectSuccess: false});\n    try {\n      await fetchFeeEstimate(network, client);\n      this.setState({connectSuccess: true});\n    } catch (e) {\n      this.setState({connectError: e.message});\n    }\n  }\n}\nClientPicker.propTypes = propTypes;\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    url_error: state.client.url_error,\n    url: state.client.url,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  wrappedActions({\n    setType: SET_CLIENT_TYPE,\n    setUrl: SET_CLIENT_URL,\n    setUsername: SET_CLIENT_USERNAME,\n    setPassword: SET_CLIENT_PASSWORD,\n\n    setUrlError: SET_CLIENT_URL_ERROR,\n    setUsernameError: SET_CLIENT_USERNAME_ERROR,\n    setPasswordError: SET_CLIENT_PASSWORD_ERROR,\n\n    setStatus: SET_CLIENT_STATUS,\n  }),\n)(ClientPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n    Table, TableHead, TableBody,\n    TableRow, TableCell,\n    Box\n  } from '@material-ui/core';\n\n  class WalletConfirmation extends React.Component {\n\n    static propTypes = {\n        extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n      };\n\n        render = () => {\n        return (\n          <Box>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell>BIP32 Path</TableCell>\n                  <TableCell>Extended Public Key</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {this.renderConfirmationInfo()}\n              </TableBody>\n            </Table>\n          </Box>\n        )\n      }\n\n      renderConfirmationInfo = () => {\n        const { extendedPublicKeyImporters } = this.props;\n        return Object.values(extendedPublicKeyImporters).map((importer, i) => (\n          <TableRow key={i}>\n            <TableCell>{importer.name}</TableCell>\n            <TableCell>{importer.method === 'text' ? 'N/A' : importer.bip32Path}</TableCell>\n            <TableCell>{importer.extendedPublicKey}</TableCell>\n          </TableRow>\n        ))\n      }\n  }\n\n  function mapStateToProps(state) {\n    return { extendedPublicKeyImporters: state.quorum.extendedPublicKeyImporters };\n  }\n\n  const mapDispatchToProps = {};\n\n  export default connect(mapStateToProps, mapDispatchToProps)(WalletConfirmation);\n","export const UPDATE_DEPOSIT_NODE = \"UPDATE_DEPOSIT_NODE\";\nexport const UPDATE_CHANGE_NODE = \"UPDATE_CHANGE_NODE\";\nexport const RESET_NODES_SPEND = \"RESET_NODES_SPEND\";\nexport const UPDATE_AUTO_SPEND = \"UPDATE_AUTO_SPEND\";\nexport const UPDATE_WALLET_NAME = \"UPDATE_WALLET_NAME\";\nexport const UPDATE_WALLET_MODE = \"UPDATE_WALLET_MODE\";\nexport const RESET_WALLET_VIEW = \"RESET_WALLET_VIEW\";\nexport const SPEND_NODES = \"SPEND_NODES\";\n\nexport const WALLET_MODES = {\n  VIEW: 0,\n  DEPOSIT: 1,\n  SPEND: 2,\n}\n\n\nexport function updateDepositNodeAction(value) {\n  return {\n    type: UPDATE_DEPOSIT_NODE,\n    value: {\n      ...value,\n      ...{change: false}\n    },\n  };\n}\n\nexport function updateChangeNodeAction(value) {\n  return {\n    type: UPDATE_CHANGE_NODE,\n    value: {\n      ...value,\n      ...{change: true}\n    },\n  };\n}\n\nexport function resetNodesSpend() {\n  return {\n    type: RESET_NODES_SPEND\n  }\n}\n\nexport function spendNodes() {\n  return {\n    type: SPEND_NODES\n  }\n}\n\nexport function updateAutoSpendAction(value) {\n  return {\n    type: UPDATE_AUTO_SPEND,\n    value: value\n  };\n}\n\nexport function setWalletModeAction(value) {\n  return  {\n    type: UPDATE_WALLET_MODE,\n    value: value\n  }\n}\n\nexport function updateWalletNameAction(number, value) {\n  return {\n    type: UPDATE_WALLET_NAME,\n    value: value\n  };\n}\n\nexport function resetWalletView() {\n  return {\n    type: RESET_WALLET_VIEW\n  }\n}\n\n","export const CHOOSE_PERFORM_SPEND = \"CHOOSE_PERFORM_SPEND\";\n\nexport const SET_REQUIRED_SIGNERS = 'SET_REQUIRED_SIGNERS';\nexport const SET_TOTAL_SIGNERS = 'SET_TOTAL_SIGNERS';\n\nexport const SET_INPUTS = 'SET_INPUTS';\n\nexport const ADD_OUTPUT = 'ADD_OUTPUT';\nexport const SET_OUTPUT_ADDRESS = 'SET_OUTPUT_ADDRESS';\nexport const SET_OUTPUT_AMOUNT = 'SET_OUTPUT_AMOUNT';\nexport const DELETE_OUTPUT = 'DELETE_OUTPUT';\n\nexport const SET_FEE_RATE = 'SET_FEE_RATE';\nexport const SET_FEE = 'SET_FEE';\n\nexport const FINALIZE_OUTPUTS = 'FINALIZE_OUTPUTS';\nexport const RESET_OUTPUTS = 'RESET_OUTPUTS';\n\nexport const SET_TXID = 'SET_TXID';\nexport const RESET_TRANSACTION = 'RESET_TRANSACTION';\nexport const SET_IS_WALLET = 'SET_IS_WALLET';\nexport const SET_CHANGE_OUTPUT_INDEX = 'SET_CHANGE_OUTPUT_INDEX';\n\nexport function choosePerformSpend() {\n  return {\n    type: CHOOSE_PERFORM_SPEND,\n  };\n}\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setInputs(inputs) {\n  return {\n    type: SET_INPUTS,\n    value: inputs,\n  };\n}\n\nexport function addOutput() {\n  return {\n    type: ADD_OUTPUT,\n  };\n}\n\nexport function setChangeOutputIndex(number) {\n  return {\n    type: SET_CHANGE_OUTPUT_INDEX,\n    value: number,\n  };\n}\n\n\nexport function setOutputAddress(number, address) {\n  return {\n    type: SET_OUTPUT_ADDRESS,\n    number: number,\n    value: address,\n  };\n}\n\nexport function setOutputAmount(number, amountString) {\n  return {\n    type: SET_OUTPUT_AMOUNT,\n    number: number,\n    value: amountString,\n  };\n}\n\nexport function deleteOutput(number) {\n  return {\n    type: DELETE_OUTPUT,\n    number: number,\n  };\n}\n\nexport function setFeeRate(valueString) {\n  return {\n    type: SET_FEE_RATE,\n    value: valueString,\n  };\n}\n\nexport function setFee(valueString) {\n  return {\n    type: SET_FEE,\n    value: valueString,\n  };\n}\n\nexport function finalizeOutputs(finalized) {\n  return {\n    type: FINALIZE_OUTPUTS,\n    value: finalized\n  };\n}\n\nexport function resetOutputs() {\n  return {\n    type: RESET_OUTPUTS,\n  };\n}\n\nexport function resetTransaction() {\n  return {\n    type: RESET_TRANSACTION,\n  };\n}\n\n\nexport function setTXID(txid) {\n  return {\n    type: SET_TXID,\n    value: txid,\n  };\n}\n\nexport function setIsWallet() {\n  return {\n    type: SET_IS_WALLET,\n  };\n}\n","import PropTypes from 'prop-types';\nimport React       from \"react\";\n\n// Components\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {FileCopy} from '@material-ui/icons';\n\nclass Copyable extends React.Component {\n\n  state = {\n    copied: false,\n    timer: null,\n  };\n\n  componentWillUnmount = () => {\n    const {timer} = this.state;\n    if (timer) {\n      clearTimeout(timer);\n    }\n  }\n\n  render = () => {\n    const {newline, text, children} = this.props;\n    return (\n      <span onClick={e => e.stopPropagation()}>\n        <CopyToClipboard text={text} onCopy={this.onCopy} options={{format: \"text/plain\"}}>\n          <span className=\"copyable\">\n            {children || text}\n            {newline && <br />}\n            {/* {this.props.icon && <span>&nbsp;</span>} */}\n            {/* {this.props.icon && <FAIcon name=\"clipboard\" />} */}\n            {this.badge()}\n          </span>\n        </CopyToClipboard>\n      </span>\n    );\n  }\n\n  badge = () => {\n    const {copied} = this.state;\n    if (copied) {\n      //return (<span>&nbsp; <span className=\"badge badge-success\">Copied</span></span>);\n      return <FileCopy fontSize=\"small\"/>;\n    } else { return null; }\n  }\n\n  onCopy = () => {\n    const timer = setTimeout(() => {\n      this.setState({copied: false, timer: null});\n    }, 1000);\n    this.setState({copied: true, timer});\n  }\n}\n\nCopyable.defaultProps = {\n  newline: false,\n  icon: true,\n}\n\nCopyable.propTypes = {\n  // defaults\n  newline:   PropTypes.bool.isRequired,\n  icon: PropTypes.bool.isRequired,\n  // parent\n  text:     PropTypes.string,\n  children: PropTypes.any,\n};\n\nexport default Copyable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { fetchAddressUTXOs } from \"../../blockchain\"\nimport {\n  updateDepositNodeAction,\n  resetWalletView,\n} from \"../../actions/walletActions\";\nimport BigNumber from \"bignumber.js\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\nimport {\n  Card, CardHeader,\n  CardContent, TextField,\n  Snackbar,\n  Button,\n  Box,\n} from '@material-ui/core';\n\nlet depositTimer;\n\nclass WalletDeposit extends React.Component {\n  state = {\n    address: \"\",\n    bip32Path: \"\",\n    amount: 0,\n    amountError: \"\",\n    showReceived: false,\n  }\n\n  static propTypes = {\n    deposits: PropTypes.object.isRequired,\n    client: PropTypes.object.isRequired,\n    updateDepositNode: PropTypes.func.isRequired,\n  }\n\n  componentDidMount() {\n    this.getDepositAddress()\n  }\n\n  componentWillUnmount() {\n    clearInterval(depositTimer)\n  }\n\n  getDepositAddress = () => {\n    const { depositNode, network, client, updateDepositNode } = this.props;\n\n    this.setState({address: depositNode.multisig.address, bip32Path: depositNode.bip32Path, showReceived: false});\n\n    depositTimer = setInterval(async () => {\n      let utxos;\n      try {\n        utxos = await fetchAddressUTXOs(this.state.address, network, client);\n        if (utxos.length) {\n          clearInterval(depositTimer)\n          const balanceSats = utxos\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue.amountSats),\n            new BigNumber(0));\n\n          updateDepositNode({\n            change: false,\n            bip32Path: this.state.bip32Path,\n            utxos,\n            balanceSats,\n            fetchedUTXOs: true,\n            fetchUTXOsError: ''\n          })\n          this.setState({showReceived: true});\n          // setTimeout(resetWalletView, 5000);\n        }\n      } catch(e) {\n        console.error(e);\n      }\n\n    }, 2000)\n  }\n\n  render() {\n    const { amount, amountError, address, showReceived } = this.state;\n    return (\n      <div>\n        <Card>\n          <CardHeader title=\"Deposit\"/>\n          <CardContent>\n            <Copyable text={this.qrString()} newline={true}>\n              <p><code>{address}</code></p>\n              <QRCode size={300} value={this.qrString()} level={'L'} />\n              <p>Scan QR code or click to copy address to clipboard.</p>\n            </Copyable>\n            <TextField\n              fullWidth\n              label=\"Amount BTC\"\n              name=\"depositAmount\"\n              onChange={this.handleAmountChange}\n              value={amount}\n              error={amountError !== \"\"}\n              helperText={amountError}\n            />\n            { this.renderReceived() }\n          </CardContent>\n        </Card>\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={showReceived}\n          autoHideDuration={3000}\n          // onClose={() => this.setState({showReceived: false})}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">Deposit received</span>}\n        />\n      </div>\n    )\n  }\n\n  renderReceived = () => {\n    const { showReceived } = this.state;\n    const { resetWalletView } = this.props;\n    if (showReceived) {\n      return (\n        <Box mt={2}>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.getDepositAddress}>Make another deposit</Button>\n          <Box ml={2} component=\"span\">\n            <Button variant=\"contained\" onClick={resetWalletView}>Return</Button>\n          </Box>\n        </Box>\n      )\n    }\n  }\n\n  handleAmountChange = (event)=> {\n    const amount = event.target.value;\n    let error = \"\"\n\n    if (amount.length && !amount.match(/^[0-9.]+$/)) {\n      error = \"Amount must be numeric\";\n    }\n    const decimal = amount.split('.');\n    if (decimal.length > 2) {\n      error = \"Amount must be numeric\";\n    } else if (decimal.length === 2 && decimal[1].length > 8) {\n      error = \"Amount must have maximum precision of 8 decimal places\";\n    }\n\n    this.setState({amount: event.target.value, amountError: error})\n  }\n\n  qrString = () => {\n    const {address, amount} = this.state;\n    return `bitcoin:${address}${amount ? '?amount='+amount : ''}`\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.settings,\n    depositNode: state.wallet.deposits.nextNode,\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateDepositNode: updateDepositNodeAction,\n  resetWalletView,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletDeposit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  blockExplorerTransactionURL,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\nimport {externalLink} from \"../../utils\";\nimport Copyable from \"../Copyable\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  Table, TableHead, TableBody, TableFooter,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\n// Assets\nimport 'react-table/react-table.css';\nimport styles from './styles.module.scss';\n\nclass UTXOSet extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {inputs, inputsTotalSats} = this.props;\n    return (\n      <Card >\n        <CardHeader title={`Available Inputs (${inputs.length})`} />\n        <CardContent>\n          <p>The following UTXOs will be spent as inputs in a new transaction.</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                <TableCell>Number</TableCell>\n                <TableCell>TXID</TableCell>\n                <TableCell>Index</TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n                <TableCell>View</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderInputs()}\n            </TableBody>\n            <TableFooter>\n              <TableRow hover>\n                <TableCell colSpan={3}>\n                  TOTAL:\n                </TableCell>\n                <TableCell colSpan={2}>\n                  {satoshisToBitcoins(inputsTotalSats).toString()}\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderInputs = () => {\n    const { inputs, network } = this.props;\n    return inputs.map((input, inputIndex) => {\n      const confirmedStyle = `${styles.utxoTxid}${input.confirmed ? '' : ' '+styles.unconfirmed}`;\n      const confirmedTitle = input.confirmed ? 'confirmed' : 'unconfirmed';\n      return (\n        <TableRow hover key={input.txid}>\n          <TableCell>\n            {inputIndex + 1}\n          </TableCell>\n          <TableCell className={confirmedStyle}>\n            <Copyable text={input.txid}>\n              <code title={confirmedTitle}>{input.txid}</code>\n            </Copyable>\n          </TableCell>\n          <TableCell>\n            <Copyable text={input.index.toString()} />\n          </TableCell>\n          <TableCell>\n            <Copyable text={satoshisToBitcoins(input.amountSats).toString()} />\n          </TableCell>\n          <TableCell>\n            {externalLink(blockExplorerTransactionURL(input.txid, network), <OpenInNew />)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n  };\n}\n\nexport default connect(mapStateToProps)(UTXOSet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  scriptToOps,\n  scriptToHex,\n  networkLabel,\n  multisigAddressType,\n  multisigRedeemScript,\n  multisigWitnessScript,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n  blockExplorerAddressURL,\n} from 'unchained-bitcoin';\nimport {\n  externalLink,\n} from \"../utils\";\n\n// Components\nimport Copyable from \"./Copyable\";\nimport { Typography, Grid, Box, Chip} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\nclass MultisigDetails extends React.Component {\n\n  static propTypes = {\n    network:  PropTypes.string.isRequired,\n    multisig: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {network, multisig} = this.props;\n    const address = multisig.address;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    return (\n      <Box mt={2}>\n\n        <Typography variant=\"h6\">Address</Typography>\n\n        <Typography align=\"center\" variant=\"h5\">\n\n          <Grid container direction=\"column\" spacing={2}>\n\n            <Grid item>\n              <Copyable text={address}>\n                <code>{address}</code>\n              </Copyable>\n              &nbsp;\n              {externalLink(blockExplorerAddressURL(address, network), <OpenInNew />)}\n            </Grid>\n\n            <Grid item justify=\"center\" container spacing={3}>\n\n              <Grid item>\n                <Chip label=\"BTC\" />\n              </Grid>\n\n              <Grid item>\n                <Chip label={networkLabel(network)}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={`${multisigRequiredSigners(multisig)}-of-${multisigTotalSigners(multisig)}`}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={multisigAddressType(multisig)}/>\n              </Grid>\n\n            </Grid>\n          </Grid>\n\n        </Typography>\n\n        {this.renderScript(\"Script\", multisig)}\n        {redeemScript && this.renderScript(\"Redeem Script\", redeemScript)}\n        {witnessScript && this.renderScript(\"Witness Script\", witnessScript)}\n      </Box>\n    );\n  }\n\n  renderScript = (name, script) => {\n    const hex = scriptToHex(script);\n    const ops = scriptToOps(script);\n    return (\n      <Box mt={2}>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Grid container spacing={2}>\n          <Grid item sm={6}>\n            <Copyable text={hex}><code>{hex}</code></Copyable>\n          </Grid>\n          <Grid item sm={6}>\n            <Copyable text={ops}><code>{ops}</code></Copyable>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultisigDetails);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n  blockExplorerAddressURL,\n} from 'unchained-bitcoin';\nimport {\n  externalLink,\n} from \"../../utils\";\n\n// Components\nimport {\n  TableRow, TableCell, Checkbox, FormHelperText, Grid,\n  ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport UTXOSet from \"../Spend/UTXOSet\";\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MultisigDetails from \"../MultisigDetails\";\n\n// Actions\nimport {\n  setInputs, setFeeRate,\n} from '../../actions/transactionActions';\nimport { updateAutoSpendAction, WALLET_MODES } from \"../../actions/walletActions\";\n\nimport styles from '../Spend//styles.module.scss';\n\nclass Node extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n    present: PropTypes.bool,\n    bip32Path: PropTypes.string.isRequired,\n    multisig: PropTypes.object,\n    spend: PropTypes.bool.isRequired,\n    change: PropTypes.bool.isRequired,\n    setInputs: PropTypes.func.isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.generate();\n  }\n\n  render = () => {\n    const {bip32Path, spend, fetchedUTXOs, balanceSats, fetchUTXOsError,\n      multisig, utxos, walletMode, addressKnown} = this.props;\n    const spending = walletMode === WALLET_MODES.SPEND;\n    return (\n      <TableRow key={bip32Path}>\n        { spending &&\n          <TableCell>\n            <Checkbox\n              id={bip32Path}\n              name=\"spend\"\n              onChange={this.handleSpend}\n              checked={spend}\n              disabled={!fetchedUTXOs || balanceSats.isEqualTo(0)}\n            />\n          </TableCell>\n        }\n        <TableCell>\n          <code>{bip32Path}</code>\n        </TableCell>\n        <TableCell>\n          {utxos.length}\n        </TableCell>\n        <TableCell>\n          {fetchedUTXOs && addressKnown ? satoshisToBitcoins(balanceSats).toFixed() : ''}\n          {fetchUTXOsError !== '' && <FormHelperText className=\"danger\">{fetchUTXOsError}</FormHelperText>}\n        </TableCell>\n        <TableCell>\n          {this.minUtxoDate()}\n        </TableCell>\n\n        <TableCell>\n          {multisig ? this.renderAddress()\n           : '...'}\n        </TableCell>\n      </TableRow>\n      );\n  }\n\n  minUtxoDate = () => {\n    const {utxos} = this.props;\n    if (!utxos.length) return \"\"\n    const mintime = Math.min(...utxos.map(utxo => utxo.time))\n    if (isNaN(mintime)) return \"Pending\"\n    return (new Date(1000 * mintime).toLocaleDateString())\n  }\n\n  addressContent = () => {\n    const {multisig, network, addressUsed, balanceSats} = this.props;\n    return (\n      <div>\n        <Copyable text={multisig.address}>\n          <code className={addressUsed && balanceSats.isEqualTo(0) ? styles.spent : \"\"}>{multisig.address}</code>\n          </Copyable>\n        &nbsp;\n        {externalLink(blockExplorerAddressURL(multisig.address, network), <LaunchIcon onClick={e => e.stopPropagation()} />)}\n      </div>\n    )\n  }\n\n  renderAddress = () => {\n    const {bip32Path, utxos,  balanceSats, multisig} = this.props;\n    return (\n      <ExpansionPanel>\n      <ExpansionPanelSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id={'address-header'+bip32Path}\n      >\n        {this.addressContent()}\n     </ExpansionPanelSummary>\n     <ExpansionPanelDetails>\n       <Grid container>\n        <Grid item md={12}>\n          <MultisigDetails multisig={multisig} />\n        </Grid>\n        { balanceSats.isGreaterThan(0) &&\n        <Grid item md={12}>\n          <UTXOSet\n            inputs={utxos}\n            inputsTotalSats={balanceSats}\n          />\n        </Grid>\n        }\n       </Grid>\n     </ExpansionPanelDetails>\n\n   </ExpansionPanel>  )\n\n  }\n\n  generate = () => {\n    const {present, change, bip32Path, addNode} = this.props;\n    if (!present) {\n      addNode(change, bip32Path);\n    }\n  }\n\n  handleSpend = (e) => {\n    const {change, bip32Path, updateNode, inputs, utxos, multisig, setInputs,\n      updateAutoSpend, setFeeRate, feeRate} = this.props;\n    let newInputs;\n    if (e.target.checked) {\n      newInputs = inputs.concat(utxos.map(utxo => ({...utxo, multisig, bip32Path: bip32Path})))\n    } else {\n      newInputs = inputs.filter(input => {\n        const newUtxos = utxos.filter(utxo => {\n          return utxo.txid === input.txid && utxo.index === input.index;\n        })\n        return newUtxos.length === 0;\n      })\n    }\n    setInputs(newInputs);\n    updateNode(change, {spend: e.target.checked, bip32Path});\n    updateAutoSpend(false);\n    setFeeRate(feeRate);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const change = ((ownProps.bip32Path || '').split('/')[1] === '1'); // // m, 0, 1\n  const braid = state.wallet[change ? 'change' : 'deposits'];\n  return {\n    ...state.settings,\n    ...{change},\n    ...braid.nodes[ownProps.bip32Path],\n    ...state.spend.transaction,\n    walletMode: state.wallet.info.walletMode,\n\n  };\n}\n\nconst mapDispatchToProps = {\n  setInputs,\n  setFeeRate,\n  updateAutoSpend: updateAutoSpendAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Node);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { bitcoindImportMulti, bitcoindGetAddressStatus } from '../bitcoind';\nimport { bitcoindParams, isWalletAddressNotFoundError } from '../bitcoind'\nimport { FormHelperText, Button, Box, Switch, FormControlLabel } from '@material-ui/core'\n\nlet interval;\nclass BitcoindAddressImporter extends React.Component {\n  static propTypes = {\n    addresses: PropTypes.array.isRequired,\n    client: PropTypes.object.isRequired,\n    autoImport: PropTypes.bool\n  };\n\n  state = {\n    imported: false,\n    importError: \"\",\n    rescan: false,\n    addressesError: \"\",\n    addressPresent: false, // this applies for auto import prop only\n  };\n\n  componentDidMount = () => {\n    if (this.props.autoImport) interval = setInterval(this.checkAddress, 5000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(interval);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.autoImport && prevProps.addresses.length && prevProps.addresses[0] !== this.props.addresses[0]) {\n      clearInterval(interval);\n      interval = setInterval(this.checkAddress, 5000);\n    }\n  }\n\n  render() {\n    const { imported, importError, rescan, addressPresent, addressesError } = this.state;\n    const { autoImport, addresses } = this.props;\n\n     return (\n      <Box>\n        {\n          imported && rescan && <FormHelperText>{this.pluralOrSingularAddress()} imported, rescan of your node may take some time.</FormHelperText>\n        }\n        {\n          imported && !rescan && <FormHelperText>{this.pluralOrSingularAddress()} imported.</FormHelperText>\n        }\n      { addressPresent &&\n        <div>\n          <FormHelperText>Address {imported ? 'imported to' : 'found in'} your wallet!</FormHelperText>\n          <FormHelperText>You can properly determine your addresses current balance.</FormHelperText>\n          <FormHelperText>\n            Your node may need to do a rescan to determine if an address has been previously used. If you\n            are sure you have done so, or you are sure of the address's history, you may proceed.  If you\n            are unsure, you may select \"rescan\" and import.\n          </FormHelperText>\n        </div>\n      }\n\n      {\n        !addressPresent && autoImport &&\n        <FormHelperText>Checking node for presence of {this.pluralOrSingularAddress()}</FormHelperText>\n      }\n      {\n        !addressPresent && !autoImport &&\n        <FormHelperText>To get accurate information from your node your {this.pluralOrSingularAddress()}\n          will need to be imported to your node.  Importing will give you accurate balance information\n          however to know if an address hase been used previously, a rescan needs to take place.\n        </FormHelperText>\n      }\n      <FormHelperText error>{addressesError}</FormHelperText>\n        {/* <FormHelperText>Addresses used with bitcoind node must be imported to your node.  If you have not already, you can import now.</FormHelperText> */}\n        <p>\n          {/* Import {this.pluralOrSingularAddress()} to your node? */}\n          <Box component=\"span\" ml={2}>\n            <Button\n              variant=\"contained\"\n              disabled = { !rescan && (addressPresent  || addresses.length === 0) }\n              onClick={this.import}>Import</Button>\n          </Box>\n          <Box component=\"span\" ml={2}>\n            <FormControlLabel\n              control={\n                <Switch\n                checked={rescan}\n                onChange={this.handleRescan}\n                color=\"secondary\"\n                />\n              }\n              label=\"Rescan\"\n            />\n\n          </Box>\n        </p>\n        <FormHelperText error>{importError}</FormHelperText>\n\n      </Box>\n    )\n  }\n\n  pluralOrSingularAddress() {\n    const { addresses } = this.props;\n    return `address${addresses.length > 1 ? 'es' : ''}`\n  }\n\n  handleRescan = (e) => {\n    this.setState({rescan: e.target.checked})\n  }\n\n  checkAddress = async () => {\n    const { client, addresses, autoImport } = this.props;\n    const address = addresses[0] // TODO: loop, or maybe just check one\n\n    try {\n      const status = await bitcoindGetAddressStatus({ // TODO: use this to warn if spent\n        ...bitcoindParams(client),\n        address\n      });\n      if (typeof status.used !== 'undefined') {\n        this.setState({addressPresent: true, addressesError: \"\"});\n        clearInterval(interval);\n      }\n    } catch (e) {\n      // e.status 401 e.statusText\n      // e.status 500 e.data.error.message\n      const status = (e.response && e.response.status) || 'unknown'\n      if (autoImport\n        && isWalletAddressNotFoundError(e) && !this.state.rescan) {\n        this.import();\n      }\n      this.setState({\n        addressesError: status === 401 ?\n        e.response.statusText : status === 500 ?\n        e.response.data.error.message :\n        e.message || \"An unknown address error occured\"})\n      console.log(status, e.response)\n    }\n\n  }\n\n  import = () => {\n    const { addresses, client, importCallback } = this.props;\n    const { rescan } = this.state;\n    const label = \"\"; // TODO: do we want to allow to set? or set to \"caravan\"?\n    bitcoindImportMulti({\n      ...bitcoindParams(client),\n      ...{addresses, label, rescan}\n    })\n    .then(response => {\n      const responseError = response.result.reduce((e, c) => {\n        return (c.error && c.error.message) || e\n      }, \"\")\n      this.setState({\n        importError: responseError,\n        imported: responseError === \"\"\n      });\n      if (typeof importCallback !== 'undefined') {\n        importCallback(response.result)\n      }\n    })\n    .catch(e => {\n      this.setState({\n        importError: \"Unable to import, check your settings and try again\",\n        imported: false\n      });\n    });\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    client: state.client,\n  };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BitcoindAddressImporter);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from \"bignumber.js\";\nimport {\n  fetchAddressUTXOs,\n  getAddressStatus,\n} from \"../../blockchain\";\n\n// Components\nimport {\n  Button,\n  FormGroup, FormControlLabel, Checkbox, FormLabel,\n  Grid, Box,\n  Table, TableHead, TableBody,\n  TableRow, TableCell, TablePagination, TableSortLabel,\n} from '@material-ui/core';\nimport Node from \"./Node\";\nimport BitcoindAddressImporter from '../BitcoindAddressImporter';\nimport { WALLET_MODES } from '../../actions/walletActions';\n\nclass NodeSet extends React.Component {\n\n  static propTypes = {\n    depositNodes: PropTypes.object.isRequired,\n    changeNodes: PropTypes.object.isRequired,\n    canLoad: PropTypes.bool,\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n  };\n\n  state = {\n    page: 0,\n    nodesPerPage: 10,\n    change: false,\n    spend: false,\n    filterIncludeSpent: false,\n    filterIncludeZeroBalance: false,\n    orderBy: \"bip32Path\",\n    orderDir: \"asc\"\n  };\n\n  unknownAddresses = [];\n\n  render() {\n    const {page, nodesPerPage, change, orderBy, orderDir} = this.state;\n    const {walletMode, canLoad, client} = this.props\n    const spending = walletMode === WALLET_MODES.SPEND;\n    const useAddressImporter = !spending && client.type === \"private\";\n\n    if (useAddressImporter) {\n      this.unknownAddresses = this.getUnknownAddressNodes()\n        .map(node => node.multisig.address) ;\n    }\n    return (\n      <Grid item md={12}>\n        { useAddressImporter &&\n          <BitcoindAddressImporter\n            addresses={this.unknownAddresses}\n            importCallback={this.addressesImported}\n            />\n        }\n      <Table style={{tableLayout: \"fixed\"}}>\n            <TableHead>\n              <TableRow>\n                {spending && <TableCell width={62}>Spend?</TableCell>}\n                <TableCell width={106}>\n                  <TableSortLabel\n                    active={orderBy === \"bip32Path\"}\n                    direction={orderDir}\n                    onClick={() => this.sortAddresses(\"bip32Path\")}\n                  >BIP32 Path</TableSortLabel>\n\n                </TableCell>\n                <TableCell width={78}>\n                  <TableSortLabel\n                    active={orderBy === \"utxos\"}\n                    direction={orderDir}\n                    onClick={() => this.sortAddresses(\"utxos\")}\n                  >UTXOs</TableSortLabel>\n\n                </TableCell>\n                <TableCell width={82}>\n                  <TableSortLabel\n                    active={orderBy === \"balanceSats\"}\n                    direction={orderDir}\n                    onClick={() => this.sortAddresses(\"balanceSats\")}\n                  >Balance</TableSortLabel>\n\n                </TableCell>\n                <TableCell width={82}>\n                  <TableSortLabel\n                    active={orderBy === \"time\"}\n                    direction={orderDir}\n                    onClick={() => this.sortAddresses(\"time\")}\n                  >Date</TableSortLabel>\n\n                </TableCell>\n                <TableCell>Address</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderNodes()}\n            </TableBody>\n          </Table>\n          <Grid container>\n            <Grid item md={6}>\n              <TablePagination\n                component=\"div\"\n                count={this.rowCount()}\n                rowsPerPage={nodesPerPage}\n                page={page}\n                backIconButtonProps={{\n                  'aria-label': 'previous page',\n                }}\n                nextIconButtonProps={{\n                  'aria-label': 'next page',\n                }}\n                onChangePage={this.handlePageChange}\n                onChangeRowsPerPage={this.handleChangeRowsPerPage}\n              />\n            </Grid>\n            <Grid item md={2}>\n              {canLoad && page === this.pageCount() - 1 && <Button type=\"button\" variant=\"contained\" color=\"secondary\" onClick={this.generateAnotherPage}>More</Button>}\n            </Grid>\n            <Grid item md={4}>\n              <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.toggleChange}>{change ? \"View Deposits\" : \"View Change\"}</Button>\n            </Grid>\n          </Grid>\n          {!spending && this.renderFilters()}\n\n        </Grid>\n    );\n  }\n\n  sortAddresses = (key) => {\n    const {orderBy, orderDir} = this.state;\n    if (key === orderBy) {\n      this.setState({page:0, orderDir: orderDir === \"asc\" ? \"desc\" : \"asc\"})\n    } else {\n      this.setState({page:0, orderBy: key})\n    }\n  }\n\n  renderFilters = () => {\n    const { filterIncludeSpent, filterIncludeZeroBalance } = this.state\n    return (\n    <FormGroup row>\n      <FormLabel component=\"h2\"><Box mr={3}>Show Additional</Box></FormLabel>\n      <FormControlLabel control={\n        <Checkbox\n          checked={filterIncludeSpent}\n          value=\"filterIncludeSpent\"\n          onChange={this.filterAddresses}\n        />} label=\"Spent Addresses\" />\n      <FormControlLabel control={\n        <Checkbox\n          checked={filterIncludeZeroBalance}\n          value=\"filterIncludeZeroBalance\"\n          onChange={this.filterAddresses}\n        />} label=\"Zero Balance\" />\n    </FormGroup>\n    )\n  }\n\n  filterAddresses = (event, checked) => {\n    this.setState({[event.target.value]: checked, page: 0});\n  }\n\n  getUnknownAddressNodes = () => {\n    const {changeNodes, depositNodes} = this.props\n    return Object.values(depositNodes).concat(Object.values(changeNodes))\n    .filter(node => !node.addressKnown);\n  }\n\n\n  addressesImported = async result => {\n    // this will give me an array [{success: true/false}...]\n    // need to loop through and mark nodes as addressKnown\n    const { updateNode, client, network } = this.props;\n    const nodes = []\n    const unknown = this.getUnknownAddressNodes();\n    result.forEach((addr, i) => {\n      if (addr.success) nodes.push(unknown[i]); // can now set to known and refresh status\n    });\n\n    nodes.forEach(async node => {\n      const utxos = await fetchAddressUTXOs(node.multisig.address, network, client);\n      const addressStatus = await getAddressStatus(node.multisig.address, network, client);\n      let updates;\n      if (utxos) {\n        const balanceSats = utxos\n              .map((utxo) => utxo.amountSats)\n              .reduce(\n                (accumulator, currentValue) => accumulator.plus(currentValue),\n                new BigNumber(0));\n        updates = {balanceSats, utxos, fetchedUTXOs: true, fetchUTXOsError: ''}\n      }\n\n\n      updateNode(node.change, {\n        bip32Path: node.bip32Path,\n        addressKnown: true,\n        ...updates,\n        addressStatus,\n      });\n    });\n  }\n\n  getNodeSet = () => {\n    const { changeNodes, depositNodes} = this.props;\n    const { change, filterIncludeSpent, filterIncludeZeroBalance, orderBy, orderDir } = this.state\n    const nodes = change ? changeNodes : depositNodes\n\n    let nodeSet = []\n    Object.values(nodes).forEach(node => {\n      if (node.balanceSats.isGreaterThan(0)) {\n        nodeSet.push(node);\n      } else if (filterIncludeZeroBalance && node.balanceSats.isEqualTo(0) && !node.addressUsed) {\n        nodeSet.push(node);\n      } else if (filterIncludeSpent && node.addressUsed) {\n        nodeSet.push(node);\n      }\n    })\n\n    nodeSet = nodeSet.sort((a, b) => {\n      const direction = orderDir === \"asc\" ? 1 : -1\n      if (orderBy === \"bip32Path\") {\n        const aint = parseInt(a.bip32Path.split(\"/\").reverse()[0],10)\n        const bint = parseInt(b.bip32Path.split(\"/\").reverse()[0],10)\n        return aint > bint ? direction : -direction\n      } else if (orderBy === \"balanceSats\") {\n        if (a.balanceSats.isEqualTo(b.balanceSats)) return 0\n        else return a.balanceSats.isGreaterThan(b.balanceSats) ?  direction : -direction\n      } else if (orderBy === \"utxos\") {\n        if (a.utxos.length === b.utxos.length) return 0\n        else return a.utxos.length > b.utxos.length ?  direction : -direction\n      } else if (orderBy === \"time\") {\n        if (a.utxos.length === 0) {\n          return b.utxos.length === 0 ? 0 : direction\n        }\n        if (b.utxos.length === 0) {\n          return a.utxos.length === 0 ? 0 : -direction\n        }\n        const amin = Math.min(...a.utxos.map(utxo => utxo.time));\n        const bmin = Math.min(...b.utxos.map(utxo => utxo.time));\n        if (isNaN(amin) && isNaN(bmin)) return 0\n        if (isNaN(amin)) return direction;\n        if (isNaN(bmin)) return -direction;\n        return amin > bmin ? direction : -direction\n      }\n    })\n\n    nodeSet = nodeSet.reduce((nodesObject, currentNode) => {\n        nodesObject[currentNode.bip32Path] = currentNode;\n        return nodesObject;\n    },{});\n\n    return nodeSet\n  }\n\n  renderNodes = () => {\n    const {page, nodesPerPage, change, spend} = this.state;\n    const {addNode, updateNode} = this.props;\n    const startingIndex = (page) * nodesPerPage;\n    const nodesRows = [];\n    const nodeSet = this.getNodeSet();\n    for (let index=0; index < nodesPerPage; index++) {\n      const whichOne = startingIndex + index;\n      if(whichOne > Object.keys(nodeSet).length -1) break;\n      const bip32Path = Object.values(nodeSet)[whichOne].bip32Path;\n      const nodeRow = <Node\n        key={bip32Path}\n        bip32Path={bip32Path}\n        addNode={addNode}\n        updateNode={updateNode}\n        change={change}\n        spend={spend}\n        />;\n      nodesRows.push(nodeRow);\n    }\n    return nodesRows;\n  }\n\n  handlePageChange = (e, selected) => {\n    const page = selected // + 1;\n    this.setState({page});\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    this.setState({nodesPerPage: e.target.value, page: 0});\n  }\n\n  bip32Path = (index) => {\n    const {change} = this.state;\n    const changePath = (change ? \"1\" : \"0\");\n    return `m/${changePath}/${index}`;\n  }\n\n  pageCount = () => {\n    const {nodesPerPage} = this.state;\n    return Math.ceil(this.rowCount() / nodesPerPage);\n  }\n\n  rowCount = () => {\n    const nodeSet = this.getNodeSet();\n    return Object.keys(nodeSet).length;\n  }\n\n  generateAnotherPage = async () => {\n    const {addNode, depositNodes, changeNodes} = this.props;\n    const {change, nodesPerPage, page} = this.state;\n    const startingIndex = Object.keys(change ? changeNodes : depositNodes).length;\n    for (let index=0; index < nodesPerPage + (nodesPerPage - (startingIndex % nodesPerPage)); index++) {\n      const bip32path = this.bip32Path(startingIndex + index);\n      await addNode(change, bip32path);\n    }\n    if (startingIndex % nodesPerPage === 0) // otherwise we will be filling this page first\n      this.setState({page: page + 1});\n  }\n\n  toggleChange = () => {\n    const {change} = this.state;\n    this.setState({change: (!change), page: 0});\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    changeNodes: state.wallet.change.nodes,\n    depositNodes: state.wallet.deposits.nodes,\n    walletMode: state.wallet.info.walletMode,\n    client: state.client,\n    ...state.settings,\n\n  };\n}\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NodeSet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateOutputAmount,\n} from 'unchained-bitcoin';\nimport BigNumber from \"bignumber.js\";\n\n// Actions\nimport {\n  setOutputAddress,\n  setOutputAmount,\n  deleteOutput,\n  setChangeOutputIndex\n} from '../../actions/transactionActions';\n\n// Components\nimport { Grid, Tooltip, TextField, IconButton, InputAdornment } from '@material-ui/core';\nimport AccountBalanceWalletOutlinedIcon from '@material-ui/icons/AccountBalanceWallet';\nimport { Delete, AddCircle, RemoveCircle } from '@material-ui/icons';\n\n// Assets\nimport styles from './styles.module.scss';\n\nclass OutputEntry extends React.Component {\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    addressError: PropTypes.string.isRequired,\n    amountError: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    setAddress: PropTypes.func.isRequired,\n    setAmount: PropTypes.func.isRequired,\n    remove: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {outputs, finalizedOutputs, address, amount, addressError, amountError,\n           changeOutputIndex, number} = this.props;\n\n    return (\n      <Grid container>\n\n        <Grid item xs={7}>\n          <TextField\n            fullWidth\n            placeholder=\"Address\"\n            name=\"destination\"\n            className={styles.outputsFormInput}\n            disabled={finalizedOutputs || changeOutputIndex === number}\n            onChange={this.handleAddressChange}\n            value={address}\n            error={this.hasAddressError()}\n            helperText={addressError}\n            InputProps={this.renderChangeAdornment()}\n\n          />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TextField\n            fullWidth\n            placeholder=\"Amount (BTC)\"\n            className={styles.outputsFormInput}\n            name=\"amount\"\n            disabled={finalizedOutputs || changeOutputIndex === number}\n            onChange={this.handleAmountChange}\n            value={amount}\n            error={this.hasAmountError()}\n            helperText={amountError}\n            /* type=\"number\" */\n            /* InputProps={{ */\n            /*   min: \"0\",  */\n            /*   max: \"21000000\",  */\n            /*   step: \"0.00000001\" */\n            /* }} */\n          />\n        </Grid>\n\n        {(!finalizedOutputs) && this.hasBalanceError() && this.isBalanceable() &&\n         <Grid item xs={1}>\n           <Tooltip title={`${this.balanceAction()} to ${this.autoBalancedAmount().toString()}`} placement=\"top\">\n             <small>\n               <IconButton onClick={this.handleBalance}>\n                 {this.balanceAction() === \"Increase\" ? <AddCircle /> : <RemoveCircle />}\n               </IconButton>\n             </small>\n           </Tooltip>\n         </Grid>}\n\n        {(!finalizedOutputs) && outputs.length > 1 &&\n         <Grid item xs={1}>\n           <Tooltip title=\"Remove Output\" placement=\"top\">\n             <IconButton onClick={this.handleDelete}>\n               <Delete/>\n             </IconButton>\n           </Tooltip>\n         </Grid>}\n\n      </Grid>\n    );\n  }\n\n  //\n  // Address\n  //\n\n  addChangeAddress = () => {\n    const {changeNode, number, setAddress, setChangeOutput} = this.props;\n    setAddress(number, changeNode.multisig.address);\n    setChangeOutput(number);\n    this.handleBalance();\n  }\n\n  renderChangeAdornment = () => {\n    const {changeNode, number, changeOutputIndex, address } = this.props;\n    if (changeNode !== null) {\n      let title, disable=false\n      if (changeOutputIndex === 0 && address === '') {\n        title = 'Set to wallet change address';\n      } else if(number === changeOutputIndex) {\n        title = 'Your change will go here.'\n        disable = true;\n      } else return {}\n      return (\n        {\n          /* min: \"0\", */\n          /* max: \"1000\", */\n          /* step: \"any\", */\n          endAdornment: <InputAdornment position=\"end\">\n            <Tooltip placement='top' title={title}>\n              <small>\n                <IconButton onClick={this.addChangeAddress} disabled={disable}>\n                  <AccountBalanceWalletOutlinedIcon />\n                </IconButton>\n              </small>\n            </Tooltip>\n          </InputAdornment>,\n        }\n      )\n    } else return {}\n\n  }\n\n  handleAddressChange = (event) => {\n    const {number, setAddress} = this.props;\n    setAddress(number, event.target.value);\n  }\n\n  hasAddressError = () => {\n    const {addressError} = this.props;\n    return addressError !== '';\n  }\n\n  //\n  // Amount\n  //\n\n  handleAmountChange = (event) => {\n    const {number, setAmount} = this.props;\n    setAmount(number, event.target.value);\n  }\n\n  hasAmountError = () => {\n    const {amountError} = this.props;\n    return amountError !== '';\n  }\n\n  //\n  // Balance\n  //\n\n  isNotBalanceable = () => {\n    const {number, outputs, feeError, amountError, amount, inputsTotalSats} = this.props;\n    if (feeError !== '') { return true; }\n    for (var i = 0; i < outputs.length; i++) {\n      if (i !== (number - 1)) {\n        if (outputs[i].amountError !== '' || outputs[i].amount === '') {\n          return true;\n        }\n      }\n    }\n    const newAmount = this.autoBalancedAmount();\n    if (validateOutputAmount(bitcoinsToSatoshis(newAmount), inputsTotalSats) !== '') { return true; }\n    if (amountError === '' && (newAmount === new BigNumber(amount))) { return true; }\n    return false;\n  }\n\n  isBalanceable = () => (!this.isNotBalanceable())\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  autoBalancedAmount = () => {\n    const {number, fee, inputsTotalSats, outputs} = this.props;\n    const outputTotalSats = outputs\n          .filter((output, i) => i !== number - 1)\n          .map((output) => output.amountSats)\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0));\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    return satoshisToBitcoins(inputsTotalSats.minus(outputTotalSats.plus(feeSats)));\n  }\n\n  balanceAction = () => {\n    const {balanceError, changeOutputIndex, number} = this.props;\n    if ((!this.hasBalanceError()) || this.isNotBalanceable()) {return null; }\n    if( changeOutputIndex === number) this.handleBalance();\n    return balanceError.split(\" \")[0];\n  }\n\n  handleBalance = () => {\n    const {number, setAmount} = this.props;\n    setAmount(number, this.autoBalancedAmount().toString());\n  }\n\n  //\n  // State\n  //\n\n  hasError = () => {\n    return this.hasAddressError() || this.hasAmountError();\n  }\n\n  handleDelete = () => {\n    const {number, remove} = this.props;\n    remove(number);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.spend.transaction,\n    ...state.spend.transaction.outputs[ownProps.number - 1],\n    changeNode: state.wallet.change.nextNode,\n  };\n}\n\nconst mapDispatchToProps =  {\n  setAddress: setOutputAddress,\n  setAmount: setOutputAmount,\n  remove: deleteOutput,\n  setChangeOutput: setChangeOutputIndex,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { map } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { fetchFeeEstimate } from '../../blockchain';\nimport {\n  bitcoinsToSatoshis,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\n\n// Actions\nimport {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n} from '../../actions/transactionActions';\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  Grid, Button, Tooltip, TextField,\n  Box, IconButton, InputAdornment,\n} from \"@material-ui/core\";\nimport {Speed} from \"@material-ui/icons\";\nimport OutputEntry from './OutputEntry';\n\nclass OutputsForm extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeRate: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n    setFee: PropTypes.func.isRequired,\n    addOutput: PropTypes.func.isRequired,\n    setOutputAmount: PropTypes.func.isRequired,\n    resetOutputs: PropTypes.func.isRequired,\n    finalizeOutputs: PropTypes.func.isRequired,\n    feeRateError: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    balanceError: PropTypes.string.isRequired,\n  };\n\n  state = {\n    feeRateFetchError: '',\n  };\n\n  componentDidMount = () => {\n    this.initialOutputState();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const { signatureImporters } = this.props;\n    const finalizedCount = Object.keys(signatureImporters).reduce((o, k) => o + (signatureImporters[k].finalized), 0);\n    if(finalizedCount === 0) this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  async initialOutputState() {\n    const { inputs, outputs } = this.props;\n    await this.getFeeEstimate();\n    const {inputsTotalSats, fee, setOutputAmount} = this.props;\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    const outputAmount = satoshisToBitcoins(inputsTotalSats.minus(feeSats));\n    // onliy initialize once so we don't lose state\n    if (inputs.length && outputs[0].amount === '') setOutputAmount(1, outputAmount.toFixed(8));\n  }\n\n  render() {\n    const {feeRate, fee, finalizedOutputs, feeRateError, feeError, balanceError} = this.props;\n    const {feeRateFetchError} = this.state;\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Define Outputs\"/>\n        <CardContent>\n            <Box>\n              <Grid>\n              {this.renderOutputs()}\n              </Grid>\n\n              <Grid item container spacing={1}>\n\n                <Grid item xs={4}>\n                    <Button\n                      variant=\"contained\"\n                      disabled={finalizedOutputs}\n                      onClick={this.handleAddOutput}\n                    >\n                      Add output\n                    </Button>\n                </Grid>\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Fee Rate (Sats/byte)\"\n                    value={feeRate}\n                    placeholder=\"Sats/byte\"\n                    name=\"fee_rate\"\n                    disabled={finalizedOutputs}\n                    onChange={this.handleFeeRateChange}\n                    error={this.hasFeeRateError()}\n                    helperText={feeRateFetchError || feeRateError}\n                    /* type=\"number\" */\n                    InputProps={{\n                      /* min: \"0\", */\n                      /* max: \"1000\", */\n                      /* step: \"any\", */\n                      endAdornment: <InputAdornment position=\"end\">\n                                      <Tooltip placement='top' title='Estimate best rate'>\n                                        <small>\n                                          <IconButton onClick={this.getFeeEstimate}  disabled={finalizedOutputs}>\n                                            <Speed />\n                                          </IconButton>\n                                        </small>\n                                      </Tooltip>\n                                    </InputAdornment>,\n                    }}\n                  />\n                </Grid>\n\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Estimated Fees (BTC)\"\n                    placeholder=\"BTC\"\n                    name=\"fee_total\"\n                    disabled={finalizedOutputs}\n                    value={fee}\n                    onChange={this.handleFeeChange}\n                    error={this.hasFeeError()}\n                    helperText={feeError}\n                    /* type=\"number\" */\n                    /* InputProps={{ */\n                    /*   min: \"0.00000001\", */\n                    /*   max: \"0.025\", */\n                    /*   step: \"0.00000001\", */\n                    /* }} */\n                  />\n                </Grid>\n\n                <Grid item xs={2}/>\n\n              </Grid>\n\n              <Grid item container spacing={1}>\n                <Grid item xs={4}/>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Inputs Total\"\n                    readOnly={true}\n                    value={this.inputsTotal().toString()}\n                    disabled={finalizedOutputs}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Outputs & Fee Total\"\n                    value={this.outputsAndFeeTotal().toString()}\n                    error={this.hasBalanceError()}\n                    disabled={finalizedOutputs}\n                    helperText={balanceError}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={2}/>\n              </Grid>\n\n              <Grid item>\n\n                <Grid container spacing={3}>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={this.gatherSignaturesDisabled()}\n                      onClick={this.handleFinalize}\n                    >\n                      Gather Signatures\n                    </Button>\n                  </Grid>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      disabled={finalizedOutputs}\n                      onClick={this.handleReset}\n                    >\n                      Reset Outputs\n                    </Button>\n                  </Grid>\n\n                </Grid>\n\n              </Grid>\n\n            </Box>\n\n\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderOutputs = () => {\n    const { outputs } = this.props;\n    return map(outputs).map((output, i) => (\n      <Grid container key={i}>\n        <OutputEntry number={i+1} />\n      </Grid>\n    ));\n  }\n\n  inputsTotal = () => {\n    const {inputsTotalSats} = this.props;\n    return satoshisToBitcoins(inputsTotalSats);\n  }\n\n  outputsAndFeeTotal = () => {\n    const {outputs, fee, inputs} = this.props;\n    if (!inputs.length) return '';\n    return outputs\n      .map((output) => new BigNumber(output.amount || 0))\n      .reduce(\n        (accumulator, currentValue) => accumulator.plus(currentValue),\n        new BigNumber(0))\n      .plus(new BigNumber(fee));\n  }\n\n  hasFeeRateFetchError = () => {\n    const {feeRateFetchError} = this.state;\n    return feeRateFetchError !== '';\n  }\n\n  hasFeeRateError = () => {\n    const {feeRateError} = this.props;\n    return feeRateError !== '';\n  }\n\n  hasFeeError = () => {\n    const {feeError} = this.props;\n    return feeError !== '';\n  }\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  hasError = () => {\n    return (\n      this.hasFeeRateFetchError()\n        || this.hasFeeRateError()\n        || this.hasFeeError()\n        || this.hasBalanceError()\n    );\n  }\n\n  handleAddOutput = () => {\n    const {addOutput} = this.props;\n    addOutput();\n  };\n\n  handleFeeRateChange = (event) => {\n    const {setFeeRate, inputs} = this.props;\n    if (inputs.length) setFeeRate(event.target.value);\n  }\n\n  handleFeeChange = (event) => {\n    const {setFee} = this.props;\n    setFee(event.target.value);\n  }\n\n  handleFinalize = () => {\n    const { finalizeOutputs } = this.props;\n    finalizeOutputs(true);\n  };\n\n  handleReset = () => {\n    const { resetOutputs } = this.props;\n    resetOutputs();\n    this.initialOutputState();\n  }\n\n  getFeeEstimate = async () => {\n    const {client, network, setFeeRate} = this.props;\n    let newFeeRate = 1;\n    let feeRateFetchError = '';\n    try {\n      newFeeRate = await fetchFeeEstimate(network, client);\n    } catch (e){\n      console.error(e);\n      feeRateFetchError = 'There was an error fetching the fee rate.';\n    } finally {\n      setFeeRate(newFeeRate.toString());\n      this.setState({feeRateFetchError});\n    }\n  }\n\n  gatherSignaturesDisabled = () => {\n    const {finalizedOutputs, outputs, inputs} = this.props;\n    if (inputs.length === 0) return true;\n    if (finalizedOutputs || this.hasError()) { return true; }\n    for (var i=0; i < outputs.length; i++) {\n      const output = outputs[i];\n      if (output.address === '' || output.amount === '' || output.addressError !== '' || output.amountError !== '') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{\n      network: state.settings.network,\n      client: state.client,\n      },\n    ...state.spend.transaction,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n  };\n}\n\nconst mapDispatchToProps = {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputsForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport {\n  Box,\n  TextField,\n  Button,\n} from '@material-ui/core';\n\nclass TextSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    signatureImporter: PropTypes.shape({}).isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n  };\n\n  state = {\n    signatureJSON: '',\n    error: '',\n  };\n\n  render = () => {\n    const { signatureJSON, error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          name=\"signature\"\n          label=\"Signature\"\n          rows={5}\n          value={signatureJSON}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.finalize}\n            disabled={signatureJSON === ''}\n          >\n            Add Signature\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const signatureJSON = event.target.value;\n    let error = '';\n    try {\n      JSON.parse(signatureJSON);\n    } catch(parseError) {\n      error = \"Invalid JSON.\";\n    }\n    this.setState({signatureJSON, error});\n  }\n\n  finalize = () => {\n    const {validateAndSetSignature} = this.props;\n    const {signatureJSON} = this.state;\n    validateAndSetSignature(\n      JSON.parse(signatureJSON),\n      this.setError);\n  }\n\n}\n\nexport default TextSignatureImporter;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  PENDING,\n  ACTIVE,\n} from \"unchained-wallets\";\n\n// Components\nimport QrReader from \"react-qr-reader\";\nimport { Grid, Button, Box, FormHelperText} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\n\nconst QR_CODE_READER_DELAY = 300; // ms?\n\nclass HermitReader extends Component {\n\n  static propTypes = {\n    onStart: PropTypes.func,\n    onSuccess: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    width: PropTypes.string.isRequired,\n    startText: PropTypes.string.isRequired,\n    interaction: PropTypes.object.isRequired,\n  };\n\n  static defaultProps = {\n    width: \"256px\",\n    startText: \"Scan\",\n  }\n  \n  state = {\n    status: PENDING,\n    error: '',\n  };\n\n  render = () => {\n    const {status, error} = this.state;\n    const {interaction, width, startText} = this.props;\n\n    if (status === PENDING) {\n      const commandMessage = interaction.messageFor({state: status, code: \"hermit.command\"});\n      return (\n        <div>\n          <p>{commandMessage.instructions}</p>\n          <Grid container justify=\"center\" className=\"mb-2\">\n            <Copyable text={commandMessage.command}>\n              <code><strong>{commandMessage.mode}&gt;</strong> {commandMessage.command}</code>\n            </Copyable>\n          </Grid>\n          <p>When you are ready, scan the QR code produced by Hermit:</p>\n          <Box mt={2}>\n            <Button  variant=\"contained\" color=\"primary\" className=\"mt-2\" size=\"large\" onClick={this.handleStart}>{startText}</Button>\n          </Box>\n        </div>\n      );\n    } \n\n    if (status === ACTIVE) {\n      return (\n        <Grid container direction=\"column\">\n          <Grid item>\n            <QrReader \n              delay={QR_CODE_READER_DELAY} \n              onError={this.handleError} \n              onScan={this.handleScan}\n              style={{width}}\n              facingMode='user'\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Cancel</Button>\n          </Grid>\n        </Grid>\n      );\n    }\n    \n    if (status === 'error' || status === 'success') {\n      return (\n        <div>\n          <FormHelperText error>{error}</FormHelperText>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Reset</Button>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  handleStart = () => {\n    const {onStart} = this.props;\n    this.setState({status: ACTIVE, error: ''});\n    if (onStart) { onStart(); }\n  }\n\n  handleError = (error) => {\n    const {onClear} = this.props;\n    this.setState({status: 'error', error: error.message});\n    if (onClear) {onClear(); }\n  }\n\n  handleScan = (data) => {\n    const {onSuccess, interaction} = this.props;\n    if (data) {\n      try {\n        const result = interaction.parse(data);\n        onSuccess(result);\n        this.setState({status: 'success'});\n      } catch(e) {\n        this.handleError(e);\n      }\n    }\n  }\n\n  handleStop = () => {\n    const {onClear} = this.props;\n    this.setState({\n      status: PENDING,\n      error: '',\n    });\n    if (onClear) {onClear(); }\n  }\n\n}\n\nexport default HermitReader;\n\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\n\nclass HermitDisplayer extends React.Component {\n\n  static propTypes = {\n    string: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    string: '',\n    width: 120,\n  }\n\n  state = {\n    errorMessage: '',\n  };\n\n  render = () => {\n    const {width, string} = this.props;\n    return (\n      <Copyable text={string} newline={true}>\n        <QRCode size={width} value={string} level={'L'} />\n      </Copyable>\n    );\n  }\n\n}\n\nexport default HermitDisplayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  INFO,\n  WARNING,\n  ERROR,\n} from \"unchained-wallets\";\nimport { \n  Box, Typography, \n  AppBar, Tabs, Tab, Paper,\n  List, ListItem, ListItemIcon, ListItemText,\n} from '@material-ui/core';\nimport { Info, Warning, Error } from '@material-ui/icons';\n\nimport \"./InteractionMessages.css\";\n\nclass MessagesList extends React.Component {\n\n  static propTypes = {\n    messages: PropTypes.array.isRequired,\n  };\n\n  render = () => {\n    const {messages} = this.props;\n    return (\n      <List style={{maxHeight: '400px', overflow: 'auto'}} dense>\n        {messages.map(this.renderMessage)}\n      </List>\n    );\n  }\n\n  renderMessage = (message, key) => {\n    return (\n      <ListItem key={key}>\n        {message.level && \n         <ListItemIcon>\n           {this.messageIcon(message)}\n         </ListItemIcon>}\n        <ListItemText>\n          {this.renderMessageBodyAndSubmessages(message)}\n        </ListItemText>\n      </ListItem>\n    );\n  }\n\n  renderMessageBodyAndSubmessages = (message) => {\n    return (\n      <Box>\n        {this.renderMessageBody(message)}\n        {message.messages && \n         <List dense>\n           {message.messages.map(this.renderMessage)}\n         </List>}\n      </Box>\n    );\n  }\n\n  renderMessageBody = (message) => {\n    return (\n      <Box>\n        {message.image && <Box align=\"center\"><img className=\"InteractionMessages-image\" src={`data:${message.image.mimeType};base64, ${message.image.data}`} alt={message.image.label} /></Box>}\n        <p>{message.text}</p>\n      </Box>\n    );\n  }\n\n  messageIcon = (message) => {\n    switch (message.level) {\n    case INFO:\n      return <Info />;\n    case WARNING:\n      return <Warning />;\n    case ERROR:\n      return <Error />;\n    default:\n      return null;\n    }    \n  }\n  \n}\n\nclass VersionTabPanel extends React.Component {\n\n  static propTypes = {\n    messages: PropTypes.array.isRequired,\n    version: PropTypes.string.isRequired,\n    currentVersion: PropTypes.string.isRequired,\n  };\n\n  render = () => {\n    const {version, currentVersion} = this.props;\n    return (\n      <Box \n        role=\"tabpanel\"\n        hidden={version !== currentVersion} \n        id={`interactionMessages-tabpanel-${version}`} \n        aria-labelledby={`interactionMessages-tab-${version}`}>\n        {version === currentVersion && <MessagesList messages={this.filteredMessages()} />}\n      </Box>\n    );\n  }\n\n  filteredMessages = () => {\n    const {messages, version} = this.props;\n    return messages.filter((message) => {\n      if (message.version) {\n        return (message.version === version);\n      } else {\n        return true;\n      }\n    });\n  }\n\n}\n\nclass InteractionMessages extends React.Component {\n\n  static propTypes = {\n    messages: PropTypes.array.isRequired,\n    excludeCodes: PropTypes.array.isRequired,\n  };\n\n  static defaultProps = {\n    messages: [],\n    excludeCodes: [],\n  }\n\n  state = {\n    currentVersion: '',\n  };\n\n  render = () => {\n    const {messages, versions} = this.filteredMessages();\n    const currentVersion = this.currentVersion(versions);\n    if (versions.length < 2) {\n      return (<MessagesList messages={messages} />);\n    } else {\n      return (\n        <Box>\n          <Typography variant=\"h6\">\n            Version\n          </Typography>\n          <Paper square>\n            <Tabs value={currentVersion} onChange={this.handleChange} aria-label=\"interactionMessages-version\">\n              {versions.map((version, i) => <Tab key={i} value={version} label={version} id={`interactionMessages-tab-${version}`} aria-controls={`interactionMessages-tabpanel-${version}`}/>)}\n            </Tabs>\n          </Paper>\n          {versions.map((version, i) => (<VersionTabPanel key={i} version={version} currentVersion={currentVersion} messages={messages} />))}\n        </Box>\n      );\n    }\n  }\n\n  currentVersion = (versions) => {\n    const {currentVersion} = this.state;\n    if (currentVersion) {\n      return currentVersion;\n    } else {\n      return versions[versions.length -1];\n    }\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({currentVersion: newValue});\n  }\n\n  filteredMessages = () => {\n    const {messages, excludeCodes} = this.props;\n    let filteredMessages = [];\n    let versions = [];\n    messages.forEach((message) => {\n      for (let i=0; i < excludeCodes.length; i++) {\n        const excludeCode = excludeCodes[i];\n        if ((message.code || '').includes(excludeCode)) { return; }\n      }\n      filteredMessages.push(message);\n      if (message.version && (!versions.includes(message.version))) {\n        versions.push(message.version);\n      }\n    });\n    return {versions, messages: filteredMessages};\n  }\n}\n\nexport default InteractionMessages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  HERMIT,\n  PENDING,\n  UNSUPPORTED,\n  SignMultisigTransaction,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Grid,\n  Box,\n  TextField,\n  Button,\n  FormHelperText,\n} from '@material-ui/core';\nimport HermitReader from \"../Hermit/HermitReader\";\nimport HermitDisplayer from \"../Hermit/HermitDisplayer\";\nimport InteractionMessages from '../InteractionMessages';\n\nclass HermitSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bip32PathError: '',\n      bip32PathFinalized: false,\n      signatureError: '',\n      status: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    const bip32Paths = inputs.map((input) => {\n      if (typeof input.bip32Path === 'undefined') return signatureImporter.bip32Path; // pubkey path\n      return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}` // xpub/pubkey slice away the m, keep /\n    });\n\n    return SignMultisigTransaction({keystore: HERMIT, network, inputs, outputs, bip32Paths});\n  }\n\n  render = () => {\n    const {signatureImporter, disableChangeMethod, resetBIP32Path} = this.props;\n    const {bip32PathError, signatureError, status} = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return (\n        <InteractionMessages messages={interaction.messagesFor({state: status})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n      );\n    }\n    return (\n      <Box mt={2}>\n\n        <Grid container>\n\n          <Grid item md={10}>\n            <TextField\n              name=\"bip32Path\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={bip32PathError}\n            />\n          </Grid>\n\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() &&\n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={resetBIP32Path} disabled={status !== PENDING}>Default</Button>}\n          </Grid>\n\n        </Grid>\n\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n\n\n         <Box mt={2}>\n\n           <Grid container justify=\"center\">\n             <Grid item>\n               <HermitDisplayer width={400} string={interaction.request()} />\n             </Grid>\n           </Grid>\n\n           <HermitReader\n             startText=\"Scan Signature QR Code\"\n             interaction={interaction}\n             onStart={disableChangeMethod}\n             onSuccess={this.import}\n             onClear={this.clear} />\n\n           <InteractionMessages messages={interaction.messagesFor({state: status})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n\n           <FormHelperText error>{signatureError}</FormHelperText>\n         </Box>\n      </Box>\n    );\n  }\n\n  import = (signature) => {\n    console.log(\"IMPORTED SIGNATURE:\", signature);\n    const { validateAndSetSignature, enableChangeMethod } = this.props;\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n    validateAndSetSignature(\n      signature,\n      (signatureError) => {this.setState({signatureError});}\n    );\n  }\n\n  clear = () => {\n    const { resetBIP32Path, enableChangeMethod } = this.props;\n    resetBIP32Path();\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => (this.state.bip32PathError !== '')\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, (bip32PathError) => {this.setState({bip32PathError});});\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n}\n\nexport default HermitSignatureImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  multisigRequiredSigners,\n  multisigPublicKeys,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\nimport {\n  PENDING,\n  UNSUPPORTED,\n  ACTIVE,\n  ERROR,\n  ExportPublicKey,\n  SignMultisigTransaction,\n} from 'unchained-wallets';\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid,\n  Table, TableHead, TableBody,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport {Error} from \"@material-ui/icons\";\nimport InteractionMessages from '../InteractionMessages';\n\nclass HardwareWalletSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    fee: PropTypes.string.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      verified: false,\n      verifyError: '',\n      signatureError: '',\n      bip32PathError: '',\n      status: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  interaction = (inConstructor) => {\n    const verified = (inConstructor ? false : this.state.verified);\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    const keystore = signatureImporter.method;\n    if (verified) {\n      const bip32Paths = inputs.map((input) => {\n        if (typeof input.bip32Path === 'undefined') return signatureImporter.bip32Path; // pubkey path\n        return `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}` // xpub/pubkey slice away the m, keep /\n      });\n      return SignMultisigTransaction({network, keystore, inputs, outputs, bip32Paths});\n    } else {\n      let bip32Path, bip32Paths;\n      bip32Path = signatureImporter.bip32Path; // pubkey path\n      if (typeof inputs[0].bip32Path !== 'undefined') {\n        bip32Paths = inputs.map(input => `${signatureImporter.bip32Path}${input.bip32Path.slice(1)}`); // xpub/pubkey slice away the m, keep /\n      }\n      return ExportPublicKey({network, keystore, bip32Path, bip32Paths});\n    }\n  }\n\n  render = () => {\n    const {signatureImporter} = this.props;\n    const {verified, status} = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({state: status})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={10}>\n            <TextField\n              fullWidth\n              name=\"bip32Path\"\n              label=\"BIP32 Path\"\n              type=\"text\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING || verified}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n\n          </Grid>\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() &&\n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={verified || status !== PENDING}>Default</Button>}\n          </Grid>\n        </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          {this.renderAction()}\n        </Box>\n        {this.renderDeviceConfirmInfo()}\n        <InteractionMessages messages={interaction.messagesFor({state: status})} excludeCodes={[\"bip32\"]}/>\n      </Box>\n    );\n  }\n\n  renderDeviceConfirmInfo = () => {\n    const {fee, inputsTotalSats} = this.props;\n    const {verified, status} = this.state;\n\n    if (verified && status === ACTIVE) {\n      return (\n        <Box>\n          <p>Your device will ask you to verify the following information:</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                 <TableCell></TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTargets()}\n              <TableRow hover>\n                <TableCell>Fee</TableCell>\n                <TableCell>{fee}</TableCell>\n              </TableRow>\n              <TableRow hover>\n                <TableCell>Total</TableCell>\n                <TableCell>{satoshisToBitcoins(inputsTotalSats).toString()}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Box>\n      );\n    } else return '';\n  }\n\n  renderTargets = () => {\n    const { outputs } = this.props;\n    return outputs.map((output, i) => {\n      return (\n      <TableRow hover key={i}>\n        <TableCell>Address <code>{output.address}</code></TableCell>\n        <TableCell>{output.amount}</TableCell>\n      </TableRow>\n      );\n    });\n  }\n\n  renderAction = () => {\n    const {verified, verifyError, signatureError, status} = this.state;\n    if (verified) {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={this.sign} disabled={status !== PENDING}>Sign</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{signatureError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" onClick={this.verify} color=\"primary\" disabled={status !== PENDING || this.hasBIP32PathError()}>Verify</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{verifyError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    }\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({state: status, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({state: status, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n  //\n  // Verify\n  //\n\n  verify = async () => {\n    const { disableChangeMethod, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({verifyError: '', status: ACTIVE});\n\n    try {\n      const publicKey = await this.interaction().run();\n      this.verifyPublicKey(publicKey);\n    } catch(e) {\n      console.error(e);\n      this.setState({verifyError: e.message, status: PENDING});\n      enableChangeMethod();\n    }\n  }\n\n  verifyPublicKey = (publicKey) => {\n    const {inputs, signatureImporters, enableChangeMethod} = this.props;\n\n    let verifyError = '';\n    const publicKeys = typeof publicKey === 'string' ? [publicKey] : publicKey;\n\n    for (let inputIndex=0; inputIndex < inputs.length; inputIndex++) {\n      const input = inputs[inputIndex];\n      let publicKeyIndex\n      for(let i = 0; i < publicKeys.length; i++) {\n        publicKeyIndex = multisigPublicKeys(input.multisig).indexOf(publicKeys[i]);\n        if (publicKeyIndex > -1) break;\n      }\n      if (publicKeyIndex < 0) {\n        verifyError = <span><Error />&nbsp; This device does not contain the correct key.  Are you sure the BIP32 path is correct?</span>;\n        break;\n      }\n\n      for (let signatureImporterNum=1; signatureImporterNum < multisigRequiredSigners(input.multisig); signatureImporterNum++) {\n        const otherSignatureImporter = signatureImporters[signatureImporterNum];\n        for(let otherPublicKeyIndex=0; otherPublicKeyIndex < otherSignatureImporter.publicKeys.length; otherPublicKeyIndex++){\n          const otherPublicKey = otherSignatureImporter.publicKeys[otherPublicKeyIndex];\n          if (otherPublicKey === publicKey) {\n            verifyError = <span><Error />A signature from this key was already imported.</span>;\n            break;\n          }\n        }\n        if (verifyError !== '') { break; }\n      }\n      if (verifyError !== '') { break; }\n    }\n\n    this.setState({\n      verified: (verifyError === ''),\n      verifyError,\n      status: PENDING,\n    });\n    enableChangeMethod();\n  }\n\n  //\n  // Sign\n  //\n\n  sign = async () => {\n    const { disableChangeMethod, validateAndSetSignature, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({signatureError: '', status: ACTIVE});\n\n    try {\n      const signature = await this.interaction().run();\n      validateAndSetSignature(\n        signature,\n        (signatureError) => {\n          const stateUpdate = {signatureError};\n          if (signatureError !== '') stateUpdate.status = PENDING;\n          this.setState(stateUpdate);\n        });\n    } catch(e) {\n      console.error(e);\n      this.setState({signatureError: e.message, status: PENDING});\n    }\n    enableChangeMethod();\n  }\n\n}\n\nexport default HardwareWalletSignatureImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { Grid, IconButton, TextField } from '@material-ui/core';\nimport { Check, Clear, Edit } from '@material-ui/icons';\n\nclass EditableName extends React.Component {\n\n  static propTypes =  {\n    number: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n  };\n\n  state = {\n    editing: false,\n    newName: '',\n    error: '',\n  };\n\n  componentDidMount = () => {\n    const {name} = this.props;\n    this.setState({newName: name});\n  }\n\n  render = () => {\n    const {name} = this.props;\n    const {editing, newName, error} = this.state;\n    if (editing) {\n      // <Form onSubmit={this.submit} inline>\n      return (\n        <Grid container alignItems=\"center\">\n\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              value={newName}\n              onChange={this.handleChange}\n              error={this.hasError()}\n              helperText={error}\n            />\n          </Grid>\n\n          <Grid item>\n            <IconButton size=\"small\" onClick={this.submit} disabled={this.hasError()}>\n              <Check />\n            </IconButton>\n          </Grid>\n\n          <Grid item>\n            <IconButton color=\"secondary\" size=\"small\" onClick={this.cancel}>\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <span>\n          <IconButton size=\"small\" onClick={this.startEditing}>\n            <Edit />\n          </IconButton>\n          &nbsp;\n          {name}\n        </span>\n      );\n    }\n  }\n\n  hasError = () => (this.state.error !== '')\n\n  startEditing = (event) => {\n    const {name} = this.props;\n    event.preventDefault();\n    this.setState({editing: true, newName: name});\n  }\n\n  handleChange = (event) => {\n    const newName = event.target.value;\n    let error = '';\n    if (newName === null || newName === undefined || newName === '') {\n      error =  \"Name cannot be blank.\";\n    }\n    this.setState({newName, error});\n  }\n\n  submit = () => {\n    const {setName, number} = this.props;\n    const {newName} = this.state;\n    setName(number, newName);\n    this.setState({editing: false});\n  }\n\n  cancel = () => {\n    const {name} = this.props;\n    this.setState({error: '', newName: name, editing: false});\n  }\n\n}\n\nexport default EditableName;\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const RESET_SIGNATURES = 'RESET_SIGNATURES';\n\nexport const SET_SIGNATURE_IMPORTER_NAME        = \"SET_SIGNATURE_IMPORTER_NAME\";\nexport const SET_SIGNATURE_IMPORTER_METHOD      = \"SET_SIGNATURE_IMPORTER_METHOD\";\nexport const SET_SIGNATURE_IMPORTER_BIP32_PATH  = \"SET_SIGNATURE_IMPORTER_BIP32_PATH\";\nexport const SET_SIGNATURE_IMPORTER_PUBLIC_KEYS = \"SET_SIGNATURE_IMPORTER_PUBLIC_KEYS\";\nexport const SET_SIGNATURE_IMPORTER_SIGNATURE   = \"SET_SIGNATURE_IMPORTER_SIGNATURE\";\nexport const SET_SIGNATURE_IMPORTER_FINALIZED   = \"SET_SIGNATURE_IMPORTER_FINALIZED\";\nexport const SET_SIGNATURE_IMPORTER_COMPLETE    = \"SET_SIGNATURE_IMPORTER_COMPLETE\";\n\nexport const {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} = wrappedNumberedActions({\n  setSignatureImporterName: SET_SIGNATURE_IMPORTER_NAME,\n  setSignatureImporterMethod: SET_SIGNATURE_IMPORTER_METHOD,\n  setSignatureImporterBIP32Path: SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  setSignatureImporterPublicKeys: SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  setSignatureImporterSignature: SET_SIGNATURE_IMPORTER_SIGNATURE,\n  setSignatureImporterFinalized: SET_SIGNATURE_IMPORTER_FINALIZED,\n  setSignatureImporterComplete: SET_SIGNATURE_IMPORTER_COMPLETE,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateHex,\n  validateMultisigSignature,\n  multisigBIP32Path,\n  multisigBIP32Root,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Box,\n  FormControl,\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport TextSignatureImporter from \"./TextSignatureImporter\";\nimport HermitSignatureImporter from \"./HermitSignatureImporter\";\nimport HardwareWalletSignatureImporter from \"./HardwareWalletSignatureImporter\";\nimport EditableName from \"../EditableName\";\n\n// Actions\nimport {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} from \"../../actions/signatureImporterActions\";\n\nimport 'react-table/react-table.css';\n\nconst TEXT = \"text\";\n\nclass SignatureImporter extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats:  PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    unsignedTransaction: PropTypes.object.isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    fee: PropTypes.string.isRequired,\n    txid: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setSignature: PropTypes.func.isRequired,\n    setPublicKeys: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    setComplete: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n    showUnsignedTransaction: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const {number} = this.props;\n    if (number === this.getCurrent()) {\n      this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  render() {\n    const { signatureImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()} ref={this.titleRef}/>\n        <CardContent>\n          {signatureImporter.finalized ? this.renderSignature() : this.renderImport()}\n          <Box mt={2}>\n            {this.renderUnsignedTransaction()}\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, signatureImporter, setName} = this.props;\n    return <EditableName number={number} name={signatureImporter.name} setName={setName} />;\n  }\n\n  getCurrent() {\n    const { signatureImporters } = this.props;\n    return Object.keys(signatureImporters).reduce((o, k) => {\n      return o + (signatureImporters[k].finalized ? 1 : 0)\n    }, 1);\n  }\n\n  renderImport = () => {\n    const { signatureImporter, number } = this.props;\n    const currentNumber = this.getCurrent();\n    const notMyTurn =  (number > currentNumber);\n    const { disableChangeMethod } = this.state;\n    const labelId = `signature-${number}-importer-select-label`;\n    if (notMyTurn) {\n      return (\n        <p>\n          Once you have imported the signature above, you will be able to import another signature here.\n        </p>\n      );\n    }\n\n    return (\n      <form>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`signature-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={signatureImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n        </FormControl>\n\n        {this.renderImportByMethod()}\n\n      </form>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, signatureImporter, signatureImporters, inputs, inputsTotalSats,  outputs, fee} = this.props;\n    if (signatureImporter.method === TEXT) {\n      return <TextSignatureImporter\n                               signatureImporter={signatureImporter}\n                               validateAndSetSignature={this.validateAndSetSignature} />;\n    }\n    if (signatureImporter.method === HERMIT) {\n      return <HermitSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               inputs={inputs}\n               outputs={outputs}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    if (signatureImporter.method === TREZOR || signatureImporter.method === LEDGER) {\n      return <HardwareWalletSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               signatureImporters={signatureImporters}\n               inputs={inputs}\n               outputs={outputs}\n               inputsTotalSats={inputsTotalSats}\n               fee={fee}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod } = this.props;\n    setMethod(number, event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // Unsigned Transaction\n  //\n\n  renderUnsignedTransaction = () => {\n    const {showUnsignedTransaction} = this.state;\n    const {unsignedTransaction} = this.props;\n    if (showUnsignedTransaction) {\n      const hex = unsignedTransaction.toHex();\n      return (\n        <div>\n          <p><Copyable text={hex}><code>{hex}</code></Copyable></p>\n          <small>\n            <Button size=\"small\" onClick={this.handleHideUnsignedTransaction}>\n              Hide Unsigned Transaction\n            </Button>\n          </small>\n        </div>\n\n      );\n    } else {\n      return (\n        <small>\n          <Button size=\"small\" onClick={this.handleShowUnsignedTransaction}>\n            Show Unsigned Transaction\n          </Button>\n        </small>\n      );\n    }\n  }\n\n  handleShowUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: true});\n  }\n\n  handleHideUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: false});\n  }\n\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { number, setSignature, setPublicKeys, setFinalized } = this.props;\n    setSignature(number, '');\n    setPublicKeys(number, []);\n    setFinalized(number, false);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  defaultBIP32Path = () => {\n    const {addressType, network, isWallet} = this.props;\n    return isWallet ? multisigBIP32Root(addressType, network) :\n      multisigBIP32Path(addressType, network);\n  }\n\n  resetBIP32Path = () => {\n    const {number, setBIP32Path} = this.props;\n    setBIP32Path(number, this.defaultBIP32Path());\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Signature\n  //\n\n  renderSignature = () => {\n    const { signatureImporter, txid  } = this.props;\n    const signatureJSON =  JSON.stringify(signatureImporter.signature);\n    return (\n      <div>\n        <p>The following signature was imported:</p>\n        <Box>\n          <Copyable text={signatureJSON}>\n            <small><code>{signatureJSON}</code></small>\n          </Copyable>\n        </Box>\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={txid !== \"\"}\n            size=\"small\"\n            onClick={this.reset}\n          >\n            Remove Signature\n          </Button>\n        </Box>\n\n      </div>\n    );\n  }\n\n  validateAndSetSignature = (inputsSignatures, errback) => {\n    const {number, inputs, signatureImporters, unsignedTransaction, setComplete} = this.props;\n\n    if (!Array.isArray(inputsSignatures)) {\n      errback(\"Signature is not an array of strings.\");\n      return;\n    }\n\n    if (inputsSignatures.length < inputs.length) {\n      errback(\"Not enough signatures (must be exactly one for each input).\");\n      return;\n    }\n    if (inputsSignatures.length > inputs.length) {\n      errback(\"Too many signatures (must be exactly one for each input).\");\n      return;\n    }\n\n    const publicKeys = [];\n    const finalizedSignatureImporters = Object.values(signatureImporters).filter((signatureImporter) => (signatureImporter.finalized));\n    for (let inputIndex = 0; inputIndex < inputsSignatures.length; inputIndex += 1) {\n      const input = inputs[inputIndex];\n      const inputNumber = inputIndex + 1;\n      const inputSignature = inputsSignatures[inputIndex];\n      if (validateHex(inputSignature) !== '') {\n        errback(`Signature for input ${inputNumber} is not valid hex.`);\n        return;\n      }\n\n      let publicKey;\n      try{\n        publicKey = validateMultisigSignature(unsignedTransaction, inputIndex, input, inputSignature);\n      } catch(e) {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n      if (publicKey) {\n        for (let finalizedSignatureImporterNum=0; finalizedSignatureImporterNum < finalizedSignatureImporters.length; finalizedSignatureImporterNum++) {\n          const finalizedSignatureImporter = finalizedSignatureImporters[finalizedSignatureImporterNum];\n\n          if (finalizedSignatureImporter.signature[inputIndex] === inputSignature || finalizedSignatureImporter.publicKeys[inputIndex] === publicKey) {\n            errback(`Signature for input ${inputNumber} is a duplicate of a previously provided signature.`);\n            return;\n          }\n        }\n        publicKeys.push(publicKey);\n      } else {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n    }\n\n    setComplete(number, {signature: inputsSignatures, publicKeys: publicKeys, finalized: true});\n  }\n\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...{\n      signatureImporters: state.spend.signatureImporters,\n      signatureImporter: state.spend.signatureImporters[ownProps.number],\n      fee: state.spend.transaction.fee,\n      txid: state.spend.transaction.txid,\n    },\n    ...state.spend.transaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setSignatureImporterName,\n  setMethod: setSignatureImporterMethod,\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setPublicKeys: setSignatureImporterPublicKeys,\n  setSignature: setSignatureImporterSignature,\n  setFinalized: setSignatureImporterFinalized,\n  setComplete: setSignatureImporterComplete,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignatureImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  signedMultisigTransaction,\n  blockExplorerTransactionURL,\n} from \"unchained-bitcoin\";\nimport { broadcastTransaction } from '../../blockchain';\n\nimport {\n  Typography,\n  Box,\n  FormHelperText,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n} from '@material-ui/core';\nimport {OpenInNew} from \"@material-ui/icons\";\nimport Copyable from \"../Copyable\";\nimport {externalLink} from \"../../utils\";\nimport {setTXID} from '../../actions/transactionActions';\n\nclass Transaction extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  state = {\n    error: '',\n    broadcasting: false,\n    txid: '',\n  }\n\n  render() {\n    const { error, broadcasting, txid } = this.state;\n    const signedTransaction = this.buildSignedTransaction();\n    const signedTransactionHex = signedTransaction.toHex();\n    return (\n      <Card>\n        <CardHeader title=\"Broadcast\"/>\n        <CardContent>\n\n          <form>\n            {signedTransaction &&\n             <Box mt={4}>\n               <Typography variant=\"h6\">Signed Transaction</Typography>\n               <Copyable text={signedTransactionHex}>\n                 <small><code>{signedTransactionHex}</code></small>\n               </Copyable>\n             </Box>}\n\n            {\n              txid === ''\n                ?\n                <Box mt={2}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!signedTransaction || broadcasting}\n                    onClick={this.handleBroadcast}\n                  >\n                    Broadcast Transaction\n                  </Button>\n                  <FormHelperText error>{error}</FormHelperText>\n                  <small><FormHelperText>Warning: Broadcasting this transaction cannot be undone.</FormHelperText></small>\n                </Box>\n              :\n              <Box mt={2}>\n                <Typography variant=\"h5\">\n                  <Copyable text={txid}>\n                    <code>{txid}</code>\n                  </Copyable>\n                  &nbsp;\n                  {externalLink(this.transactionURL(), <OpenInNew />)}\n                </Typography>\n                <p>Transaction successfully broadcast.</p>\n              </Box>\n            }\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  buildSignedTransaction = () => {\n    const {network, inputs, outputs, signatureImporters} = this.props;\n    return signedMultisigTransaction(\n      network, inputs, outputs,\n      Object.values(signatureImporters).map((signatureImporter) => signatureImporter.signature));\n  }\n\n  handleBroadcast = async () => {\n    const {client, network, setTxid} = this.props;\n    const signedTransaction = this.buildSignedTransaction();\n    let error = '';\n    let txid = '';\n    this.setState({broadcasting: true});\n    try {\n      txid = await broadcastTransaction(signedTransaction.toHex(), network, client);\n    } catch (e) {\n      console.error(e);\n      error = `There was an error broadcasting the transaction.: ${e}`;\n    } finally {\n      this.setState({txid, error, broadcasting: false});\n      setTxid(txid);\n    }\n  }\n\n  transactionURL = () => {\n    const {network} = this.props;\n    const {txid} = this.state;\n    return blockExplorerTransactionURL(txid, network);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n    inputs: state.spend.transaction.inputs,\n    outputs: state.spend.transaction.outputs,\n  };\n}\n\nconst mapDispatchToProps = {\n  setTxid: setTXID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Actions\nimport {\n  setSignatureImporterBIP32Path,\n  setSignatureImporterMethod,\n} from \"../../actions/signatureImporterActions\";\n\n// Components\nimport {\n  deriveChildPublicKey,\n} from 'unchained-bitcoin';\nimport SignatureImporter from '../Spend/SignatureImporter';\n\nimport {\n  Box,\n  FormControl,\n  Select,\n  MenuItem,\n  InputLabel,\n} from \"@material-ui/core\";\n\nclass ExtendedPublicKeySelector extends React.Component {\n  static propTypes =  {\n     number: PropTypes.number.isRequired,\n     totalSigners: PropTypes.number.isRequired,\n     extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n  };\n\n  state = {\n    selection: 0,\n  };\n\n  render = () => {\n    const { selection } = this.state;\n    return (<div>\n      {this.renderKeySelectorMenu()}\n      {selection > 0 && this.renderSignatureImporter()}\n    </div>\n\n    )\n  }\n\n  renderSignatureImporter = () => {\n    const { number } = this.props;\n    return (\n      <Box mt={2}>\n        <SignatureImporter number={number} />\n      </Box>\n    )\n  }\n\n  renderKeySelectorMenu = () => {\n    const { number } = this.props;\n    const { selection } = this.state\n    const labelId = `keySelector${number}`\n    return (\n      <form>\n\n      <FormControl fullWidth>\n        <InputLabel id={labelId}>Select Key</InputLabel>\n\n        <Select\n          labelId={labelId}\n          id={`signature-${number}-key-select`}\n          // disabled={disableChangeMethod}\n          value={selection}\n          onChange={this.handleKeyChange}\n        >\n          <MenuItem value=\"\">{'< Select Extended Public Key >'}</MenuItem>\n          {this.renderKeySelectorMenuItems()}\n        </Select>\n      </FormControl>\n\n    </form>\n    )\n\n  }\n\n  extendedPublicKeyImporterNotUsed = (extendedPublicKeyImporter) => {\n    const { inputs, network, signatureImporters} = this.props;\n\n    for(let inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n      const input = inputs[inputIndex];\n      const derivedKey = deriveChildPublicKey(extendedPublicKeyImporter.extendedPublicKey, input.bip32Path, network);\n      for(let importerIndex = 1; importerIndex <= Object.keys(signatureImporters).length; importerIndex++) {\n        const importer = signatureImporters[importerIndex];\n        for(let publicKeyIndex = 0; publicKeyIndex < importer.publicKeys.length; publicKeyIndex++) {\n          const publicKey = importer.publicKeys[publicKeyIndex];\n          if (publicKey === derivedKey) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  renderKeySelectorMenuItems = () => {\n    const { extendedPublicKeyImporters, totalSigners } = this.props;\n    const extendedPublicKeys = [];\n    for (var extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n      const extendedPublicKeyImporter = extendedPublicKeyImporters[extendedPublicKeyImporterNum]\n      if (this.extendedPublicKeyImporterNotUsed(extendedPublicKeyImporter)) {\n        extendedPublicKeys.push(<MenuItem value={extendedPublicKeyImporterNum}  key={extendedPublicKeyImporterNum}>\n          {extendedPublicKeyImporter.name}\n\n      </MenuItem>)\n      }\n    }\n    return extendedPublicKeys;\n  }\n\n  handleKeyChange = (event) => {\n    const { extendedPublicKeyImporters , setBIP32Path, setMethod, number} = this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[event.target.value]\n    const importMethod = extendedPublicKeyImporter.method;\n    this.setState({selection: event.target.value});\n    if (importMethod === 'trezor' || importMethod === 'ledger' || importMethod === 'hermit') {\n      setMethod(number, importMethod)\n      setTimeout(() => {\n        setBIP32Path(number, extendedPublicKeyImporter.bip32Path);\n      },0)\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.quorum,\n    totalSigners: state.spend.transaction.totalSigners,\n    inputs: state.spend.transaction.inputs,\n    network: state.settings.network,\n    signatureImporters: state.spend.signatureImporters\n  };\n}\n\nconst mapDispatchToProps = {\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setMethod: setSignatureImporterMethod,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtendedPublicKeySelector);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Components\nimport SignatureImporter from '../Spend/SignatureImporter';\nimport Transaction from '../Spend/Transaction';\nimport ExtendedPublicKeySelector from './ExtendedPublicKeySelector'\nimport {Box, Button,} from \"@material-ui/core\";\n\n// Actions\nimport { finalizeOutputs, setRequiredSigners, resetTransaction } from '../../actions/transactionActions';\nimport { spendNodes, resetWalletView,   updateChangeNodeAction } from \"../../actions/walletActions\";\n\nclass WalletSign extends React.Component {\n  static propTypes = {\n    transaction: PropTypes.object.isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    changeNode: PropTypes.shape({}).isRequired,\n    finalizeOutputs: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n    spendNodes: PropTypes.func.isRequired,\n    resetTransaction: PropTypes.func.isRequired,\n  };\n\n  state = {\n    spent: false\n  }\n\n  render = () => {\n    return (\n      <Box>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={this.handleCancel}>Cancel</Button>\n\n      {this.renderKeySelectors()}\n      {/* {this.renderSignatureImporters()} */}\n\n      {\n        this.signaturesFinalized() &&\n        <Box mt={2}>\n          <Transaction/>\n        </Box>\n      }\n\n      {\n        (this.transactionFinalized() || this.state.spent) &&\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={this.handleReturn}>Return</Button>\n      }\n  </Box>\n\n    )\n  }\n\n  renderKeySelectors = () => {\n    const {requiredSigners} = this.props;\n    const keySelectors = [];\n    for (var keySelectorNum = 1; keySelectorNum <= requiredSigners; keySelectorNum++) {\n      keySelectors.push(\n        <Box key={keySelectorNum} mt={2}>\n          <ExtendedPublicKeySelector number={keySelectorNum} />\n        </Box>\n      );\n    }\n    return keySelectors;\n  }\n\n  renderSignatureImporters = () => {\n    const {transaction} = this.props;\n    const signatureImporters = [];\n    for (var signatureImporterNum = 1; signatureImporterNum <= transaction.requiredSigners; signatureImporterNum++) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  }\n\n  signaturesFinalized = () => {\n    const {signatureImporters} = this.props;\n    return Object.values(signatureImporters).length > 0 && Object.values(signatureImporters).every((signatureImporter) => signatureImporter.finalized);\n  }\n\n  transactionFinalized = () => {\n    const { transaction, spendNodes, changeNode, updateChangeNode } = this.props;\n\n    const txid = transaction.txid;\n    if (txid !== \"\" && !this.state.spent) {\n      this.setState({spent: true})\n      const changeAddress = changeNode.multisig.address;\n      for (let i = 0; i < transaction.outputs.length; i++) {\n        if (changeAddress === transaction.outputs[i].address) {\n          updateChangeNode({bip32Path: changeNode.bip32Path, balanceSats: transaction.outputs[i].amountSats})\n          break;\n        }\n      }\n      spendNodes();\n      return true;\n    }\n\n    return false;\n  }\n\n  handleReturn = () => {\n    const { resetTransaction, resetWalletView } = this.props;\n    resetTransaction();\n    resetWalletView();\n  }\n\n  handleCancel = () => {\n    const { finalizeOutputs, requiredSigners, setRequiredSigners } = this.props;\n    setRequiredSigners(requiredSigners); // this will generate signature importers\n    finalizeOutputs(false);\n\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.spend,\n    ...state.quorum,\n    requiredSigners: state.spend.transaction.requiredSigners,\n    totalSigners: state.spend.transaction.totalSigners,\n    changeNode: state.wallet.change.nextNode\n  };\n}\n\nconst mapDispatchToProps = {\n  finalizeOutputs,\n  setRequiredSigners,\n  spendNodes,\n  resetTransaction,\n  resetWalletView,\n  updateChangeNode: updateChangeNodeAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSign);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from 'bignumber.js'\n\n// Actions\nimport {\n  updateAutoSpendAction,\n  updateDepositNodeAction,\n  updateChangeNodeAction,\n  resetNodesSpend,\n} from \"../../actions/walletActions\";\nimport {\n  setInputs,\n  setFeeRate,\n  addOutput,\n  setOutputAddress,\n } from \"../../actions/transactionActions\";\n\n// Components\nimport NodeSet from \"./NodeSet\";\nimport OutputsForm from '../Spend/OutputsForm';\nimport WalletSign from './WalletSign'\nimport {\n    Box, Card, CardHeader,\n    CardContent, Grid, Switch,\n  } from '@material-ui/core';\n\nimport { bitcoinsToSatoshis } from 'unchained-bitcoin/lib/utils';\n\nlet coinSelectTimer;\n\nclass WalletSpend extends React.Component {\n\n  static propTypes = {\n    addNode: PropTypes.func.isRequired,\n    updateNode: PropTypes.func.isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n    coinSelection: PropTypes.func.isRequired,\n  };\n\n  outputsAmount = new BigNumber(0);\n  feeAmount = new BigNumber(0);\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.autoSpend) {\n      if (coinSelectTimer) clearTimeout(coinSelectTimer)\n      coinSelectTimer = setTimeout(this.selectCoins, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    if (coinSelectTimer) clearTimeout(coinSelectTimer)\n  }\n\n  render() {\n    const { finalizedOutputs } = this.props;\n    return (\n      <Box>\n        <Grid container>\n          <Grid item md={12}>\n            <OutputsForm />\n          </Grid>\n          <Grid item md={12}>\n            <Box mt={2}>\n              { finalizedOutputs ?\n                <WalletSign/> :\n                this.renderSpend()\n              }\n            </Box>\n          </Grid>\n        </Grid>\n      </Box>\n    )\n  }\n\n  renderSpend = () => {\n    const { addNode, updateNode, autoSpend } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Spend\"/>\n        <CardContent>\n          <Grid item md={12}>\n            <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n              <Grid item>Manual</Grid>\n              <Grid item>\n                <Switch\n                  checked={autoSpend}\n                  onChange={this.handleSpendMode}\n              />\n              </Grid>\n              <Grid item>Auto</Grid>\n            </Grid>\n          </Grid>\n          <NodeSet addNode={addNode} updateNode={updateNode} />\n        </CardContent>\n      </Card>)\n  }\n\n    handleSpendMode = (event) => {\n      const { updateAutoSpend } = this.props;\n      if (event.target.checked) {\n        // select inputs for transaction\n        // select change address???,\n        // how to identify???\n        // calculate change???\n\n      }\n\n      updateAutoSpend(event.target.checked)\n    }\n\n    selectCoins = () => {\n      const { outputs, setInputs, fee, depositNodes, changeNodes, feeRate,\n        updateChangeNode, updateDepositNode, resetNodesSpend, setFeeRate, coinSelection } = this.props;\n      const outputsAmount = outputs.reduce((sum, output) => sum.plus(output.amountSats), new BigNumber(0));\n      if (outputsAmount.isNaN()) return;\n      const feeAmount = bitcoinsToSatoshis(new BigNumber(fee));\n      if (outputsAmount.isEqualTo(this.outputsAmount) && feeAmount.isEqualTo(this.feeAmount)) return;\n      const outputTotal = outputsAmount.plus(feeAmount);\n      const spendableInputs = Object.values(depositNodes)\n        .concat(Object.values(changeNodes))\n        .filter(node => node.balanceSats.isGreaterThan(0));\n\n      resetNodesSpend();\n      const selectedInputs = coinSelection(spendableInputs, outputTotal);\n\n      selectedInputs.forEach(selectedUtxo => {\n        (selectedUtxo.change ? updateChangeNode : updateDepositNode)({bip32Path: selectedUtxo.bip32Path, spend: true})\n      })\n\n      this.outputsAmount = outputsAmount;\n      this.feeAmount = feeAmount;\n      setInputs(selectedInputs);\n      setFeeRate(feeRate); // recalulate fee\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.spend.transaction,\n    changeNodes: state.wallet.change.nodes,\n    changeNode: state.wallet.change.nextNode,\n    depositNodes: state.wallet.deposits.nodes,\n    autoSpend: state.wallet.info.autoSpend,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateAutoSpend: updateAutoSpendAction,\n  setInputs,\n  updateChangeNode: updateChangeNodeAction,\n  updateDepositNode: updateDepositNodeAction,\n  setAddress: setOutputAddress,\n  resetNodesSpend,\n  setFeeRate,\n  addOutput,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletSpend);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\n// Components\nimport NodeSet from \"./NodeSet\";\n\nclass WalletView extends React.Component {\n\n  render = () => {\n    const { addNode, updateNode } = this.props;\n\n    return (\n        <NodeSet addNode={addNode} updateNode={updateNode} canLoad={true} />\n    )\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return { ...state.wallet, };\n}\n\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\nimport {\n  setWalletModeAction,\n  WALLET_MODES\n} from \"../../actions/walletActions\";\nimport { setRequiredSigners } from \"../../actions/transactionActions\";\nimport {naiveCoinSelection} from \"../../utils\"\nimport {\n  Tabs, Tab, Box, LinearProgress\n} from '@material-ui/core';\n\nimport WalletDeposit from './WalletDeposit';\nimport WalletSpend from './WalletSpend';\nimport WalletView from './WalletView';\n\n// TODO: centralize these, used in WalletGenerator also\nconst MAX_TRAILING_EMPTY_NODES = 20;\nconst MAX_FETCH_UTXOS_ERRORS = 5;\n\n\nclass WalletControl extends React.Component {\n  scrollRef = React.createRef();\n\n  static propTypes = {\n    deposits: PropTypes.object.isRequired,\n    change: PropTypes.object.isRequired,\n    setMode: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.scrollRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render = () => {\n    return (\n      <div>\n        <h3>Balance: {this.totalBalance()}</h3>\n        <Tabs\n          ref={this.scrollRef}\n          value={this.props.walletMode}\n          onChange={this.handleModeChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          variant=\"fullWidth\"\n          >\n            <Tab label=\"Addresses\" value={WALLET_MODES.VIEW} />\n            <Tab label=\"Receive\" value={WALLET_MODES.DEPOSIT} />\n            <Tab label=\"Send\" value={WALLET_MODES.SPEND} />\n        </Tabs>\n        <Box mt={2}>\n          {this.renderModeComponent()}\n        </Box>\n      </div>\n    )\n  }\n\n  renderModeComponent = () => {\n    const {walletMode, addNode, updateNode} = this.props;\n    if (this.addressesAreLoaded() ) {\n      if (walletMode === WALLET_MODES.DEPOSIT) return <WalletDeposit/>\n      else if (walletMode === WALLET_MODES.SPEND) return <WalletSpend addNode={addNode} updateNode={updateNode} coinSelection={naiveCoinSelection}/>\n      else if (walletMode === WALLET_MODES.VIEW) return <WalletView  addNode={addNode} updateNode={updateNode}/>\n      return \"\";\n    } else {\n      const progress = this.progress();\n      return <LinearProgress variant=\"determinate\" value={progress} />\n    }\n  }\n\n  progress = () => {\n    const {change, deposits} = this.props;\n    return 100 * (deposits.trailingEmptyNodes + change.trailingEmptyNodes) / ( 2 * MAX_TRAILING_EMPTY_NODES)\n  }\n\n  addressesAreLoaded = () => {\n    const {change, deposits} = this.props;\n    if (((deposits.trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES) || (deposits.fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS)) &&\n      ((change.trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES) || (change.fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS))) {\n        return true;\n      }\n    return false;\n  }\n\n  totalBalance() {\n    const { deposits, change } = this.props;\n    return satoshisToBitcoins(deposits.balanceSats.plus(change.balanceSats)).toFixed();\n  }\n\n  handleModeChange = (event, mode)  => {\n    const { setMode,  requiredSigners, setRequiredSigners  } = this.props;\n    if (mode === WALLET_MODES.SPEND) {\n      setRequiredSigners(requiredSigners); // this will generate signature importers\n    }\n    setMode(mode);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.wallet,\n    ...state.wallet.info,\n    requiredSigners: state.spend.transaction.requiredSigners\n  };\n}\n\nconst mapDispatchToProps = {\n  setMode: setWalletModeAction,\n  setRequiredSigners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletControl);\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME        = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE   = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE\";\n\nexport const {\n  setExtendedPublicKeyImporterName,\n  setExtendedPublicKeyImporterBIP32Path,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} = wrappedNumberedActions({\n  setExtendedPublicKeyImporterName: SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  resetExtendedPublicKeyImporterBIP32Path: RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterBIP32Path: SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterMethod: SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  setExtendedPublicKeyImporterExtendedPublicKey: SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  setExtendedPublicKeyImporterFinalized: SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n});\n\nexport function setExtendedPublicKeyImporterVisible(value) {\n  return {\n    type: SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n    value: value\n  };\n}\n","import React from 'react';\nimport BigNumber from \"bignumber.js\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  deriveChildPublicKey,\n  generateMultisigFromPublicKeys,\n} from 'unchained-bitcoin';\nimport {\n  fetchAddressUTXOs,\n  getAddressStatus,\n} from \"../../blockchain\";\nimport { isWalletAddressNotFoundError } from '../../bitcoind'\n// Components\nimport {\n  Button, Card, CardHeader,\n  CardContent, Link\n} from '@material-ui/core';\nimport ConfirmWallet from './ConfirmWallet';\nimport WalletControl from './WalletControl';\n\n// Actions\nimport {setFrozen} from \"../../actions/settingsActions\";\nimport {\n  updateDepositNodeAction,\n  updateChangeNodeAction,\n  updateAutoSpendAction,\n} from \"../../actions/walletActions\";\nimport {setExtendedPublicKeyImporterVisible} from \"../../actions/extendedPublicKeyImporterActions\";\nimport { setIsWallet } from \"../../actions/transactionActions\";\n\nconst MAX_TRAILING_EMPTY_NODES = 20;\nconst MAX_FETCH_UTXOS_ERRORS = 5;\n\nclass WalletGenerator extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    deposits: PropTypes.object.isRequired,\n    change: PropTypes.object.isRequired,\n    freeze: PropTypes.func.isRequired,\n    updateDepositNode: PropTypes.func.isRequired,\n    updateChangeNode: PropTypes.func.isRequired,\n    setIsWallet: PropTypes.func.isRequired,\n  };\n\n  state = {\n    generating: false,\n  };\n\n  render() {\n    return (\n      <div>\n          {this.body()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const { setIsWallet } = this.props\n    setIsWallet();\n  }\n\n  title = () => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return (\n      <span className=\"justify-content-between d-flex\">\n        Your {requiredSigners}-of-{totalSigners} {addressType} Multisig Wallet\n        <small className=\"text-muted\">{` Extended Public Keys: ${this.extendedPublicKeyCount()}/${totalSigners}`}</small>\n      </span>\n    );\n  }\n\n  extendedPublicKeyCount = () => {\n    const { extendedPublicKeyImporters } = this.props;\n    return Object.values(extendedPublicKeyImporters).filter(extendedPublicKeyImporter => (extendedPublicKeyImporter.finalized)).length;\n  }\n\n  body() {\n    const {totalSigners, configuring, downloadWalletDetails} = this.props;\n    const {generating} = this.state;\n    if (this.extendedPublicKeyCount() === totalSigners) {\n      if (generating) {\n        return (\n          <div>\n            {<WalletControl addNode={this.addNode} updateNode={this.updateNode}/>}\n          </div>\n        );\n      } else {\n\n        // add download details button.\n\n        return (\n        <Card>\n          <CardHeader title={this.title()}/>\n          <CardContent>\n            <Link href=\"#\" onClick={this.toggleImporters}>\n\n              {configuring ? 'Hide Key Selection' : 'Edit Details'}\n            </Link>\n            <ConfirmWallet/>\n            <p>You have imported all {totalSigners} extended public keys.  You will need to save this information.</p>\n            <Button variant=\"contained\" color=\"primary\" onClick={downloadWalletDetails}>Download Wallet Details</Button>\n            <p>Please confirm that the above information is correct and you wish to generate your wallet.</p>\n            <Button id=\"confirm-wallet\" type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.generate}>Confirm</Button>\n          </CardContent>\n        </Card>\n        );\n      }\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} extended public keys, `}\n        {'your wallet will be generated here.'}\n      </p>\n    );\n  }\n\n\n  toggleImporters = (event) => {\n    event.preventDefault();\n    const { setImportersVisible, configuring } = this.props;\n    setImportersVisible(!configuring);\n  }\n\n  generate = () => {\n    const {freeze} = this.props;\n    freeze(true);\n    this.setState({generating: true});\n    this.addNode(false, \"m/0/0\", true);\n    this.addNode(true, \"m/1/0\", true);\n  }\n\n  updateNode = (isChange, update) => {\n    const {updateChangeNode, updateDepositNode} = this.props;\n    const updater = (isChange ? updateChangeNode : updateDepositNode);\n    updater(update);\n  }\n\n  addNode = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const multisigUpdates = await this.generateMultisig(isChange, bip32Path, attemptToKeepGenerating);\n    this.updateNode(isChange, {bip32Path, ...multisigUpdates})\n  }\n\n  generateMultisig = async (isChange, bip32Path, attemptToKeepGenerating) => {\n    const {extendedPublicKeyImporters, totalSigners, network, addressType, requiredSigners} = this.props;\n    const publicKeys = [];\n    for (let extendedPublicKeyImporterNumber=1; extendedPublicKeyImporterNumber <= totalSigners; extendedPublicKeyImporterNumber++) {\n      const extendedPublicKeyImporter = extendedPublicKeyImporters[extendedPublicKeyImporterNumber];\n      const publicKey = deriveChildPublicKey(extendedPublicKeyImporter.extendedPublicKey, bip32Path, network);\n      publicKeys.push(publicKey);\n    }\n    publicKeys.sort(); // BIP67\n\n    const multisig = generateMultisigFromPublicKeys(network, addressType, requiredSigners, ...publicKeys);\n\n    const utxoUpdates = await this.fetchUTXOs(isChange, multisig, attemptToKeepGenerating);\n    return {multisig, ...utxoUpdates};\n  }\n\n  fetchUTXOs = async (isChange, multisig, attemptToKeepGenerating) => {\n    const {network, client} = this.props;\n    let utxos, addressStatus;\n    let updates = {};\n    try {\n      utxos = await fetchAddressUTXOs(multisig.address, network, client);\n      addressStatus = await getAddressStatus(multisig.address, network, client);\n    } catch(e) {\n      console.error(e, e.response);\n      if (client.type === 'private' &&\n        isWalletAddressNotFoundError(e)) {\n          // address not found in wallet, just mark as unused/used/other?\n          addressStatus = {used: false}\n          updates = {\n            utxos: [],\n            balanceSats: BigNumber(0),\n            addressKnown: false,\n            fetchedUTXOs: true,\n            fetchUTXOsError: ''}\n      } else {\n        updates =  {fetchUTXOsError: e.toString()}\n      }\n    }\n    if (utxos) {\n      const balanceSats = utxos\n            .map((utxo) => utxo.amountSats)\n            .reduce(\n              (accumulator, currentValue) => accumulator.plus(currentValue),\n              new BigNumber(0));\n      updates = {...updates, balanceSats, utxos, fetchedUTXOs: true, fetchUTXOsError: ''}\n    }\n    if (addressStatus) {\n      updates = {...updates, addressUsed: addressStatus.used};\n    }\n\n    if (attemptToKeepGenerating) {\n      setTimeout(() => this.generateNextNodeIfNecessary(isChange));\n    }\n    return updates;\n  }\n\n  generateNextNodeIfNecessary = (isChange) => {\n    const {change, deposits} = this.props;\n    const trailingEmptyNodes = (isChange ? change : deposits).trailingEmptyNodes;\n    const fetchUTXOsErrors = (isChange ? change : deposits).fetchUTXOsErrors;\n    const allBIP32Paths = Object.keys((isChange ? change : deposits).nodes);\n    if ((trailingEmptyNodes >= MAX_TRAILING_EMPTY_NODES) || (fetchUTXOsErrors >= MAX_FETCH_UTXOS_ERRORS)) {\n      return;\n    }\n\n    allBIP32Paths.sort((p1, p2) => {\n      const p1Segments = (p1 || '').split('/');\n      const p2Segments = (p2 || '').split('/');\n      const p1Index = parseInt(p1Segments[2]);\n      const p2Index = parseInt(p2Segments[2]);\n      return p1Index - p2Index;\n    });\n    const pathSegments = (allBIP32Paths[allBIP32Paths.length-1] || '').split('/'); // m, 0, 1\n    const maxIndex = parseInt(pathSegments[2]);\n    const nextBIP32Path = `m/${pathSegments[1]}/${maxIndex + 1}`;\n    // Similar to above, we wrap the call to add the next node with\n    // setTimeout with a timeout of zero to allow React time to\n    // render.\n    setTimeout(() => this.addNode(isChange, nextBIP32Path, true));\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{client: state.client},\n    ...state.quorum,\n    ...state.wallet,\n    ...state.wallet.info,\n  };\n}\n\nconst mapDispatchToProps = {\n  freeze: setFrozen,\n  updateDepositNode: updateDepositNodeAction,\n  updateChangeNode: updateChangeNodeAction,\n  updateAutoSpned: updateAutoSpendAction,\n  setImportersVisible: setExtendedPublicKeyImporterVisible,\n  setIsWallet,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletGenerator);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validateExtendedPublicKey,\n  deriveChildExtendedPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {  Button, TextField, FormHelperText, Box, Grid } from '@material-ui/core';\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  }\n  state = {\n    error: '',\n    extendedPublicKey: '',\n    extendedPublicKeyError: '',\n    bip32PathError: '',\n  };\n\n  render = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    const {error, extendedPublicKey, extendedPublicKeyError, bip32PathError} = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n\n          <Box mt={2}>\n            <Grid container>\n              <Grid item md={10}>\n                  <TextField\n                    fullWidth\n                    name=\"bip32Path\"\n                    label=\"BIP32 Path (relative to xpub)\"\n                    type=\"text\"\n                    value={extendedPublicKeyImporter.bip32Path}\n                    onChange={this.handleBIP32PathChange}\n                    error={this.hasBIP32PathError()}\n                    helperText={bip32PathError}\n                  />\n              <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {! this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\"  onClick={this.resetBIP32Path}>Default</Button>}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.import} disabled={extendedPublicKey === '' || this.hasError()}>Import Extended Public Key</Button>\n          </Box>\n        </Box>\n        <FormHelperText className=\"text-danger\">{error}</FormHelperText>\n    </div>\n    );\n  }\n\n  import = () => {\n    const {network, extendedPublicKeyImporter, validateAndSetExtendedPublicKey } = this.props;\n    const {extendedPublicKey} = this.state;\n    const childExtendedPublicKey = deriveChildExtendedPublicKey(extendedPublicKey, extendedPublicKeyImporter.bip32Path, network);\n    validateAndSetExtendedPublicKey(childExtendedPublicKey, (error) => { this.setState({error}); });\n  }\n\n  setBIP32PathToDefault = () => {\n    const {validateAndSetBIP32Path} = this.props;\n    validateAndSetBIP32Path(DEFAULT_BIP32_PATH, () => {}, () => {});\n  }\n\n  hasBIP32PathError = () => {\n    return this.state.bip32PathError !== '';\n  }\n\n  hasExtendedPublicKeyError = () => {\n    return this.state.extendedPublicKeyError !== '';\n  }\n\n  hasError = () => (this.hasBIP32PathError() || this.hasExtendedPublicKeyError());\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {mode: \"unhardened\"});\n  };\n\n  bip32PathIsDefault = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    return extendedPublicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  }\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError('');\n  }\n\n  handleExtendedPublicKeyChange = (event) => {\n    const {network, extendedPublicKeyImporters} = this.props;\n    const extendedPublicKey = event.target.value;\n    let extendedPublicKeyError = validateExtendedPublicKey(extendedPublicKey, network);\n    if (extendedPublicKeyError === '') {\n      if (Object.values(extendedPublicKeyImporters).find((extendedPublicKeyImporter) => (extendedPublicKeyImporter.extendedPublicKey === extendedPublicKey))) {\n        extendedPublicKeyError = \"This extended public key has already been imported.\";\n      }\n    }\n    this.setState({extendedPublicKey, extendedPublicKeyError});\n  };\n\n}\n\nexport default ExtendedPublicKeyExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { TextField, Box } from '@material-ui/core';\n\n\nclass TextExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n  };\n\n  state = {\n    error: '',\n  };\n\n  render = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    const { error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Extended Public Key\"\n            value={extendedPublicKeyImporter.extendedPublicKey}\n            onChange={this.handleChange}\n            error={this.hasError()}\n            helperText={error}\n        />\n      </Box>\n    );\n  }\n\n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const {validateAndSetExtendedPublicKey} = this.props;\n    validateAndSetExtendedPublicKey(event.target.value, this.setError);\n  }\n\n}\n\nexport default TextExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  HermitExportExtendedPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText} from '@material-ui/core';\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  state = {\n    extendedPublicKeyError: '',\n    walletState: PENDING,\n  };\n\n  componentDidMount = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  interaction = () => {\n    const {network, extendedPublicKeyImporter} = this.props;\n    return new HermitExportExtendedPublicKey({network, bip32Path: extendedPublicKeyImporter.bip32Path});\n  }\n\n  render  = () => {\n    const {disableChangeMethod} = this.props;\n    const {extendedPublicKeyError} = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Extended Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear} />\n        <FormHelperText className=\"text-danger\">{extendedPublicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  import = (data) => {\n    const { validateAndSetBIP32Path, validateAndSetExtendedPublicKey, enableChangeMethod } = this.props;\n    enableChangeMethod();\n    const {xpub, bip32_path} = data;\n    validateAndSetBIP32Path(\n      bip32_path,\n      () => {\n        validateAndSetExtendedPublicKey(xpub, this.setError);\n      },\n      this.setError\n    );\n  }\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true);\t\t// clear BIP32 path\n    this.setError('');\n    enableChangeMethod();\n  }\n\n}\n\nexport default HermitExtendedPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  UNSUPPORTED, PENDING, ACTIVE, ERROR,\n  ExportExtendedPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid\n} from '@material-ui/core';\n// import WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetExtendedPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      extendedPublicKeyError: '',\n      bip32PathError: '',\n      status: (this.interaction().isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {network, extendedPublicKeyImporter} = this.props;\n    return ExportExtendedPublicKey({network, keystore: extendedPublicKeyImporter.method, bip32Path: extendedPublicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {extendedPublicKeyImporter} = this.props;\n    const {status, extendedPublicKeyError} = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return <FormHelperText className=\"text-danger\">{interaction.messageTextFor({status})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n       <Grid container>\n        <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={extendedPublicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n        </Grid>\n        <Grid item md={6}>\n          {!this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path}  disabled={status !== PENDING}>Default</Button>}\n        </Grid>\n       </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || status === ACTIVE}>Import Extended Public Key</Button>\n        </Box>\n        {/* <WalletFeedback messages={interaction.messagesFor({status})} excludeCodes={[\"bip32\"]}/> */}\n        <FormHelperText className=\"text-danger\">{extendedPublicKeyError}</FormHelperText>\n      </Box>\n    );\n  }\n\n  import = async () => {\n    const {validateAndSetExtendedPublicKey, enableChangeMethod, disableChangeMethod} = this.props;\n    disableChangeMethod();\n    this.setState({extendedPublicKeyError: '', status: ACTIVE});\n    try {\n      const extendedPublicKey = await this.interaction().run();\n      validateAndSetExtendedPublicKey(extendedPublicKey, (error) => {this.setState({extendedPublicKeyError: error, status: PENDING});});\n    } catch(e) {\n      console.error(e);\n      this.setState({extendedPublicKeyError: e.message, status: PENDING});\n    }\n\n    enableChangeMethod();\n  }\n\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({state: status, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({state: status, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const {extendedPublicKeyImporter, defaultBIP32Path} = this.props;\n    return extendedPublicKeyImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n}\n\nexport default HardwareWalletExtendedPublicKeyImporter;\n","import React from 'react';\n// Components\nimport {\n    List, ListItem, ListItemIcon, ListItemText, Typography\n  } from '@material-ui/core';\nimport {Warning} from '@material-ui/icons';\n\nconst Conflict = (props) => {\n    return (\n        <small>\n          <List>\n            <ListItem color=\"error.main\">\n            <ListItemIcon>\n            <Typography color=\"error\"><Warning/></Typography>\n            </ListItemIcon>\n            <ListItemText>\n              <Typography color=\"error\">\n                {props.message}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </List>\n      </small>\n    );\n  }\n\n  export default Conflict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateBIP32Path,\n  convertAndValidateExtendedPublicKey,\n  NETWORKS,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  FormControl, Select, MenuItem,\n  InputLabel, Button, FormHelperText,\n  Box,\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport ExtendedPublicKeyExtendedPublicKeyImporter from \"./ExtendedPublicKeyExtendedPublicKeyImporter\";\nimport TextExtendedPublicKeyImporter from \"./TextExtendedPublicKeyImporter\";\nimport HermitExtendedPublicKeyImporter from \"./HermitExtendedPublicKeyImporter\";\nimport HardwareWalletExtendedPublicKeyImporter from \"./HardwareWalletExtendedPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"../CreateAddress/Conflict\";\n\n// Actions\nimport {\n  setExtendedPublicKeyImporterName,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} from '../../actions/extendedPublicKeyImporterActions';\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass ExtendedPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n    extendedPublicKeyImporter: PropTypes.shape({}).isRequired,\n    extendedPublicKeyImporters: PropTypes.shape({}).isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setExtendedPublicKey: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n    conversionMessage: \"\",\n  };\n\n  render() {\n    const { extendedPublicKeyImporter, finalizedNetwork, network } = this.props;\n    const hasConflict = extendedPublicKeyImporter.method /*&& extendedPublicKeyImporter.method !== TEXT*/ && extendedPublicKeyImporter.conflict\n    let conflictMessage = \"\";\n    if (hasConflict) {\n      if (finalizedNetwork !== network) {\n        conflictMessage = \"Warning, you can not mix xpub and tpub.  Do not proceed without resolving by either removing conflicting imported keys or returning network type to original state!\"\n      } else {\n        conflictMessage = \"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\"\n      }\n    }\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {hasConflict &&\n            <Conflict message={conflictMessage} />}\n          {extendedPublicKeyImporter.finalized ? this.renderExtendedPublicKey() : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, extendedPublicKeyImporter, setName} = this.props;\n    return <EditableName number={number} name={extendedPublicKeyImporter.name} setName={setName} />;\n  }\n\n  renderImport = () => {\n    const { extendedPublicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `xpub-${number}-importer-select-label`;\n    return (\n      <div>\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={extendedPublicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n\n        </FormControl>\n\n        {this.renderImportByMethod()}\n\n      </div>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {extendedPublicKeyImporters, extendedPublicKeyImporter, network, addressType, defaultBIP32Path} = this.props;\n    if (extendedPublicKeyImporter.method === TREZOR || extendedPublicKeyImporter.method === LEDGER) {\n      return <HardwareWalletExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               addressType={addressType}\n               defaultBIP32Path={defaultBIP32Path}\n               network={network} />;\n    }\n    if (extendedPublicKeyImporter.method === HERMIT) {\n      return <HermitExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               resetBIP32Path={this.resetBIP32Path}\n               reset={this.reset} />;\n    }\n    if (extendedPublicKeyImporter.method === XPUB) {\n      return <ExtendedPublicKeyExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               extendedPublicKeyImporters={extendedPublicKeyImporters}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey}\n               network={network}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path} />;\n    }\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return <TextExtendedPublicKeyImporter\n               extendedPublicKeyImporter={extendedPublicKeyImporter}\n               validateAndSetExtendedPublicKey={this.validateAndSetExtendedPublicKey} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setExtendedPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setExtendedPublicKey(number, '');\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  }\n\n  reset = (resetBIP32Path) => {\n    const { number, setExtendedPublicKey, setFinalized } = this.props;\n    setExtendedPublicKey(number, '');\n    setFinalized(number, false);\n    if (resetBIP32Path) {this.resetBIP32Path();}\n  }\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const {moveUp, number} = this.props;\n    event.preventDefault();\n    moveUp(number);\n  }\n\n  moveDown = (event) => {\n    const {moveDown, number} = this.props;\n    event.preventDefault();\n    moveDown(number);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { extendedPublicKeyImporter } = this.props;\n    if (extendedPublicKeyImporter.method === TEXT) {\n      return (\n        <div className=\"mt-4\">\n          <p>Make sure you <strong>record the corresponding BIP32 path.</strong></p>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"mt-4\">\n          <p>The BIP32 path for this extended public key is:</p>\n          <div className=\"text-center\">\n            <Copyable text={extendedPublicKeyImporter.bip32Path}>\n              <code>{extendedPublicKeyImporter.bip32Path}</code>\n            </Copyable>\n          </div>\n          <p className=\"mt-4\">You will need this BIP32 path to sign for this key later.  <strong>Write down this BIP32 path!</strong></p>\n        </div>\n      );\n    }\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n  resetBIP32Path = () => {\n    const {number, resetBIP32Path} = this.props;\n    resetBIP32Path(number);\n  }\n\n  //\n  // Extended Public Key\n  //\n\n\n  renderExtendedPublicKey = () => {\n    const { extendedPublicKeyImporter, network } = this.props;\n    const { conversionMessage } = this.state;\n    let conversionAppend = extendedPublicKeyImporter.method === HERMIT && network === NETWORKS.TESTNET ?\n      \"this should not be an issue as hermit signing is not affected by the conversion.\" :\n      \"this may indicate an invalid network setting, if so correct setting, remove key and try again.\"\n    return (\n      <div>\n        <p>The following extended public key was imported:</p>\n        <div className=\"text-center\">\n          <Copyable text={extendedPublicKeyImporter.extendedPublicKey}>\n            <small><code>{extendedPublicKeyImporter.extendedPublicKey}</code></small>\n          </Copyable>\n        </div>\n        {this.renderBIP32Path()}\n        {conversionMessage !== \"\" &&\n        <Box mb={2}>\n          <FormHelperText>{conversionMessage}, {conversionAppend} </FormHelperText>\n        </Box>\n        }\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={() => {this.reset(extendedPublicKeyImporter.method === HERMIT);}}\n        >\n          Remove Extended Public Key\n        </Button>\n      </div>\n    );\n  }\n\n  validateAndSetExtendedPublicKey = (extendedPublicKey, errback, callback) => {\n    const {number, network, extendedPublicKeyImporters, setExtendedPublicKey} = this.props;\n    const convertedPublicKey = convertAndValidateExtendedPublicKey(extendedPublicKey, network);\n    // setExtendedPublicKey(number, extendedPublicKey);\n    setExtendedPublicKey(number, convertedPublicKey.extendedPublicKey);\n\n    if (convertedPublicKey.error !== \"\") {\n      errback(convertedPublicKey.error);\n    } else {\n      if (convertedPublicKey.extendedPublicKey && Object.values(extendedPublicKeyImporters).find((extendedPublicKeyImporter, extendedPublicKeyImporterIndex) => (\n        extendedPublicKeyImporterIndex !== (number - 1) && extendedPublicKeyImporter.extendedPublicKey === convertedPublicKey.extendedPublicKey\n      ))) {\n        errback('This extended public key has already been imported.');\n      } else {\n        errback('');\n        this.setState({conversionMessage: convertedPublicKey.message})\n        this.finalize();\n        callback && callback();\n      }\n    }\n  }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.quorum,\n    ...{ extendedPublicKeyImporter: state.quorum.extendedPublicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setExtendedPublicKeyImporterName,\n  resetBIP32Path: resetExtendedPublicKeyImporterBIP32Path,\n  setBIP32Path: setExtendedPublicKeyImporterBIP32Path,\n  setMethod: setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKey: setExtendedPublicKeyImporterExtendedPublicKey,\n  setFinalized: setExtendedPublicKeyImporterFinalized,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(ExtendedPublicKeyImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from \"react-redux\";\nimport {downloadFile} from \"../../utils\"\n\n// Components\nimport { Grid, Box, Drawer, IconButton, Button } from '@material-ui/core';\nimport { Settings } from '@material-ui/icons';\n\nimport NetworkPicker from '../NetworkPicker';\nimport QuorumPicker from '../QuorumPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport ClientPicker from '../ClientPicker';\nimport WalletGenerator from './WalletGenerator';\nimport ExtendedPublicKeyImporter from './ExtendedPublicKeyImporter';\nimport EditableName from \"../EditableName\";\n\nimport { updateWalletNameAction } from '../../actions/walletActions';\n\nconst bip32 = require('bip32');\n\nclass CreateWallet extends React.Component {\n\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    bip32,\n  }\n\n  state = {\n    showSettings: false,\n  }\n\n  render = () => {\n    const {configuring, walletName, setName, deposits} = this.props;\n    return (\n      <div>\n        <h1>\n        {!Object.values(deposits.nodes).length && <EditableName number={0} name={walletName} setName={setName} />}\n        {Object.values(deposits.nodes).length > 0 && <span>{walletName}</span>}\n        </h1>\n\n        <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={configuring ? 8 : 12}>\n\n            {this.renderExtendedPublicKeyImporters()}\n\n            <Box mt={2}><WalletGenerator downloadWalletDetails={this.downloadWalletDetails} /></Box>\n\n          </Grid>\n          {this.renderSettings()}\n        </Grid>\n      </Box>\n      </div>\n    );\n  }\n\n  renderSettings = () => {\n    const {configuring} = this.props;\n    if (configuring)\n      return (\n        <Grid item md={4}>\n          <Box><QuorumPicker /></Box>\n          <Box mt={2}><AddressTypePicker /></Box>\n          <Box mt={2}><NetworkPicker /></Box>\n          <Box mt={2}><ClientPicker /></Box>\n        </Grid>\n      )\n    else return (\n      <div>\n      <Box position=\"fixed\" right={10}>\n        <IconButton onClick={this.toggleDrawer}>\n          <Settings/>\n        </IconButton>\n      </Box>\n      <Drawer md={4} anchor=\"right\" open={this.state.showSettings} onClose={this.toggleDrawer}>\n        <Box  width={400}>\n\n          <Box mt={2}><ClientPicker /></Box>\n          <Box mt={2} textAlign={\"center\"}><Button variant=\"contained\" color=\"primary\" onClick={this.downloadWalletDetails}>Download Wallet Details</Button></Box>\n        </Box>\n      </Drawer>\n\n      </div>\n      )\n  }\n\n  toggleDrawer = () => {\n    this.setState({showSettings: !this.state.showSettings})\n  }\n\n  renderExtendedPublicKeyImporters = () => {\n    const {totalSigners, configuring} = this.props;\n    const extendedPublicKeyImporters = [];\n    for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum  <= totalSigners; extendedPublicKeyImporterNum++) {\n      extendedPublicKeyImporters.push(\n        <Box key={extendedPublicKeyImporterNum} mt={extendedPublicKeyImporterNum===1 ? 0 : 2} display={configuring ? 'block' : 'none'}>\n          <ExtendedPublicKeyImporter key={extendedPublicKeyImporterNum} number={extendedPublicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return extendedPublicKeyImporters;\n  }\n\n  downloadWalletDetails = (event) => {\n    event.preventDefault();\n    const body = this.walletDetailsText();\n    const filename = this.walletDetailsFilename();\n    downloadFile(body, filename)\n  }\n\n  walletDetailsText = () => {\n    const {addressType, network, totalSigners, requiredSigners, walletName} = this.props;\n    return `Wallet: ${walletName}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.extendedPublicKeyImporterBIP32Paths()}\n`\n\n  }\n\n  extendedPublicKeyImporterBIP32Paths = () => {\n    const {totalSigners} = this.props;\n    let extendedPublicKeyImporterBIP32Paths = [];\n    for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n      extendedPublicKeyImporterBIP32Paths.push(this.extendedPublicKeyImporterBIP32Path(extendedPublicKeyImporterNum));\n    }\n    return extendedPublicKeyImporterBIP32Paths.join(\"\\n\");\n  }\n\n  extendedPublicKeyImporterBIP32Path = (number) => {\n    const {extendedPublicKeyImporters} =  this.props;\n    const extendedPublicKeyImporter = extendedPublicKeyImporters[number];\n    const bip32Path = (extendedPublicKeyImporter.method === 'text' ? 'Unknown (make sure you have written this down previously!)' : extendedPublicKeyImporter.bip32Path);\n    return `  * ${extendedPublicKeyImporter.name}: ${bip32Path}: ${extendedPublicKeyImporter.extendedPublicKey}`;\n  }\n\n  walletDetailsFilename = () => {\n    const {totalSigners, requiredSigners, addressType, walletName} = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${walletName}.txt`;\n\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.quorum,\n    ...{walletName: state.wallet.info.walletName},\n    ...state.wallet,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: updateWalletNameAction\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateWallet);\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_PUBLIC_KEY_IMPORTER_NAME        = \"SET_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY  = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\nexport const SET_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_UP         = \"MOVE_PUBLIC_KEY_IMPORTER_UP\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_DOWN       = \"MOVE_PUBLIC_KEY_IMPORTER_DOWN\";\nexport const SORT_PUBLIC_KEY_IMPORTERS           = \"SORT_PUBLIC_KEY_IMPORTERS\";\nexport const UPDATE_MULTISIG_ADDRESS             = \"UPDATE_MULTISIG_ADDRESS\";\n\nexport function sortPublicKeyImporters() {\n  return {\n    type: SORT_PUBLIC_KEY_IMPORTERS,\n  };\n}\n\nexport function setMultisigAddress(address) {\n  return {\n    type: UPDATE_MULTISIG_ADDRESS,\n    value: address,\n  };\n}\n\n\nexport const {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} = wrappedNumberedActions({\n  setPublicKeyImporterName: SET_PUBLIC_KEY_IMPORTER_NAME,\n  resetPublicKeyImporterBIP32Path: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterBIP32Path: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterMethod: SET_PUBLIC_KEY_IMPORTER_METHOD,\n  setPublicKeyImporterPublicKey: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  setPublicKeyImporterFinalized: SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  movePublicKeyImporterUp: MOVE_PUBLIC_KEY_IMPORTER_UP,\n  movePublicKeyImporterDown: MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  generateMultisigFromPublicKeys,\n  scriptToHex,\n  multisigRedeemScript,\n  multisigWitnessScript,\n} from 'unchained-bitcoin';\nimport {externalLink} from \"../../utils\";\n\n// Actions\nimport {sortPublicKeyImporters, setMultisigAddress} from \"../../actions/publicKeyImporterActions\";\n\n// Components\nimport {\n  Box, Grid, Button, Card, CardHeader,\n  CardContent, FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\nimport Conflict from './Conflict';\nimport {downloadFile} from \"../../utils\";\n\nclass AddressGenerator extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    fingerprint: PropTypes.string.isRequired,\n    sortPublicKeyImporters: PropTypes.func.isRequired,\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n          <CardContent>\n            {this.body()}\n          </CardContent>\n      </Card>\n    );\n  }\n\n  body() {\n    const {totalSigners} = this.props;\n    if (this.publicKeyCount() === totalSigners) {\n      const multisig = this.generateMultisig();\n\n      const canonicallySorted = this.publicKeysAreCanonicallySorted();\n      return (\n        <div>\n          {this.isInConflict() && <Conflict/>}\n          {!canonicallySorted &&\n           <Grid container justify=\"space-between\">\n             <Grid item md={8}>\n               <FormHelperText error={true}>WARNING: These public keys are not in the standard {externalLink('https://github.com/bitcoin/bips/blob/master/bip-0067.mediawiki', 'BIP67 order')}.</FormHelperText>\n             </Grid>\n             <Grid item md={4}>\n               <Button variant=\"contained\" color=\"primary\" onClick={this.canonicallySortPublicKeys}>Sort Public Keys</Button>\n             </Grid>\n           </Grid>\n          }\n\n          <Box mt={2}>\n            <MultisigDetails multisig={multisig} />\n          </Box>\n\n          <Box mt={2}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.downloadAddressDetails}>Download Address Details</Button>\n          </Box>\n\n\n        </div>\n      );\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} public keys, `}\n        {'your address details will be displayed here.'}\n      </p>\n    );\n  }\n\n\n  title = () => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>{requiredSigners}-of-{totalSigners} Multisig {addressType} Address</Grid>\n        <Grid item><small>{`Public Keys: ${this.publicKeyCount()}/${totalSigners}`}</small></Grid>\n      </Grid>\n    );\n  }\n\n  isInConflict = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).some(importer => importer.conflict)\n  }\n\n  publicKeyCount = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).filter(publicKeyImporter => (publicKeyImporter.finalized)).length;\n  }\n\n  publicKeysAreCanonicallySorted = () => {\n    const {publicKeyImporters} = this.props;\n    const publicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '');\n    const sortedPublicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '').sort(); // sort mutates the array\n    const sorted = publicKeys.filter((publicKey, index) => { return publicKey === sortedPublicKeys[index];}).length === publicKeys.length;\n    return sorted;\n  }\n\n  canonicallySortPublicKeys = () => {\n    const {sortPublicKeyImporters} = this.props;\n    sortPublicKeyImporters();\n  }\n\n  generateMultisig = () => {\n    const { network, publicKeyImporters, totalSigners, requiredSigners,\n      addressType, setMultisigAddress } = this.props;\n    let publicKeys = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeys.push(publicKeyImporters[publicKeyImporterNum].publicKey);\n    }\n    const multisig = generateMultisigFromPublicKeys(network, addressType, requiredSigners, ...publicKeys);\n    setMultisigAddress(multisig.address);\n    return multisig\n  }\n\n  downloadAddressDetails = (event) => {\n    event.preventDefault();\n    const multisig = this.generateMultisig();\n    const body = this.addressDetailsText(multisig);\n    const filename = this.addressDetailsFilename(multisig);\n    downloadFile(body, filename);\n  }\n\n  addressDetailsFilename = (multisig) => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${multisig.address}.txt`;\n  }\n\n  addressDetailsText = (multisig) => {\n    const {addressType, network, totalSigners, requiredSigners} = this.props;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    const redeemScriptLine = (redeemScript ? `Redeem Script: ${scriptToHex(redeemScript)}` : '');\n    const witnessScriptLine = (witnessScript ? `Witness Script: ${scriptToHex(witnessScript)}` : '');\n    const scriptsSpacer = (redeemScript && witnessScript ? '\\n\\n' : '');\n    return `Address: ${multisig.address}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.publicKeyImporterBIP32Paths()}\n\n${redeemScriptLine}${scriptsSpacer}${witnessScriptLine}\n`;\n  }\n\n  publicKeyImporterBIP32Paths = () => {\n    const {totalSigners} = this.props;\n    let publicKeyImporterBIP32Paths = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporterBIP32Paths.push(this.publicKeyImporterBIP32Path(publicKeyImporterNum));\n    }\n    return publicKeyImporterBIP32Paths.join(\"\\n\");\n  }\n\n  publicKeyImporterBIP32Path = (number) => {\n    const {publicKeyImporters} =  this.props;\n    const publicKeyImporter = publicKeyImporters[number];\n    const bip32Path = (publicKeyImporter.method === 'text' ? 'Unknown (make sure you have written this down previously!)' : publicKeyImporter.bip32Path);\n    return `  * ${publicKeyImporter.name}: ${bip32Path}: ${publicKeyImporter.publicKey}`;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.address,\n  };\n}\n\nconst mapDispatchToProps = {\n  sortPublicKeyImporters,\n  setMultisigAddress,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressGenerator);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validatePublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Button, TextField, Box } from '@material-ui/core';\n\nclass TextPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n  };\n\n  state = {\n    error: '',\n    publicKey: '',\n  };\n\n  render = () => {\n    const { error, publicKey } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Public Key\"\n          value={publicKey}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={publicKey === '' || this.hasError()}\n          >\n            Add Public Key\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  import = () => {\n    const {validateAndSetPublicKey} = this.props;\n    const {publicKey} = this.state;\n    validateAndSetPublicKey(publicKey, this.setError);\n  }\n  \n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const publicKey = event.target.value;\n    const error = validatePublicKey(publicKey);\n    this.setState({publicKey, error});\n  }\n\n}\n\nexport default TextPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  convertAndValidateExtendedPublicKey,\n  deriveChildPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {  Button, TextField, FormHelperText, Box, Grid } from '@material-ui/core';\n\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  }\n\n  state = {\n    extendedPublicKey: '',\n    extendedPublicKeyError: '',\n    bip32PathError: '',\n    conversionMessage: \"\",\n  };\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {extendedPublicKey, extendedPublicKeyError, bip32PathError, conversionMessage} = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n        {conversionMessage !== \"\" &&\n        <Box mb={2}>\n          <FormHelperText>{conversionMessage}, this may indicate an invalid network setting, if so correct setting, remove key and try again.</FormHelperText>\n        </Box>}\n\n          <Box mt={2}>\n            <Grid container>\n              <Grid item md={10}>\n                  <TextField\n                    fullWidth\n                    name=\"bip32Path\"\n                    label=\"BIP32 Path (relative to xpub)\"\n                    type=\"text\"\n                    value={publicKeyImporter.bip32Path}\n                    onChange={this.handleBIP32PathChange}\n                    error={this.hasBIP32PathError()}\n                    helperText={bip32PathError}\n                  />\n              <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {! this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\"  onClick={this.resetBIP32Path}>Default</Button>}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.import} disabled={extendedPublicKey === '' || this.hasError()}>Import Public Key</Button>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n\n  import = () => {\n    const {network, publicKeyImporter, validateAndSetPublicKey} = this.props;\n    const {extendedPublicKey} = this.state;\n    const publicKey = deriveChildPublicKey(extendedPublicKey, publicKeyImporter.bip32Path, network);\n    validateAndSetPublicKey(publicKey, (bip32PathError) => this.setState({bip32PathError}));\n  }\n\n  setBIP32PathToDefault = () => {\n    const {validateAndSetBIP32Path} = this.props;\n    validateAndSetBIP32Path(DEFAULT_BIP32_PATH, () => {}, () => {});\n  }\n\n  hasBIP32PathError = () => {\n    return this.state.bip32PathError !== '';\n  }\n\n  hasExtendedPublicKeyError = () => {\n    return this.state.extendedPublicKeyError !== '';\n  }\n\n  hasError = () => (this.hasBIP32PathError() || this.hasExtendedPublicKeyError());\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {mode: \"unhardened\"});\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter} = this.props;\n    return publicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  }\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError('');\n  }\n\n  handleExtendedPublicKeyChange = (event) => {\n    const {network} = this.props;\n    const enteredExtendedPublicKey = event.target.value;\n    const convertedPublicKey = convertAndValidateExtendedPublicKey(enteredExtendedPublicKey, network);\n    const extendedPublicKeyError = convertedPublicKey.error;\n    const extendedPublicKey = convertedPublicKey.extendedPublicKey;\n    this.setState({extendedPublicKey, extendedPublicKeyError, conversionMessage: convertedPublicKey.message});\n  };\n\n}\n\nexport default ExtendedPublicKeyPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  HERMIT,\n  PENDING,\n  ExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText} from '@material-ui/core';\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  state = {\n    publicKeyError: '',\n  };\n\n  componentDidMount = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return ExportPublicKey({keystore: HERMIT, network, bip32Path: publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {disableChangeMethod} = this.props;\n    const {publicKeyError} = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear} />\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  }\n\n  setError = (value) => {\n    this.setState({publicKeyError: value});\n  }\n\n  import = (data) => {\n    const { validateAndSetBIP32Path, validateAndSetPublicKey, enableChangeMethod } = this.props;\n    enableChangeMethod();\n    const {pubkey, bip32_path} = data;\n    validateAndSetBIP32Path(\n      bip32_path,\n      () => {\n        validateAndSetPublicKey(pubkey, this.setError);\n      },\n      this.setError\n    );\n  }\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true);\t\t// clear BIP32 path\n    this.setError('');\n    enableChangeMethod();\n  }\n\n}\n\nexport default HermitPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  UNSUPPORTED, PENDING, ACTIVE, ERROR,\n  ExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid\n} from '@material-ui/core';\n\nimport InteractionMessages from '../InteractionMessages';\n\nclass HardwareWalletPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      publicKeyError: '',\n      bip32PathError: '',\n      status: (this.interaction().isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return ExportPublicKey({network, keystore: publicKeyImporter.method, bip32Path:publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {status, publicKeyError} = this.state;\n    const interaction = this.interaction();\n    if (status === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({status})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n       <Grid container>\n        <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={publicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={status !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n              />\n        </Grid>\n        <Grid item md={6}>\n              {!this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={status !== PENDING}>Default</Button>}\n        </Grid>\n       </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || status === ACTIVE}>Import Public Key</Button>\n        </Box>\n        <InteractionMessages messages={interaction.messagesFor({state: status})} excludeCodes={[\"bip32\"]}/>\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </Box>\n    );\n  }\n\n  import = async () => {\n    const {validateAndSetPublicKey, enableChangeMethod, disableChangeMethod} = this.props;\n    disableChangeMethod();\n    this.setState({publicKeyError: '', status: ACTIVE});\n    try {\n      const publicKey = await this.interaction().run();\n      validateAndSetPublicKey(publicKey, (error) => {this.setState({publicKeyError: error, status: PENDING});});\n    } catch(e) {\n      console.error(e);\n      this.setState({publicKeyError: e.message, status: PENDING});\n    }\n\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({state: status, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, status} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({state: status, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter, defaultBIP32Path} = this.props;\n    return publicKeyImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n}\n\nexport default HardwareWalletPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateBIP32Path,\n  validatePublicKey,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  FormControl, Select, MenuItem,\n  InputLabel, Button, Grid,\n  Box,\n} from '@material-ui/core';\nimport {ArrowUpward, ArrowDownward} from '@material-ui/icons';\n\nimport Copyable from \"../Copyable\";\nimport TextPublicKeyImporter from \"./TextPublicKeyImporter\";\nimport ExtendedPublicKeyPublicKeyImporter from \"./ExtendedPublicKeyPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"./HermitPublicKeyImporter\";\nimport HardwareWalletPublicKeyImporter from \"./HardwareWalletPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"./Conflict\";\n\n// Actions\nimport {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} from '../../actions/publicKeyImporterActions';\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass PublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {publicKeyImporter.method && publicKeyImporter.method !== TEXT && publicKeyImporter.conflict &&\n          <Conflict message=\"Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\" />}\n          {publicKeyImporter.finalized ? this.renderPublicKey() : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, totalSigners, publicKeyImporter, setName} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <EditableName number={number} name={publicKeyImporter.name} setName={setName} />\n        </Grid>\n        <Grid item>\n          <Grid container justify=\"flex-end\">\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveUp} disabled={number === 1}><ArrowUpward /></Button>\n            <span>&nbsp;</span>\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveDown} disabled={number === totalSigners}><ArrowDownward /></Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderImport = () => {\n    const { publicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `public-key-${number}-importer-select-label`;\n    return (\n      <div>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={publicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n\n        </FormControl>\n\n        {this.renderImportByMethod()}\n      </div>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {publicKeyImporter, network, addressType, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  addressType={addressType}\n                                  defaultBIP32Path={defaultBIP32Path}\n                                  network={network} />;\n    }\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === XPUB) {\n      return <ExtendedPublicKeyPublicKeyImporter\n                                                network={network}\n                                                publicKeyImporter={publicKeyImporter}\n                                                validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                                validateAndSetBIP32Path={this.validateAndSetBIP32Path} />;\n    }\n    if (publicKeyImporter.method === TEXT) {\n      return <TextPublicKeyImporter\n                                                 publicKeyImporter={publicKeyImporter}\n                                                 validateAndSetPublicKey={this.validateAndSetPublicKey} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setPublicKey(number, '');\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  }\n\n  reset = (resetBIP32Path) => {\n    const { number, setPublicKey, setFinalized } = this.props;\n    setPublicKey(number, '');\n    setFinalized(number, false);\n    if (resetBIP32Path) {this.resetBIP32Path();}\n  }\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const {moveUp, number} = this.props;\n    event.preventDefault();\n    moveUp(number);\n  }\n\n  moveDown = (event) => {\n    const {moveDown, number} = this.props;\n    event.preventDefault();\n    moveDown(number);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { publicKeyImporter } = this.props;\n    if (publicKeyImporter.method !== TEXT) {\n      return (\n        <Box mt={4}>\n          <p>The BIP32 path for this public key is:</p>\n          <Grid container justify=\"center\">\n            <Copyable text={publicKeyImporter.bip32Path}>\n              <code>{publicKeyImporter.bip32Path}</code>\n            </Copyable>\n          </Grid>\n          <Box mt={4}><p>You will need this BIP32 path to sign for this key later.  <strong>Write down this BIP32 path!</strong></p></Box>\n        </Box>\n      );\n    }\n    return null;\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n  resetBIP32Path = () => {\n    const {number, resetBIP32Path} = this.props;\n    resetBIP32Path(number);\n  }\n\n  //\n  // Public Key\n  //\n\n\n  renderPublicKey = () => {\n    const { publicKeyImporter } = this.props;\n    return (\n      <div>\n        <p>The following public key was imported:</p>\n        <Grid container justify=\"center\">\n          <Copyable text={publicKeyImporter.publicKey}>\n            <code>{publicKeyImporter.publicKey}</code>\n          </Copyable>\n        </Grid>\n        {this.renderBIP32Path()}\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={() => {this.reset(publicKeyImporter.method === HERMIT);}}\n          >\n            Remove Public Key\n          </Button>\n        </Box>\n      </div>\n    );\n  }\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {number, publicKeyImporters, setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(number, publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      if (publicKey && Object.values(publicKeyImporters).find((publicKeyImporter, publicKeyImporterIndex) => (\n        publicKeyImporterIndex !== (number - 1) && publicKeyImporter.publicKey === publicKey\n      ))) {\n        errback && errback('This public key has already been imported.');\n      } else {\n        errback && errback('');\n        this.finalize();\n        callback && callback();\n      }\n    }\n  }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.address,\n    ...{ publicKeyImporter: state.address.publicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setPublicKeyImporterName,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  setMethod: setPublicKeyImporterMethod,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  setFinalized: setPublicKeyImporterFinalized,\n  moveUp: movePublicKeyImporterUp,\n  moveDown: movePublicKeyImporterDown,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(PublicKeyImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Box } from '@material-ui/core';\nimport {connect} from \"react-redux\";\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport QuorumPicker from '../QuorumPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport AddressGenerator from './AddressGenerator';\nimport PublicKeyImporter from './PublicKeyImporter';\nimport ClientPicker from '../ClientPicker';\nimport BitcoindAddressImporter from '../BitcoindAddressImporter';\n\nimport '../styles.css';\n\nclass CreateAddress extends React.Component {\n\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n  };\n\n  render = () => {\n    const { address } = this.props\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n\n            {this.renderPublicKeyImporters()}\n\n            <Box mt={2}><AddressGenerator /></Box>\n\n          </Grid>\n          <Grid item md={4}>\n            <Box><QuorumPicker /></Box>\n            <Box mt={2}><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n            {address !== \"\" && this.renderClientPicker()}\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n  renderClientPicker = () => {\n    const { address } = this.props\n    return (\n      <Box mt={2}><ClientPicker\n        publicNotes={<span>If you plan to use this address with your own bitcoind node\n          you can import the address created here by switching for \"Public\" to \"Private\".\n          Otherwise no action is needed here.\n        </span>}\n        privateNotes={<div><BitcoindAddressImporter\n          addresses={[address]}/></div>}\n      /></Box>\n\n    )\n  }\n\n  renderPublicKeyImporters = () => {\n    const {totalSigners} = this.props;\n    const publicKeyImporters = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum  <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporters.push(\n        <Box key={publicKeyImporterNum} mt={publicKeyImporterNum===1 ? 0 : 2}>\n          <PublicKeyImporter number={publicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return publicKeyImporters;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{totalSigners: state.settings.totalSigners},\n    ...state.address,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateAddress);\n","export const START_TEST_SUITE_RUN = \"START_TEST_SUITE_RUN\";\nexport const SET_CURRENT_TEST_RUN = \"SET_CURRENT_TEST_RUN\";\n\nexport function startTestSuiteRun() {\n  return {\n    type: START_TEST_SUITE_RUN,\n  };\n}\n\nexport function setCurrentTestRun(runIndex) {\n  return {\n    type: SET_CURRENT_TEST_RUN,\n    value: runIndex,\n  };\n}\n","export const SET_KEYSTORE = \"SET_KEYSTORE\";\nexport const SET_KEYSTORE_NOTE = \"SET_KEYSTORE_NOTE\";\nexport const SET_KEYSTORE_STATUS = \"SET_KEYSTORE_STATUS\";\n\nexport function setKeystore(keystoreType, version) {\n  return {\n    type: SET_KEYSTORE,\n    keystoreType,\n    version,\n  };\n}\n\nexport function setKeystoreNote(text) {\n  return {\n    type: SET_KEYSTORE_NOTE,\n    value: text,\n  };\n}\n\nexport function setKeystoreStatus(status) {\n  return {\n    type: SET_KEYSTORE_STATUS,\n    value: status,\n  };\n}\n","export const SET_ERROR_NOTIFICATION = \"SET_ERROR_NOTIFICATION\";\nexport const CLEAR_ERROR_NOTIFICATION = \"CLEAR_ERROR_NOTIFICATION\";\n\nexport function setErrorNotification(message) {\n  return {\n    type: SET_ERROR_NOTIFICATION,\n    value: message,\n  };\n}\n\nexport function clearErrorNotification() {\n  return {\n    type: CLEAR_ERROR_NOTIFICATION,\n  };\n}\n","export const START_TEST_RUN = \"START_TEST_RUN\";\nexport const END_TEST_RUN = \"END_TEST_RUN\";\nexport const RESET_TEST_RUN = \"RESET_TEST_RUN\";\nexport const SET_TEST_RUN_NOTE = \"SET_TEST_RUN_NOTE\";\n\nexport function startTestRun(testRunIndex) {\n  return {\n    type: START_TEST_RUN,\n    testRunIndex,\n  };\n}\n\nexport function endTestRun(testRunIndex, status, message) {\n  return {\n    type: END_TEST_RUN,\n    testRunIndex,\n    status,\n    message,\n  };\n}\n\n\nexport function resetTestRun(testRunIndex) {\n  return {\n    type: RESET_TEST_RUN,\n    testRunIndex,\n  };\n}\n\n\nexport function setTestRunNote(testRunIndex, text) {\n  return {\n    type: SET_TEST_RUN_NOTE,\n    testRunIndex,\n    note: text,\n  };\n}\n","import React from 'react';\nimport {connect} from \"react-redux\";\n\nimport {\n  setKeystoreNote,\n} from \"../../actions/keystoreActions\";\nimport {\n  setTestRunNote,\n} from \"../../actions/testRunActions\";\n\nimport { \n  TextField,\n} from '@material-ui/core';\nimport { Info, Warning, Error } from '@material-ui/icons';\n\nconst KEYSTORE_MODE = \"keystore\";\nconst TEST_RUN_MODE = \"testRun\";\n\nclass NoteBase extends React.Component {\n\n  render() {\n    const {note} = this.props;\n    return (\n      <TextField\n        name=\"notes\"\n        label=\"Notes\"\n        value={note}\n        onChange={this.handleChange}\n        multiline\n        fullWidth\n        rows={3}\n      />\n    );\n  }\n\n  handleChange = (event) => {\n    const {setNote, mode, testRunIndex, note} = this.props;\n    const newNote = event.target.value;\n    if (mode === TEST_RUN_MODE) {\n      setNote(testRunIndex, newNote);\n    } else {\n      setNote(newNote);\n    }\n  }\n\n}\n\nconst mapStateToKeystoreNoteProps = (state) => {\n  return {\n    note: state.keystore.note,\n    mode: KEYSTORE_MODE,\n  };\n};\n\nconst mapDispatchToKeystoreNoteProps = {\n  setNote: setKeystoreNote,\n};\n\nconst mapStateToTestRunNoteProps = (state) => {\n  return {\n    mode: TEST_RUN_MODE,\n    testRunIndex: state.testSuiteRun.currentTestRunIndex,\n    note: state.testSuiteRun.testRuns[state.testSuiteRun.currentTestRunIndex].note,\n  };\n};\n\nconst mapDispatchToTestRunNoteProps = {\n  setNote: setTestRunNote,\n};\n\nconst KeystoreNote = connect(mapStateToKeystoreNoteProps, mapDispatchToKeystoreNoteProps)(NoteBase);\nconst TestRunNote = connect(mapStateToTestRunNoteProps, mapDispatchToTestRunNoteProps)(NoteBase);\n\nexport {KeystoreNote, TestRunNote};\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n  PENDING,\n  ACTIVE,\n  GetMetadata,\n} from \"unchained-wallets\";\n\nimport {\n  setKeystore,\n  setKeystoreStatus,\n} from \"../../actions/keystoreActions\";\nimport {\n  setErrorNotification,\n} from \"../../actions/errorNotificationActions\";\n\nimport {\n  Box, Grid, Typography,\n  FormControl, InputLabel, Select, MenuItem,\n  TextField, \n  Button,\n} from '@material-ui/core';\nimport {KeystoreNote} from \"./Note\";\nimport InteractionMessages from \"../InteractionMessages\";\n\nclass KeystorePickerBase extends React.Component {\n\n  render() {\n    const {type, status, version} = this.props;\n    return (\n      <Box>\n        <Grid container spacing={2} justify=\"center\">\n          \n          <Grid item md={4}>\n            <FormControl fullWidth>\n              <InputLabel id=\"keystore-select-label\">Type</InputLabel>\n              <Select\n                labelId=\"keystore-select-label\"\n                id=\"keystore-select\"\n                value={type}\n                onChange={this.handleTypeChange}\n              >\n                <MenuItem value=\"\">{'< Select type >'}</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item md={6}>\n            <TextField\n              name=\"version\"\n              fullWidth\n              label=\"Version\"\n              value={version}\n              disabled={type === ''}\n              onChange={this.handleVersionChange}\n            />\n          </Grid>\n          \n          <Grid item md={2}>\n            <Button disabled={status === ACTIVE || type === '' || type === HERMIT} onClick={this.detectVersion}>{status === ACTIVE ? \"Detecting...\" : \"Detect\"}</Button>\n          </Grid>\n          \n        </Grid>\n        \n        {type && type !== HERMIT && <InteractionMessages messages={this.interaction().messagesFor({state: status})} />}\n        \n        <KeystoreNote />\n\n      </Box>\n    );\n  }\n\n  handleTypeChange = (event) => {\n    const {version, setKeystore} = this.props;\n    const newType = event.target.value;\n    setKeystore(newType, version);\n  }\n\n  handleVersionChange = (event) => {\n    const {type, setKeystore} = this.props;\n    const newVersion = event.target.value;\n    setKeystore(type, newVersion);\n  }\n\n  interaction = () => {\n    const {type} = this.props;\n    return GetMetadata({keystore: type});\n  }\n\n  detectVersion = async () => {\n    const {type, setKeystore, setKeystoreStatus, setErrorNotification} = this.props;\n    setKeystoreStatus(ACTIVE);\n    try {\n      const result = await this.interaction().run();\n      if (result) {\n        setKeystore(type, result.spec);\n      }\n    } catch(e) {\n      console.error(e);\n      setErrorNotification(e.message);\n    }\n    setKeystoreStatus(PENDING);\n  }\n  \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state.keystore,\n  };\n};\n\nconst mapDispatchToProps = {\n  setKeystore,\n  setKeystoreStatus,\n  setErrorNotification,\n};\n\nconst KeystorePicker = connect(mapStateToProps, mapDispatchToProps)(KeystorePickerBase);\n\nexport {KeystorePicker}\n","import {diffChars, diffArrays, diffJSON} from \"diff\";\n\nconst SUCCESS = \"success\";\nconst FAILURE = \"failure\";\nconst ERROR = \"error\";\n\nexport class Test {\n\n  static SUCCESS = SUCCESS;\n  static FAILURE = FAILURE;\n  static ERROR = ERROR;\n\n  constructor(params) {\n    this.params = (params || {});\n  }\n\n  name() {\n    return this.params.name;\n  }\n\n  description() {\n    return this.params.description;\n  }\n\n  interaction() {\n    throw Error(\"Define the `interaction` method in your subclass of `Test`.\");\n  }\n\n  supports(version) {\n    return true;\n  }\n\n  expected() {\n    return this.params.expected;\n  }\n\n  async actual() {\n    return await this.postprocess(this.interaction().run());\n  }\n\n  postprocess(thing) {\n    return thing;\n  }\n\n  matches(expected, actual) {\n    return expected === actual;\n  }\n\n  diff(expected, actual) {\n    if (typeof(expected) === \"string\" && typeof(actual) === \"string\") {\n      return diffChars(expected, actual);\n    }\n    if (typeof(expected) === \"object\" && typeof(actual) === \"object\") {\n      if (expected.length !== undefined && actual.length !== undefined) {\n        return diffArrays(expected, actual);\n      } \n      if (expected.length === undefined && actual.length === undefined) {\n        return diffJSON(expected, actual);\n      }\n    }\n    return null;\n  }\n\n  async run() {\n    try {\n      const actual = await this.actual();\n      return this.resolve(actual);\n    } catch(e) {\n      console.error(e);\n      return {status: ERROR, message: e.message};\n    }\n  }\n\n  resolve(actual) {\n    const expected = this.expected();\n    if (this.matches(expected, actual)) {\n      return {status: SUCCESS};\n    } else {\n      return {status: FAILURE, expected, actual, diff: this.diff(expected, actual)};\n    }\n  }\n\n}\n\nexport default Test;\n","import React from 'react';\nimport moment from \"moment\";\nimport {connect} from \"react-redux\";\nimport Bowser from \"bowser\";\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n  PENDING,\n  ACTIVE,\n  VERSION as UNCHAINED_WALLETS_VERSION,\n} from \"unchained-wallets\";\n\nimport Test from \"../../tests/Test\";\n\nimport {\n  setCurrentTestRun,\n} from \"../../actions/testSuiteRunActions\";\n\nimport { \n  Grid, Box, Typography,\n  Card, CardHeader, CardContent,\n  List, ListItem, ListItemIcon, ListItemText,\n  Divider, Tooltip, CircularProgress,\n} from '@material-ui/core';\nimport {\n  ThumbUp as SuccessIcon,\n  ThumbDown as FailureIcon,\n  Error as ErrorIcon,\n  Notes as NoteIcon,\n  MoreHoriz as PendingIcon,\n} from '@material-ui/icons';\n\nimport \"./TestSuiteRunSummary.css\";\n\nclass TestSuiteRunSummaryBase extends React.Component {\n\n  render = () => {\n    const {testSuiteRun, keystore} = this.props;\n    const environment = Bowser.getParser(window.navigator.userAgent);\n    return (\n      <Grid container direction=\"column\" spacing={3}>\n        \n        <Grid item >\n          <Card>\n            <CardHeader title=\"Summary\" />\n            <CardContent>\n              <dl>\n                <dt>OS:</dt>\n                <dd>{environment.getOSName()} {environment.getOSVersion()}</dd>\n                <dt>Browser:</dt>\n                <dd>{environment.getBrowserName()} {environment.getBrowserVersion()}</dd>\n                <dt>unchained-wallets:</dt>\n                <dd>v.{UNCHAINED_WALLETS_VERSION}</dd>\n                {keystore.type  &&\n                 <Box>\n                   <dt>Keystore:</dt>\n                   <dd>{this.keystoreName(keystore.type)} {keystore.version}</dd>\n                 </Box>}\n                {keystore.note && \n                 <Box>\n                   <dt>Notes:</dt>\n                   <dd>{keystore.note}</dd>\n                 </Box>}\n              </dl>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Tests\" subheader={`${testSuiteRun.testRuns.length} Total`}/>\n            <CardContent>\n              {this.renderTests()}\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderTests = () => {\n    const {testSuiteRun, keystore} = this.props;\n    if (keystore.type === '') {\n      return <p>Choose a keystore type to generate a test suite...</p>;\n    } else {\n      return (\n        <Box>\n\n          <Typography variant=\"h6\">\n            <span className=\"TestSuiteRunSummary-success\">{testSuiteRun.testRuns.filter((testRun) => testRun.status === Test.SUCCESS).length} <small>SUCCESS</small></span>\n            &nbsp; / &nbsp;\n            <span className=\"TestSuiteRunSummary-failure\">{testSuiteRun.testRuns.filter((testRun) => testRun.status === Test.FAILURE).length} <small>FAIL</small></span>\n            &nbsp; / &nbsp;\n            <span className=\"TestSuiteRunSummary-error\">{testSuiteRun.testRuns.filter((testRun) => testRun.status === Test.ERROR).length} <small>ERROR</small></span>\n          </Typography>\n          \n          <Divider />\n\n          <List style={{maxHeight: '200px', overflow: 'auto'}} dense component=\"nav\">\n            {testSuiteRun.testRuns.map(this.renderTestRun)}\n          </List>\n        </Box>\n        \n      );\n    }\n  }\n\n  renderTestRun = (testRun, i) => {\n    const {testSuiteRun} = this.props;\n    return (\n      <ListItem selected={testSuiteRun.currentTestRunIndex === i} button key={i} onClick={this.testRunChooser(i)} disabled={! testSuiteRun.started}>\n        {this.renderTestRunResult(testRun)}\n        <ListItemText>\n          {testRun.test.name()}\n          {testRun.status !== PENDING  && testRun.status !== ACTIVE && \n           <small>&nbsp; ({moment.duration(testRun.endedAt.diff(testRun.startedAt)).asSeconds()}s)</small>\n          }\n        </ListItemText>\n        {testRun.note && \n         <ListItemIcon>\n           <Tooltip title={testRun.note}>\n             <NoteIcon/>\n           </Tooltip>\n         </ListItemIcon>}\n      </ListItem>\n    );\n  }\n\n  renderTestRunResult = (testRun) => {\n    switch (testRun.status) {\n    case PENDING:\n      return <ListItemIcon><PendingIcon className=\"TestSuiteRunSummary-pending\"/></ListItemIcon>;\n    case Test.SUCCESS:\n      return <ListItemIcon><SuccessIcon className=\"TestSuiteRunSummary-success\" /></ListItemIcon>;\n    case Test.FAILURE:\n      return <ListItemIcon><FailureIcon className=\"TestSuiteRunSummary-failure\"/></ListItemIcon>;\n    case Test.ERROR:\n      return <ListItemIcon><ErrorIcon className=\"TestSuiteRunSummary-error\"/></ListItemIcon>;\n    case ACTIVE:\n      return <ListItemIcon><CircularProgress className=\"TestSuiteRunSummary-active\"/></ListItemIcon>;\n    default:\n      return null;\n    }\n  }\n\n  testRunChooser = (testRunIndex) => {\n    const {setCurrentTestRun} = this.props;\n    return (event) => {\n      setCurrentTestRun(testRunIndex);\n    };\n  }\n\n  keystoreName = (type) => {\n    switch(type) {\n    case TREZOR:\n      return \"Trezor\";\n    case LEDGER:\n      return \"Ledger\";\n    case HERMIT:\n      return \"Hermit\";\n    default:\n      return \"\";\n    }\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    keystore: state.keystore,\n    testSuiteRun: state.testSuiteRun,\n  };\n}\n\nconst mapDispatchToProps = {\n  setCurrentTestRun,\n};\n\nconst TestSuiteRunSummary = connect(mapStateToProps, mapDispatchToProps)(TestSuiteRunSummaryBase);\n\nexport {TestSuiteRunSummary};\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n  PENDING,\n  ACTIVE,\n  HERMIT,\n} from \"unchained-wallets\";\nimport Test from \"../../tests/Test\";\n\nimport {\n  startTestRun,\n  endTestRun,\n  resetTestRun,\n} from \"../../actions/testRunActions\";\nimport {\n  setErrorNotification,\n} from \"../../actions/errorNotificationActions\";\n\nimport InteractionMessages from \"../InteractionMessages\";\nimport { \n  Box, Typography,\n  Card, CardHeader, CardContent, CardActions,\n  Button,\n  CircularProgress,\n} from '@material-ui/core';\nimport {\n  ThumbUp as SuccessIcon,\n  ThumbDown as FailureIcon,\n  Error as ErrorIcon,\n} from '@material-ui/icons';\nimport {TestRunNote} from \"./Note\";\nimport {HermitReader, HermitDisplayer} from \"../Hermit\";\n\nimport \"./TestRun.css\";\n\nconst SPACEBAR_CODE = 32;\n\nclass TestRunBase extends React.Component {\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  handleKeyDown = (event) => {\n    const {status, isLastTest, nextTest} = this.props;\n    if (event.keyCode !==  SPACEBAR_CODE) { return; }\n    if (event.target.tagName.toLowerCase() === \"textarea\") { return; }\n    event.preventDefault();\n    if (status === ACTIVE) { return; }\n    if (status === PENDING) {\n      this.start();\n    } else {\n      if (! isLastTest) {\n        nextTest();\n      }\n    }\n  }\n\n  render = () => {\n    const {test, testRunIndex, status, keystore} = this.props;\n    if (!test) {\n      return (\n        <Box>\n          <p>No test selected.</p>\n        </Box>\n      );\n    }\n    return (\n      <Box>\n        <Card>\n          <CardHeader title={test.name()} subheader={`Test ${testRunIndex + 1}`} />\n          <CardContent>\n            {test.description()}\n            {this.renderInteractionMessages()}\n            {keystore.type === HERMIT && test.interaction().displayer && status === PENDING && \n             <Box align=\"center\">\n               <HermitDisplayer width={400} string={test.interaction().request()}  />\n             </Box>}\n            {status === PENDING && (keystore.type !== HERMIT) && \n             <Box align=\"center\">\n               <Button variant=\"contained\" color=\"primary\" onClick={this.start}>Start Test</Button>\n             </Box>}\n            {keystore.type === HERMIT && (! this.testComplete()) && \n             <Box>\n               <HermitReader \n                 onStart={this.start} \n                 onSuccess={this.resolve}\n                 onClear={this.reset}\n                 startText={\"Scan Hermit Response\"}\n                 interaction={test.interaction()} />\n             </Box>}\n            {this.testComplete() && this.renderResult()}\n\n            <TestRunNote />\n\n          </CardContent>\n          <CardActions>\n            {status === ACTIVE && <Button disabled={true}><CircularProgress />&nbsp; Running test...</Button>}\n            {this.testComplete() && <Button color=\"secondary\" onClick={this.reset}>Reset Test</Button>}\n          </CardActions>\n        </Card>\n      </Box>\n    );\n  }\n\n  testComplete = () => {\n    const {status} = this.props;\n    return (status === Test.SUCCESS || status === Test.ERROR || status === Test.FAILURE);\n  }\n\n  renderInteractionMessages = () => {\n    const {status, test} = this.props;\n    if (status === PENDING || status === ACTIVE) {\n      return <InteractionMessages \n               excludeCodes={['hermit.command']}\n               messages={test.interaction().messagesFor({state: status})} />;\n    } else { return null; }\n  }\n\n  renderResult = () => {\n    const {status, message} = this.props;\n    switch (status) {\n    case Test.SUCCESS:\n      return (\n        <Box mt={2} align=\"center\">\n          <Typography variant=\"h5\" className=\"TestRun-success\">\n            <SuccessIcon />&nbsp; Test passed\n          </Typography>\n        </Box>\n      );\n    case Test.FAILURE:\n      return (\n        <Box mt={2}>\n          <Box align=\"center\">\n            <Typography variant=\"h5\" className=\"TestRun-failure\">\n              <FailureIcon />&nbsp; Test failed\n            </Typography>\n          </Box>\n          {message}\n        </Box>\n      );\n    case Test.ERROR:\n      return (\n        <Box mt={2}>\n          <Box align=\"center\">\n            <Typography variant=\"h5\" className=\"TestRun-error\">\n              <ErrorIcon />&nbsp; Test error\n            </Typography>\n          </Box>\n          {message}\n        </Box>\n      );\n    default:\n      return null;\n    }\n  }\n\n  start = async () => {\n    const {test, keystore, testRunIndex, startTestRun, endTestRun, setErrorNotification} = this.props;\n    startTestRun(testRunIndex);\n    if (keystore.type === HERMIT) { return; }\n    const result = await test.run();\n    this.handleResult(result);\n  }\n\n  resolve = (actual) => {\n    const {test}  = this.props;\n    const result = test.resolve(test.postprocess(actual));\n    this.handleResult(result);\n  }\n\n  handleResult = (result) => {\n    const {testRunIndex, endTestRun, setErrorNotification} = this.props;\n    if (result.status === Test.ERROR) {\n      setErrorNotification(result.message);\n    }\n    endTestRun(testRunIndex, result.status, this.formatMessage(result));\n  }\n\n  reset = () => {\n    const {testRunIndex, resetTestRun} = this.props;\n    resetTestRun(testRunIndex);\n  }\n\n  formatMessage = (result) => {\n    switch (result.status) {\n    case Test.FAILURE:\n      return (\n        <Box>\n          <dl>\n            <dt>Expected:</dt>\n            <dd><code className=\"TestRun-wrap\">{this.formatOutput(result.expected)}</code></dd>\n            <dt>Actual:</dt>\n            <dd><code className=\"TestRun-wrap\">{this.formatOutput(result.actual)}</code></dd>\n            {result.diff && \n             <div>\n               <dt>Diff:</dt>\n               <dd><code className=\"TestRun-wrap\">{result.diff.map(this.formatDiffSegment)}</code></dd>\n             </div>}\n          </dl>\n        </Box>\n      );\n    case Test.ERROR:\n      return (<code>{result.message}</code>);\n    default:\n      return '';\n    }\n  }\n\n  formatOutput = (output) => {\n    switch (typeof(output)) {\n    case \"object\":\n      return JSON.stringify(output);\n    default:\n      return output.toString();\n    }\n  }\n\n  formatDiffSegment = (segment, i) => {\n    return <span key={i} className={`TestRun-diff-segment-${this.diffSegmentClass(segment)}`}>{segment.value}</span>;\n  }\n  \n  diffSegmentClass = (segment) => {\n    if (segment.added) { return 'added'; }\n    if (segment.removed) { return 'removed'; }\n    return 'common';\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    ...{keystore: state.keystore},\n    ...(state.testSuiteRun.testRuns[ownProps.testRunIndex] || {}),\n    ...{testRunIndex: ownProps.testRunIndex},\n  };\n};\n\nconst mapDispatchToProps = {\n  startTestRun,\n  endTestRun,\n  resetTestRun,\n  setErrorNotification,\n};\n\nconst TestRun = connect(mapStateToProps, mapDispatchToProps)(TestRunBase);\n\nexport {TestRun};\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {TEST_FIXTURES} from \"unchained-bitcoin\";\n\nimport {\n  Grid,\n} from '@material-ui/core';\n\nconst bip39Phrase = TEST_FIXTURES.bip39Phrase;\n\nclass SeedBase extends React.Component {\n\n  render() {\n    return (\n      <Grid container>\n        <Grid item md={3}>\n          <ol>\n            {bip39Phrase.slice(0,6).map(this.renderSeedWord)}\n          </ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={7}>\n            {bip39Phrase.slice(6,12).map(this.renderSeedWord)}\n          </ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={13}>\n            {bip39Phrase.slice(12,18).map(this.renderSeedWord)}\n          </ol>\n        </Grid>\n        <Grid item md={3}>\n          <ol start={19}>\n            {bip39Phrase.slice(18,24).map(this.renderSeedWord)}\n          </ol>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderSeedWord(word, i) {\n    return (<li key={i}><code>{word}</code></li>);\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n  };\n};\n\nconst mapDispatchToProps = {\n};\n\nconst Seed = connect(mapStateToProps, mapDispatchToProps)(SeedBase);\n\nexport {Seed}\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {\n  PENDING,\n  ACTIVE,\n} from \"unchained-wallets\";\n\nimport {\n  startTestSuiteRun,\n  setCurrentTestRun,\n} from \"../../actions/testSuiteRunActions\";\n\nimport { \n  Grid, Box,\n  Card, CardHeader, CardContent,\n  Button,\n  LinearProgress,\n} from '@material-ui/core';\nimport {\n  ArrowBack,\n  ArrowForward,\n} from '@material-ui/icons';\nimport {KeystorePicker} from \"./KeystorePicker\";\nimport {TestSuiteRunSummary} from \"./TestSuiteRunSummary\";\nimport {TestRun} from \"./TestRun\";\nimport {Seed} from \"./Seed\";\n\nconst SPACEBAR_CODE = 32;\nconst LEFT_ARROW_CODE = 37;\nconst UP_ARROW_CODE = 38;\nconst RIGHT_ARROW_CODE = 39;\nconst DOWN_ARROW_CODE = 40;\n\nclass TestSuiteRunBase extends React.Component {\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  currentTestIsActive = () => {\n    const {testSuiteRun} = this.props;\n    if (!testSuiteRun.started) { return false; }\n    const test = testSuiteRun.testRuns[testSuiteRun.currentTestRunIndex];\n    if (!test) { return false; }\n    return (test.status === ACTIVE);\n  }\n\n  handleKeyDown = (event) => {\n    const {testSuiteRun} = this.props;\n    if (testSuiteRun.started) {\n      if (this.currentTestIsActive()) { return; }\n      switch (event.keyCode) {\n      case LEFT_ARROW_CODE:\n        if (!this.isFirstTest()) {\n          this.previousTest();\n        }\n        break;\n      case UP_ARROW_CODE:\n        if (!this.isFirstTest()) {\n          this.previousTest();\n        }\n        break;\n      case RIGHT_ARROW_CODE:\n        if (!this.isLastTest()) {\n          this.nextTest();\n        }\n        break;\n      case DOWN_ARROW_CODE:\n        if (!this.isLastTest()) {\n          this.nextTest();\n        }\n        break;\n      default:\n        break;\n      }\n    } else {\n      if (event.keyCode !==  SPACEBAR_CODE) { return; }\n      const tag = event.target.tagName.toLowerCase();\n      if (tag === \"textarea\" || tag === \"input\") { return; }\n      event.preventDefault();\n      if (this.startDisabled()) { return; }\n      this.start();\n    }\n  }\n\n  render = () => {\n    const {testSuiteRun} = this.props;\n    return (\n      <Box mt={2}>\n        {testSuiteRun.started && \n         <Box mt={2} mb={2}>\n           <LinearProgress \n             variant=\"determinate\" \n             value={100 * (testSuiteRun.testRuns.filter((testRun) => testRun.status !== PENDING && testRun.status !== ACTIVE).length / testSuiteRun.testRuns.length)} />\n         </Box>}\n        <Grid container spacing={3}>\n          <Grid item md={4}>\n            <TestSuiteRunSummary />\n          </Grid>\n          <Grid item md={8}>\n            {this.renderBody()}\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n  renderSetup = () => {\n    return (\n      <Grid container direction=\"column\" spacing={3}>\n        \n        <Grid item>\n          <Card>\n            <CardHeader title=\"Choose Keystore\" />\n            <CardContent>\n              <KeystorePicker />\n              <Box align=\"center\" mt={2}>\n                <Button variant=\"contained\" color=\"primary\" disabled={this.startDisabled()} onClick={this.start} type=\"submit\">Begin Test Suite</Button>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keystore Setup\"/>\n            <CardContent>\n              <p>Ensure your keystore has been initialized with the following seed:</p>\n              <Seed />\n            </CardContent>\n          </Card>\n        </Grid>\n        \n      </Grid>\n    );\n  }\n\n  renderBody = () => {\n    const {testSuiteRun} = this.props;\n    if (testSuiteRun.started) {\n      return (\n        <Box>\n          <TestRun isLastTest={this.isLastTest()} nextTest={this.nextTest} testRunIndex={testSuiteRun.currentTestRunIndex} />\n          <Box mt={2}>\n            <Grid container justify=\"space-between\">\n              <Grid item>\n                <Button disabled={this.isFirstTest() || this.currentTestIsActive()} onClick={this.previousTest}><ArrowBack/> &nbsp; Previous</Button>\n              </Grid>\n              <Grid item>\n                <Button disabled={this.isLastTest() || this.currentTestIsActive()} onClick={this.nextTest}>Next &nbsp; <ArrowForward/></Button>\n              </Grid>\n            </Grid>\n          </Box>\n        </Box>\n      );\n    } else {\n      return this.renderSetup();\n    }\n  }\n\n  start = () => {\n    const {startTestSuiteRun} = this.props;\n    startTestSuiteRun();\n  }\n\n  startDisabled = () => {\n    const {testSuiteRun, keystore} = this.props;\n    return (keystore.type === '' || keystore.status === ACTIVE || testSuiteRun.started || testSuiteRun.testRuns.length === 0);\n  }\n\n  isFirstTest = () => {\n    const {testSuiteRun} = this.props;\n    return (testSuiteRun.currentTestRunIndex === 0);\n  }\n\n  isLastTest = () => {\n    const {testSuiteRun} = this.props;\n    return testSuiteRun.currentTestRunIndex === (testSuiteRun.testRuns.length - 1);\n  }\n\n  previousTest = (event) => {\n    const {testSuiteRun, setCurrentTestRun} = this.props;\n    if (testSuiteRun.currentTestRunIndex < 1) { return; }\n    setCurrentTestRun(testSuiteRun.currentTestRunIndex - 1);\n  }\n\n  nextTest = (event) => {\n    const {testSuiteRun, setCurrentTestRun} = this.props;\n    if (testSuiteRun.currentTestRunIndex === (testSuiteRun.testRuns.length - 1)) { return; }\n    setCurrentTestRun(testSuiteRun.currentTestRunIndex + 1);\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    keystore: state.keystore,\n    testSuiteRun: state.testSuiteRun,\n  };\n}\n\nconst mapDispatchToProps = {\n  startTestSuiteRun,\n  setCurrentTestRun,\n};\n\nconst TestSuiteRun = connect(mapStateToProps, mapDispatchToProps)(TestSuiteRunBase);\n\nexport {TestSuiteRun};\n","export const CHOOSE_CONFIRM_OWNERSHIP = \"CHOOSE_CONFIRM_OWNERSHIP\";\nexport const SET_OWNERSHIP_MULTISIG               = \"SET_OWNERSHIP_MULTISIG\";\nexport const RESET_PUBLIC_KEY_IMPORTER            = \"RESET_PUBLIC_KEY_IMPORTER\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH   = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD       = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY   = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\n\nexport function chooseConfirmOwnership() {\n  return {\n    type: CHOOSE_CONFIRM_OWNERSHIP,\n  };\n}\n\nexport function setOwnershipMultisig(value) {\n  return {\n    type: SET_OWNERSHIP_MULTISIG,\n    value,\n  };\n}\n\nexport function resetPublicKeyImporter() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER,\n  };\n}\n\nexport function resetPublicKeyImporterBIP32Path() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  };\n}\n\nexport function setPublicKeyImporterBIP32Path(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterMethod(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_METHOD,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterPublicKey(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n    value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n  generateMultisigFromHex,\n  validateHex,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n} from 'unchained-bitcoin';\nimport { fetchAddressUTXOs } from '../../blockchain';\n\n// Components\nimport {\n  Box,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  TextField,\n  FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\nimport BitcoindAddressImporter from \"../BitcoindAddressImporter\";\n\n// Actions\nimport {\n  setFrozen,\n} from '../../actions/settingsActions';\nimport {\n  choosePerformSpend,\n  setRequiredSigners,\n  setTotalSigners,\n  setInputs,\n} from '../../actions/transactionActions';\nimport {\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n} from \"../../actions/ownershipActions\";\n\nclass ScriptEntry extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    setFrozen: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setInputs: PropTypes.func.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setOwnershipMultisig: PropTypes.func.isRequired,\n    chosePerformSpend: PropTypes.bool.isRequired,\n    choseConfirmOwnership: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    scriptHex: '',\n    scriptError: '',\n    fetchUTXOsError: '',\n    fetchedUTXOs: false,\n  };\n\n  disabled = () => {\n\n  }\n\n  render() {\n    const { scriptHex, scriptError, fetchedUTXOs } = this.state;\n\n    return (\n      <Card>\n        <CardHeader title={`Enter ${this.scriptTitle()} Script`} />\n        <CardContent>\n          <form>\n            <TextField\n              fullWidth\n              multiline\n              autoFocus\n              variant=\"outlined\"\n              label={`${this.scriptTitle()} Script`}\n              value={scriptHex}\n              rows={5}\n              onChange={this.handleScriptChange}\n              disabled={fetchedUTXOs && (! this.hasFetchUTXOsError())}\n              helperText={scriptError}\n              error={scriptError!==''}\n            />\n          </form>\n\n          {(scriptHex !== '' && !this.hasScriptError())\n           ?\n           this.renderDetails()\n           :\n           <p>Enter a valid {this.scriptName()} script to generate an address to spend funds from.</p>}\n\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  hasScriptError = () => (this.state.scriptError !== '')\n  hasFetchUTXOsError = () => (this.state.fetchUTXOsError !== '')\n  hasError = () => (this.hasScriptError() || this.hasFetchUTXOsError())\n\n  //\n  // Script\n  //\n\n  scriptName = () => {\n    const {addressType} = this.props;\n    switch (addressType) {\n    case P2SH:\n      return \"redeem\";\n    case P2SH_P2WSH:\n      return \"witness\";\n    case P2WSH:\n      return \"witness\";\n    default:\n      return null;\n    }\n  }\n\n  scriptTitle = () => {\n    const scriptName = this.scriptName();\n    return scriptName.charAt(0).toUpperCase() + scriptName.substring(1);\n  }\n\n  handleScriptChange = (event) => {\n    const scriptHex = event.target.value;\n    let scriptError = '';\n\n    if (scriptHex === '') {\n      scriptError = `${this.scriptTitle()} script cannot be blank.`;\n    }\n\n    if (scriptError === '' && (scriptHex.includes('\\n') || scriptHex.includes('\\t') || scriptHex.includes(' '))) {\n      scriptError = `${this.scriptTitle()} script should not contain spaces, tabs, or newlines.`;\n    }\n\n    if (scriptError === '') {\n      const hexError = validateHex(scriptHex);\n      if (hexError !== '') {\n        scriptError = `${this.scriptTitle()} script is not valid hex.`;\n      }\n    }\n\n    if (scriptHex !== '' && scriptError === '') {\n      try {\n        this.generateMultisig(scriptHex);\n      } catch (parseError) {\n        console.error(parseError);\n        scriptError = `Failed to parse ${this.scriptName()} script.`;\n      }\n    }\n\n    this.setState({\n      scriptHex,\n      scriptError,\n      fetchUTXOsError: '',\n      fetchedUTXOs: false,\n    });\n  };\n\n  generateMultisig = (scriptHex) => {\n    const {network, addressType} = this.props;\n    if (! scriptHex) {\n      scriptHex = this.state.scriptHex;\n    }\n    return generateMultisigFromHex(network, addressType, scriptHex);\n  }\n\n  //\n  // Details\n  //\n\n  renderDetails = () => {\n    const { fetchUTXOsError } = this.state;\n    const { chosePerformSpend, choseConfirmOwnership, client } = this.props;\n    const multisig = this.generateMultisig();\n    const buttonsDisabled = (chosePerformSpend || choseConfirmOwnership);\n    return (\n      <div>\n        <MultisigDetails multisig={multisig} />\n\n        <Box mt={2}>\n\n          <Grid container spacing={3}>\n\n            <Grid item>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.performSpend} disabled={buttonsDisabled}>Spend from this address</Button>\n            </Grid>\n\n            <Grid item>\n              <Button variant=\"contained\" size=\"large\" onClick={this.confirmOwnership} disabled={buttonsDisabled}>Confirm ownership</Button>\n            </Grid>\n\n          </Grid>\n\n          <FormHelperText error>{fetchUTXOsError}</FormHelperText>\n\n        </Box>\n        {\n          client.type === \"private\" &&\n          <Box mt={2}>\n            <BitcoindAddressImporter addresses={[multisig.address]} autoImport={true}/>\n          </Box>\n        }\n      </div>\n    );\n  }\n\n  //\n  // Perform Spend\n  //\n\n  performSpend = async () => {\n    const {setRequiredSigners, setTotalSigners, setInputs, setFrozen, choosePerformSpend} = this.props;\n    const multisig = this.generateMultisig();\n    const fetchUTXOsResult = await this.fetchUTXOs(multisig);\n    if (fetchUTXOsResult) {\n      const {utxos, inputsTotalSats} = fetchUTXOsResult;\n      let fetchUTXOsError = '';\n      if (inputsTotalSats.isLessThanOrEqualTo(0)) {\n        fetchUTXOsError = \"This address has a zero balance.\";\n      }\n      this.setState({\n        fetchedUTXOs: true,\n        fetchUTXOsError,\n      });\n      if (fetchUTXOsError === '') {\n        setInputs(utxos);\n        setRequiredSigners(multisigRequiredSigners(multisig));\n        setTotalSigners(multisigTotalSigners(multisig));\n        setFrozen(true);\n        choosePerformSpend();\n      }\n    } else {\n      this.setState({\n        fetchedUTXOs: false,\n        fetchUTXOsError: \"Failed to fetch UTXOs.\",\n      });\n    }\n  }\n\n  fetchUTXOs = async (multisig) => {\n    const {network, client} = this.props;\n    let utxos = null;\n    try {\n      utxos = await fetchAddressUTXOs(multisig.address, network, client);\n    } catch(e) {\n      console.error(e);\n      return false;\n    }\n    if (utxos !== null) {\n      return {\n        utxos: utxos.map((utxo) => ({...utxo, multisig})),\n        inputsTotalSats: utxos\n          .map((utxo) => utxo.amount)\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0)),\n      };\n    }\n    return false;\n  }\n\n  //\n  // Confirm Ownership\n  //\n\n  confirmOwnership = () => {\n    const {chooseConfirmOwnership, setOwnershipMultisig, setFrozen} = this.props;\n    setOwnershipMultisig(this.generateMultisig());\n    chooseConfirmOwnership();\n    setFrozen(true);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{client: state.client},\n    ...{\n      choseConfirmOwnership: state.spend.ownership.chosen,\n      chosePerformSpend: state.spend.transaction.chosen,\n    }\n  };\n}\n\nconst mapDispatchToProps = {\n  choosePerformSpend,\n  setFrozen,\n  setInputs,\n  setTotalSigners,\n  setRequiredSigners,\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ScriptEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validatePublicKey,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport CheckIcon from '@material-ui/icons/Check';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { styled } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport HardwareWalletPublicKeyImporter from \"../CreateAddress/HardwareWalletPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"../CreateAddress/HermitPublicKeyImporter\";\n\n// Actions\nimport {\n  resetPublicKeyImporter,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n} from \"../../actions/ownershipActions\";\n\nimport 'react-table/react-table.css';\n\nclass ConfirmOwnership extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    publicKeys: PropTypes.array.isRequired,\n    address: PropTypes.string.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = \"public-key-importer-select-label\";\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Confirm Ownership\" />\n        <CardContent>\n          <form>\n            <p>\n              How will you confirm your ownership of this address?\n            </p>\n\n            <FormControl\n              fullWidth={true}>\n              <InputLabel id={labelId}>Select Method</InputLabel>\n\n              <Select\n                labelId\n                id=\"public-key-importer-select\"\n                disabled={disableChangeMethod}\n                value={publicKeyImporter.method}\n                onChange={this.handleMethodChange}\n              >\n                <MenuItem value=\"\">{'< Select method >' }</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n\n            </FormControl>\n\n            {this.renderImportByMethod()}\n\n            {this.renderConfirmation()}\n\n            {publicKeyImporter.method !== '' &&\n             <Button variant=\"contained\" size=\"small\" color=\"secondary\" role=\"button\" onClick={this.reset}>Start Again</Button>}\n\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, publicKeyImporter, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               resetBIP32Path={this.resetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n               network={network}\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={defaultBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { setMethod } = this.props;\n    setMethod(event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { reset } = this.props;\n    reset();\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Public Keey & Confirmation\n  //\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      errback && errback('');\n      callback && callback();\n    }\n  }\n\n  renderConfirmation = () => {\n    const { publicKeys, publicKeyImporter } = this.props;\n    if (publicKeyImporter.publicKey === '') {return null;}\n    if (publicKeys.includes(publicKeyImporter.publicKey)) {\n      const GreenListItemIcon = styled(ListItemIcon)({color: 'green'});\n      return (\n      <List>\n       <ListItem>\n        <GreenListItemIcon>\n          <CheckIcon/>\n        </GreenListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    } else {\n     return (\n      <List>\n       <ListItem>\n        <ListItemIcon>\n          <Typography color=\"error\">\n            <ClearIcon/>\n          </Typography>\n        </ListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is not present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return state.spend.ownership;\n}\n\nconst mapDispatchToProps = {\n  setMethod: setPublicKeyImporterMethod,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  reset: resetPublicKeyImporter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmOwnership);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport ClientPicker from '../ClientPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport ScriptEntry from './ScriptEntry';\nimport UTXOSet from './UTXOSet';\nimport OutputsForm from './OutputsForm';\nimport SignatureImporter from './SignatureImporter';\nimport Transaction from './Transaction';\nimport {Grid, Box} from \"@material-ui/core\";\nimport ConfirmOwnership from './ConfirmOwnership';\nimport '../styles.css';\n\nclass Spend extends React.Component {\n\n  static propTypes = {\n    transaction: PropTypes.object.isRequired,\n    ownership: PropTypes.object.isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  render = () => {\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n            <Box><ScriptEntry /></Box>\n            {this.renderBody()}\n          </Grid>\n          <Grid item md={4}>\n            <Box><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n            <Box mt={2}><ClientPicker /></Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderBody = () => {\n    const {transaction, ownership} = this.props;\n    if (ownership.chosen) {\n      return <Box mt={2}><ConfirmOwnership /></Box>;\n    } else return (\n      <Box>\n      {\n        this.spendable() &&\n        <Box>\n          <Box mt={2}>\n            <UTXOSet\n              inputs={transaction.inputs}\n              inputsTotalSats={transaction.inputsTotalSats}\n            />\n          </Box>\n          <Box mt={2}><OutputsForm/></Box>\n        </Box>\n      }\n\n      {\n        transaction.finalizedOutputs &&\n        <Box>\n          {this.renderSignatureImporters()}\n        </Box>\n\n      }\n\n      {\n        this.signaturesFinalized() &&\n        <Box mt={2}>\n          <Transaction/>\n        </Box>\n      }\n      </Box>\n\n    )\n  }\n\n  renderSignatureImporters = () => {\n    const {transaction} = this.props;\n    const signatureImporters = [];\n    for (var signatureImporterNum = 1; signatureImporterNum <= transaction.requiredSigners; signatureImporterNum++) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  }\n\n  spendable = () => {\n    const {transaction} = this.props;\n    return transaction.inputs.length > 0;\n  }\n\n  signaturesFinalized = () => {\n    const {signatureImporters} = this.props;\n    return Object.values(signatureImporters).length > 0 && Object.values(signatureImporters).every((signatureImporter) => signatureImporter.finalized);\n  }\n\n  confirmOwnership = (value) => {\n    this.setState({addressFinalized: true, confirmOwnership: value});\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.spend;\n}\n\nexport default connect(mapStateToProps)(Spend);\n","import React from 'react';\nimport { AppBar, Toolbar, Button,  makeStyles, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n              Caravan\n          </Typography>\n\n          <Button color=\"inherit\" href=\"#/wallet\" target=\"_blank\">Wallet</Button>\n\n          <Button color=\"inherit\" href=\"#/address\" target=\"_blank\">Create</Button>\n\n          <Button color=\"inherit\" href=\"#/spend\" target=\"_blank\">Interact</Button>\n\n          <Button color=\"inherit\" href=\"#/\" target=\"_blank\">Help</Button>\n\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n\n}\n\nexport default Navbar;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\nimport {version} from \"../../package.json\";\n\n// Components\nimport { Grid, Box } from '@material-ui/core';\n\n// Assets\nconst logo = require('../images/logo.png');\n\nconst Footer = () => (\n  <Box mt={2}>\n    <hr />\n    <Grid container alignItems=\"center\">\n\n      <Grid item sm={2}>\n        {externalLink(\n          'https://www.unchained-capital.com',\n          <img\n            src={logo}\n            className=\"logo\"\n            alt=\"Unchained Capital logo\"\n            height=\"32\" />\n        )}\n      </Grid>\n\n      <Grid item  sm={6}>\n        <p>Copyright 2019 by Unchained Capital and released under an MIT license.</p>\n      </Grid>\n\n      <Grid item sm={1}>\n        <p> v{version} </p>\n      </Grid>\n    </Grid>\n\n  </Box>\n\n\n);\n\nexport default Footer;\n","import {Box, Typography} from '@material-ui/core';\nimport React from 'react';\n\nconst reportingURL = 'https://github.com/unchained-capital/caravan/issues'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      errorInfo: errorInfo,\n      error: error\n    })\n  }\n\n  render() {\n    const {error, errorInfo} = this.state;\n    if (errorInfo) {\n      return (\n        <Box m={4}>\n          <Box m={2}>\n            <Typography variant={'h3'} component={'h1'}>Something went wrong.</Typography>\n          </Box>\n          <Box m={2}>\n            <Typography variant={'body1'}>\n              Let us know what happened on <a href={reportingURL} target={'_blank'}>github</a>.\n            </Typography>\n          </Box>\n          <Box mx={2} my={3}>\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Box>\n        </Box>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport {ErrorBoundary}\n","import React from 'react';\nimport {connect} from \"react-redux\";\n\nimport {\n  clearErrorNotification,\n} from \"../actions/errorNotificationActions\";\n\nimport { \n  Snackbar, Button, IconButton\n} from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\n\nclass ErrorNotificationBase extends React.Component {\n\n  render() {\n    const {open, message, clearErrorNotification} = this.props;\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        /* autoHideDuration={6000} */\n        onClose={clearErrorNotification}\n        ContentProps={{\n          'aria-describedby': 'error-notification',\n        }}\n        message={<span id=\"error-notification\">{message}</span>}\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"close\"\n            color=\"inherit\"\n            onClick={clearErrorNotification}\n          >\n            <Close />\n          </IconButton>,\n        ]}\n      /> \n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return state.errorNotification;\n};\n\nconst mapDispatchToProps = {\n  clearErrorNotification,\n};\n\nconst ErrorNotification = connect(mapStateToProps, mapDispatchToProps)(ErrorNotificationBase);\n\nexport {ErrorNotification};\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Components\nimport Help from './Help';\nimport Wallet from './Wallet';\nimport CreateAddress from './CreateAddress';\nimport {TestSuiteRun} from './TestSuiteRun';\nimport Spend from './Spend';\nimport Navbar from './Navbar';\nimport Footer from \"./Footer\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport {ErrorBoundary} from './ErrorBoundary';\nimport {ErrorNotification} from './ErrorNotification';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <CssBaseline />\n    <Container maxWidth=\"lg\">\n      <Navbar />\n      <ErrorBoundary>\n        <Router>\n          <Switch>\n            <Route path=\"/test\" component={TestSuiteRun} />\n            <Route path=\"/wallet\" component={Wallet} />\n            <Route path=\"/address\" component={CreateAddress} />\n            <Route path=\"/spend\" component={Spend} />\n            <Route path=\"/\" component={Help} />\n          </Switch>\n        </Router>\n        <ErrorNotification />\n      </ErrorBoundary>\n      <Footer />\n    </Container>\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function updateState(state, change) {\n    return {\n\t    ...state,\n\t    ...change,\n    };\n}\n","import {\n  MAINNET, \n  P2SH,\n} from \"unchained-bitcoin\";\n\nimport { updateState } from './utils';\nimport {\n  SET_NETWORK,\n  SET_TOTAL_SIGNERS,\n  SET_REQUIRED_SIGNERS,\n  SET_ADDRESS_TYPE,\n  SET_FROZEN,\n} from '../actions/settingsActions';\n\nconst initialState = {\n  network: MAINNET,\n  totalSigners: 3,\n  requiredSigners: 2,\n  addressType: P2SH,\n  frozen: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_TOTAL_SIGNERS:\n      return updateState(state, { totalSigners: action.value });\n    case SET_REQUIRED_SIGNERS:\n      return updateState(state, { requiredSigners: action.value });\n    case SET_ADDRESS_TYPE:\n      return updateState(state, { addressType: action.value });\n    case SET_FROZEN:\n      return updateState(state, { frozen: action.value });\n    default:\n      return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst initialState = {\n  type: 'public',\n  url: '',\n  username: '',\n  password: '',\n  url_error: '',\n  username_error: '',\n  password_error: '',\n  status: 'unknown',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENT_TYPE:\n      return updateState(state, { type: action.value });\n    case SET_CLIENT_URL:\n      return updateState(state, { url: action.value });\n    case SET_CLIENT_USERNAME:\n      return updateState(state, { username: action.value });\n    case SET_CLIENT_PASSWORD:\n      return updateState(state, { password: action.value });\n    case SET_CLIENT_URL_ERROR:\n      return updateState(state, { url_error: action.value });\n    case SET_CLIENT_USERNAME_ERROR:\n      return updateState(state, { username_error: action.value });\n    case SET_CLIENT_PASSWORD_ERROR:\n      return updateState(state, { password_error: action.value });\n\n    case SET_CLIENT_STATUS:\n      return updateState(state, { status: action.value });\n\n    default:\n      return state;\n  }\n};\n","import BigNumber from \"bignumber.js\";\nimport { RESET_NODES_SPEND, SPEND_NODES } from \"../actions/walletActions\";\n\nconst initialNodeState = {\n  present: true,\n  bip32Path: '',\n  publicKeys: [],\n  multisig: {},\n  address: '',\n  balanceSats: new BigNumber(0),\n  utxos: [],\n  change: false,\n  spend: false,\n  fetchedUTXOs: false,\n  fetchUTXOsError: '',\n  addressUsed: false,\n  addressKnown: true,\n};\n\nconst initialState = {\n  nodes: {},\n  trailingEmptyNodes: 0,\n  fetchUTXOsErrors: 0,\n  balanceSats: new BigNumber(0),\n  spendingSats: new BigNumber(0),\n  autoSpend: false,\n  nextNode: null,\n};\n\nfunction updateNode(state, action) {\n  const node = {\n    ...initialNodeState,\n    ...(state.nodes[action.value.bip32Path] || {}),\n    ...action.value,\n  };\n  const newNodes = {};\n  newNodes[node.bip32Path] = node;\n\n  const updatedState = {\n    ...state,\n    ...{\n      nodes: {\n        ...state.nodes,\n        ...newNodes,\n      },\n    },\n  };\n\n  if (typeof action.value.spend !== 'undefined') {\n    updatedState.spendingSats = action.value.spend ?\n      state.spendingSats.plus(node.balanceSats) :\n      state.spendingSats.minus(node.balanceSats);\n  }\n\n  if (action.value.balanceSats) {\n    updatedState.balanceSats = state.balanceSats.plus(node.balanceSats)\n  }\n\n  let trailingEmptyNodes = 0;\n  let fetchUTXOsErrors = 0;\n  const allBIP32Paths = Object.keys(updatedState.nodes);\n  allBIP32Paths.sort((p1, p2) => {\n    const p1Segments = (p1 || '').split('/');\n    const p2Segments = (p2 || '').split('/');\n    const p1Index = parseInt(p1Segments[2]);\n    const p2Index = parseInt(p2Segments[2]);\n    return p1Index - p2Index;\n  });\n  let nodeFoundWithValue = false\n  for (let i=0; i < allBIP32Paths.length; i++) {\n    const bip32Path = allBIP32Paths[allBIP32Paths.length - (i + 1)];\n    const otherNode = updatedState.nodes[bip32Path];\n    if (otherNode.fetchedUTXOs) {\n      if (otherNode.balanceSats.isEqualTo(0) && !otherNode.addressUsed && !nodeFoundWithValue) {\n        trailingEmptyNodes++;\n      } else nodeFoundWithValue = true\n    }\n    if (otherNode.fetchUTXOsError !== '') {\n      fetchUTXOsErrors++;\n    }\n  }\n  updatedState.trailingEmptyNodes = trailingEmptyNodes;\n  updatedState.fetchUTXOsErrors = fetchUTXOsErrors;\n  updatedState.nextNode = getNextNode(updatedState);\n  return updatedState;\n}\n\nfunction getNextNode(state) {\n  const nodes = Object.values(state.nodes)\n  for (let i=0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (node.balanceSats.isEqualTo(0) && !node.addressUsed) {\n      return node;\n    }\n  }\n  return null;\n}\n\nfunction spendNodes(state) {\n  const updatedState = {...state };\n  Object.values(updatedState.nodes).forEach(node => {\n    if (node.spend) {\n      updatedState.balanceSats = updatedState.balanceSats.minus(node.balanceSats);\n      node.balanceSats = new BigNumber(0);\n      node.spend = false;\n      node.utxos = [];\n    }\n  })\n  return updatedState;\n\n}\n\nfunction resetSpend(state) {\n  const updatedState = {...state };\n  Object.values(updatedState.nodes).forEach(node => {\n    node.spend = false;\n  })\n  return updatedState;\n}\n\nexport default (actionType) => (state = initialState, action) => {\n  switch (action.type) {\n  case RESET_NODES_SPEND:\n    return resetSpend(state);\n  case SPEND_NODES:\n    return spendNodes(state);\n  case actionType:\n    return updateNode(state, action);\n  default:\n    return state;\n  }\n};\n","import {\n  MAINNET,\n  P2SH,\n  multisigBIP32Root,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE,\n} from '../actions/extendedPublicKeyImporterActions';\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const extendedPublicKeys = Object.values(state.extendedPublicKeyImporters).map((extendedPublicKeyImporter) => (extendedPublicKeyImporter.extendedPublicKey)).join('');\n  return `${timestamp}-${extendedPublicKeys}`;\n}\n\nconst initialExtendedPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Root(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  extendedPublicKey: '',\n  finalized: false,\n  confliect: false,\n};\n\nconst initialState = {\n  extendedPublicKeyImporters: {\n    1: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 1\"}  },\n    2: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 2\"}  },\n    3: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 3\"}  },\n  },\n  defaultBIP32Path: multisigBIP32Root(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n  finalizedNetwork: '',\n  finalizedAddressType: '',\n  configuring: true,\n};\n\nfunction updateExtendedPublicKeyImporterState(state, action, field) {\n  const extendedPublicKeyImporterChange = {};\n  extendedPublicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n    ...{nodes: {}},\n  };\n  newState.extendedPublicKeyImporters[action.number] = updateState(state.extendedPublicKeyImporters[action.number], extendedPublicKeyImporterChange);\n  const importCount = Object.values(newState.extendedPublicKeyImporters)\n  .reduce((sum, current) => {\n    return sum + (current.finalized)\n  }, 0)\n  if (importCount === Object.keys(newState.extendedPublicKeyImporters).length) {\n    newState.configuring = false;\n  }\n  setConflict(newState.extendedPublicKeyImporters[action.number] ,state);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const extendedPublicKeyImporters = {};\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n    extendedPublicKeyImporters[extendedPublicKeyImporterNum] = state.extendedPublicKeyImporters[extendedPublicKeyImporterNum] || {\n      ...initialExtendedPublicKeyImporterState,\n      ...{\n        name: `Extended Public key ${extendedPublicKeyImporterNum}`,\n      },\n    };\n  }\n\n  return {\n    ...state,\n    ...{extendedPublicKeyImporters},\n  };\n}\n\nfunction setConflict(extendedPublicKeyImporter ,state) {\n  if (state.finalizedNetwork) {\n    extendedPublicKeyImporter.conflict = state.finalizedNetwork !== state.network || state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= Object.values(state.extendedPublicKeyImporters).length; extendedPublicKeyImporterNum++) {\n    const extendedPublicKeyImporter = newState.extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n    if (! extendedPublicKeyImporter.bip32PathModified) {\n      if (!extendedPublicKeyImporter.finalized) extendedPublicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(extendedPublicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const addressType = state.addressType;\n  const network = action.value;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const addressType = action.value;\n  const network = state.network;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = {...state}\n  if (action.value === true && state.finalizedNetwork === '') {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== '') {\n    const finalizedCount = Object.values(state.extendedPublicKeyImporters).reduce((count, importer) => {\n      if (importer.finalized === true) return count+1; else return count\n    }, 0);\n    if (finalizedCount === 1) { // last one to be removed\n      newState.finalizedNetwork = '';\n      newState.finalizedAddressType = '';\n      Object.values(newState.extendedPublicKeyImporters).forEach(importer => importer.conflict = false);\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME:\n    return updateExtendedPublicKeyImporterState(state, action, 'name');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD:\n    return updateExtendedPublicKeyImporterState(state, action, 'method');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY:\n    return updateExtendedPublicKeyImporterState(state, action, 'extendedPublicKey');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED:\n    return updateExtendedPublicKeyImporterState(updateFinalizedSettings(state, action), action, 'finalized');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_VISIBLE:\n    return {...state, ...{configuring: action.value}};\n  default:\n    return state;\n  }\n};\n","import {\n  MAINNET,\n  P2SH,\n  multisigBIP32Path,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\nimport {\n  SET_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  MOVE_PUBLIC_KEY_IMPORTER_UP,\n  MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n  SORT_PUBLIC_KEY_IMPORTERS,\n  UPDATE_MULTISIG_ADDRESS\n} from '../actions/publicKeyImporterActions';\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const publicKeys = Object.values(state.publicKeyImporters).map((publicKeyImporter) => (publicKeyImporter.publicKey)).join('');\n  return `${timestamp}-${publicKeys}`;\n}\n\nconst initialPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Path(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  publicKey: '',\n  finalized: false,\n  conflict: false,\n};\n\nconst initialState = {\n  publicKeyImporters: {\n    1: { ...initialPublicKeyImporterState, ...{name: \"Public Key 1\"} },\n    2: { ...initialPublicKeyImporterState, ...{name: \"Public Key 2\"} },\n    3: { ...initialPublicKeyImporterState, ...{name: \"Public Key 3\"} },\n  },\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n  finalizedNetwork: '',\n  finalizedAddressType: '',\n  address: '',\n};\n\nfunction movePublicKeyImporterUp(state, action) {\n  if (action.number === 1) { return state; }\n  const newState = {\n    ...state,\n  };\n  const abovePublicKeyImporter = state.publicKeyImporters[action.number-1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number - 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = abovePublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\n\nfunction movePublicKeyImporterDown(state, action) {\n  if (action.number === Object.values(state.publicKeyImporters).length) { return state; }\n  const newState = {\n    ...state,\n   };\n  const belowPublicKeyImporter = state.publicKeyImporters[action.number+1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number + 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = belowPublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction sortPublicKeyImporters(state, action) {\n  const publicKeyImporters = Object.values(state.publicKeyImporters);\n  const sortedPublicKeys = publicKeyImporters.map((publicKeyImporter) => publicKeyImporter.publicKey).sort();\n  const sortedPublicKeyImporters = sortedPublicKeys.map((publicKey) => {\n    return publicKeyImporters.find((publicKeyImporter) => publicKeyImporter.publicKey === publicKey);\n  });\n  const publicKeyImportersChange = {};\n  for (var publicKeyImporterNum=1; publicKeyImporterNum <= sortedPublicKeyImporters.length; publicKeyImporterNum++) {\n    publicKeyImportersChange[publicKeyImporterNum] = sortedPublicKeyImporters[publicKeyImporterNum - 1];\n  }\n\n  const newState = {\n    ...state,\n    ...{publicKeyImporters: publicKeyImportersChange},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState.publicKeyImporters[action.number] = updateState(state.publicKeyImporters[action.number], publicKeyImporterChange);\n  setConflict(newState.publicKeyImporters[action.number] ,state);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const publicKeyImporters = {};\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n    publicKeyImporters[publicKeyImporterNum] = state.publicKeyImporters[publicKeyImporterNum] || {\n      ...initialPublicKeyImporterState,\n      ...{\n        name: `Public Key ${publicKeyImporterNum}`,\n      },\n    };\n  }\n  const newState = {\n    ...state,\n    ...{publicKeyImporters, stub: action.type},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction setConflict(publicKeyImporter ,state) {\n  if (state.finalizedNetwork) {\n    publicKeyImporter.conflict = state.finalizedNetwork !== state.network || state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= Object.values(state.publicKeyImporters).length; publicKeyImporterNum++) {\n    const publicKeyImporter = newState.publicKeyImporters[publicKeyImporterNum];\n    if (!publicKeyImporter.bip32PathModified) {\n      if (!publicKeyImporter.finalized) publicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(publicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const network = action.value;\n  const addressType = state.addressType;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const network = state.network;\n  const addressType = action.value;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = {...state}\n  if (action.value === true && state.finalizedNetwork === '' && newState.publicKeyImporters[action.number].method !== TEXT) {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== '') {\n    const finalizedCount = Object.values(state.publicKeyImporters).reduce((count, importer) => {\n      if (importer.finalized === true && importer.method !== TEXT) return count+1; else return count\n    }, 0);\n    if (finalizedCount === 1) { // last one to be removed\n      newState.finalizedNetwork = '';\n      newState.finalizedAddressType = '';\n      Object.values(newState.publicKeyImporters).forEach(importer => importer.conflict = false);\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_NAME:\n    return updatePublicKeyImporterState(state, action, 'name');\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, 'method');\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, 'publicKey');\n  case SET_PUBLIC_KEY_IMPORTER_FINALIZED:\n      return updatePublicKeyImporterState(updateFinalizedSettings(state, action), action, 'finalized');\n  case MOVE_PUBLIC_KEY_IMPORTER_UP:\n    return movePublicKeyImporterUp(state, action);\n  case MOVE_PUBLIC_KEY_IMPORTER_DOWN:\n    return movePublicKeyImporterDown(state, action);\n  case SORT_PUBLIC_KEY_IMPORTERS:\n    return sortPublicKeyImporters(state, action);\n  case UPDATE_MULTISIG_ADDRESS:\n    return updateState(state, {address: action.value});\n  default:\n    return state;\n  }\n};\n","import {\n  UPDATE_AUTO_SPEND,\n  UPDATE_WALLET_NAME,\n  RESET_WALLET_VIEW,\n  WALLET_MODES,\n  UPDATE_WALLET_MODE,\n} from \"../actions/walletActions\"\nimport { updateState } from './utils';\n\nconst initialState = {\n  autoSpend: true,\n  walletMode: WALLET_MODES.VIEW,\n  walletName: \"My Multisig Wallet\",\n};\n\nfunction resetWalletViews(state) {\n  return updateState(state, {\n    walletMode: WALLET_MODES.VIEW,\n  });\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_AUTO_SPEND:\n      return updateState(state, { autoSpend: action.value });\n    case UPDATE_WALLET_MODE:\n      return updateState(state, {walletMode: action.value});\n    case UPDATE_WALLET_NAME:\n      return updateState(state, { walletName: action.value });\n    case RESET_WALLET_VIEW:\n      return resetWalletViews(state);\n    default:\n      return state;\n  }\n};\n","import {\n  P2SH,\n  MAINNET,\n  multisigAddressType,\n  multisigBIP32Path,\n  multisigPublicKeys,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport { \n  SET_NETWORK,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_CONFIRM_OWNERSHIP,\n  SET_OWNERSHIP_MULTISIG,\n  RESET_PUBLIC_KEY_IMPORTER,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n} from '../actions/ownershipActions';\n\nconst initialPublicKeyImporterState = {\n  bip32Path: '',\n  method: '',\n  publicKey: '',\n};\n\nconst initialState = {\n  chosen: false,\n  publicKeyImporter: {...initialPublicKeyImporterState},\n  network: MAINNET,\n  addressType: P2SH,\n  publicKeys: [],\n  address: '',\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n};\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  return {\n    ...state,\n    ...{\n      publicKeyImporter: {\n        ...state.publicKeyImporter,\n        ...publicKeyImporterChange,\n      }\n    }\n  };\n}\n\nfunction updateMultisig(state, action) {\n  const multisig = action.value;\n  const addressType = multisigAddressType(multisig);\n  const defaultBIP32Path = multisigBIP32Path(addressType, state.network);\n  return {\n    ...state,\n    ...{\n      network: state.network,\n      addressType,\n      publicKeys: multisigPublicKeys(multisig),\n      address: multisig.address,\n      defaultBIP32Path,\n    },\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_CONFIRM_OWNERSHIP:\n    return updateState(state, {chosen: true});\n  case SET_NETWORK:\n    return updateState(state, {network: action.value});\n  case SET_OWNERSHIP_MULTISIG:\n    return updateMultisig(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    const keyResetState = updatePublicKeyImporterState(state, {value: ''}, \"publicKey\");\n    return updatePublicKeyImporterState(keyResetState, action, \"bip32Path\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, \"method\");\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, \"publicKey\");\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(state, {value: state.defaultBIP32Path}, \"bip32Path\");\n  case RESET_PUBLIC_KEY_IMPORTER:\n    return {\n      ...state,\n      ...{\n        publicKeyImporter: {\n          ...state.publicKeyImporter,\n          ...{bip32Path: state.defaultBIP32Path, publicKey: ''}\n        }\n      }\n    };\n  default:\n    return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  RESET_SIGNATURES,\n  \n  SET_SIGNATURE_IMPORTER_NAME,\n  SET_SIGNATURE_IMPORTER_METHOD,\n  SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  SET_SIGNATURE_IMPORTER_SIGNATURE,\n  SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  SET_SIGNATURE_IMPORTER_FINALIZED,\n  SET_SIGNATURE_IMPORTER_COMPLETE,\n} from '../actions/signatureImporterActions';\nimport {\n  SET_REQUIRED_SIGNERS,\n} from \"../actions/transactionActions\";\n\nconst initialSignatureImporterState = {\n  name: '',\n  method: '',\n  publicKeys: [],\n  signature: [],\n  bip32Path: '',\n  finalized: false,\n};\n\nconst initialState = {};\n\nfunction setRequiredSigners(state, action) {\n  const signatureImporters = {};\n  for (let signatureImporterNum=1; signatureImporterNum <= action.value; signatureImporterNum++) {\n    signatureImporters[signatureImporterNum] = {\n      ...initialSignatureImporterState,\n      ...{name: `Signature ${signatureImporterNum}`},\n    };\n  }\n  return {\n    ...state,\n    ...signatureImporters,\n  };\n}\n\nfunction updateSignatureImporterState(state, action, field) {\n  const signatureImporterChange = {};\n  signatureImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], signatureImporterChange);\n  return newState;\n}\n\nfunction finalizeSignatureImporterState(state, action) {\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], action.value);\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case RESET_SIGNATURES:\n    return {...initialState};\n  case SET_REQUIRED_SIGNERS:\n    return setRequiredSigners(state, action);\n  case SET_SIGNATURE_IMPORTER_NAME:\n    return updateSignatureImporterState(state, action, \"name\");\n  case SET_SIGNATURE_IMPORTER_METHOD:\n    return updateSignatureImporterState(state, action, \"method\");\n  case SET_SIGNATURE_IMPORTER_BIP32_PATH:\n    return updateSignatureImporterState(state, action, \"bip32Path\");\n  case SET_SIGNATURE_IMPORTER_SIGNATURE:\n    return updateSignatureImporterState(state, action, \"signature\");\n  case SET_SIGNATURE_IMPORTER_PUBLIC_KEYS:\n    return updateSignatureImporterState(state, action, \"publicKeys\");\n  case SET_SIGNATURE_IMPORTER_FINALIZED:\n    return updateSignatureImporterState(state, action, \"finalized\");\n  case SET_SIGNATURE_IMPORTER_COMPLETE:\n    return finalizeSignatureImporterState(state, action);\n  \n  default:\n    return state;\n  }\n};\n","import BigNumber from 'bignumber.js';\nimport { updateState } from './utils';\nimport {\n  MAINNET,\n  P2SH,\n  estimateMultisigTransactionFee,\n  estimateMultisigTransactionFeeRate,\n  validateFeeRate,\n  validateFee,\n  validateOutputAmount,\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateAddress,\n  unsignedMultisigTransaction,\n} from \"unchained-bitcoin\";\n\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_PERFORM_SPEND,\n\n  SET_REQUIRED_SIGNERS,\n  SET_TOTAL_SIGNERS,\n\n  SET_INPUTS,\n\n  ADD_OUTPUT,\n  SET_OUTPUT_ADDRESS,\n  SET_OUTPUT_AMOUNT,\n  DELETE_OUTPUT,\n\n  SET_FEE_RATE,\n  SET_FEE,\n\n  FINALIZE_OUTPUTS,\n  RESET_OUTPUTS,\n\n  SET_TXID,\n  RESET_TRANSACTION,\n\n  SET_IS_WALLET,\n  SET_CHANGE_OUTPUT_INDEX,\n} from '../actions/transactionActions';\n\nfunction sortInputs(a, b) {\n  var x = a.txid.toLowerCase();\n  var y = b.txid.toLowerCase();\n  if (x < y) {return -1;}\n  if (x > y) {return 1;}\n  if (a.n < b.n) {return -1;}\n  if (a.n > b.n) {return 1;}\n  return 0;\n};\n\nconst initialOutputState  = {\n  address: '',\n  amount: '',\n  amountSats: '',\n  addressError: '',\n  amountError: '',\n};\n\nconst initialOutputsState = () => [\n  {...initialOutputState}\n];\n\nconst initialState = {\n  chosen: false,\n  network: MAINNET,\n  inputs: [],\n  inputsTotalSats: new BigNumber(0),\n  outputs: initialOutputsState(),\n  changeOutputIndex: 0,\n  feeRate: '',\n  feeRateError: '',\n  fee: '',\n  feeError: '',\n  finalizedOutputs: false,\n  txid: '',\n  balanceError: '',\n  addressType: P2SH,\n  requiredSigners: 2,\n  totalSigners: 3,\n  unsignedTransaction: {},\n  isWallet: false,\n};\n\nfunction updateInputs(state, action) {\n  const inputsTotalSats = action.value\n        .map((input) => input.amountSats)\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  return updateState(\n    state,\n    {\n      inputs: action.value.sort(sortInputs),\n      inputsTotalSats,\n    });\n}\n\nfunction validateTransaction(state) {\n  if (\n    state.outputs.find((output) => (output.addressError !== '' || output.amountError  !== ''))\n      || state.feeError !== ''\n      || state.feeRateError !== ''\n      || state.inputs.length === 0\n  ) {\n    return {\n      ...state,\n      ...{balanceError: \"\"},\n    };\n  }\n  const feeSats = bitcoinsToSatoshis(new BigNumber(state.fee));\n  const outputTotalSats = state.outputs\n        .map((output) => bitcoinsToSatoshis(new BigNumber(output.amount || 0)))\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  if (! state.inputsTotalSats.isEqualTo(outputTotalSats.plus(feeSats))) {\n    const diff = outputTotalSats.plus(feeSats).minus(state.inputsTotalSats);\n    let balanceError;\n    if (diff.isNaN()) {\n      balanceError = \"Cannot calculate total.\";\n    } else{\n      const action = diff.isLessThan(0) ? 'Increase' : 'Decrease';\n      balanceError =`${action} by ${satoshisToBitcoins(diff.absoluteValue()).toFixed(8)}.`;\n    }\n    return {\n      ...state,\n      ...{balanceError},\n    };\n  } else {\n    return {\n      ...state,\n      ...{balanceError: ''},\n    };\n  }\n}\n\nfunction setFeeForRate(state, feeRateString, nout) {\n  return satoshisToBitcoins(estimateMultisigTransactionFee(\n    {\n      addressType: state.addressType,\n      numInputs: state.inputs.length,\n      numOutputs: nout,\n      m: state.requiredSigners,\n      n: state.totalSigners,\n      feesPerByteInSatoshis: feeRateString\n    })).toString();\n}\n\nfunction updateFeeRate(state, action) {\n  const feeRateString = action.value;\n  const feeRateError = validateFeeRate(feeRateString);\n  const fee = (\n    feeRateError === '' ?\n      setFeeForRate(state, feeRateString, state.outputs.length) :\n      '');\n\n  return updateState(state, {\n    feeRate: feeRateString,\n    feeRateError,\n    fee,\n    feeError: '',\n  });\n}\n\nfunction updateFee(state, action) {\n  const feeString = action.value;\n  const feeSats = bitcoinsToSatoshis(feeString);\n  const feeError = validateFee(feeSats, state.inputsTotalSats);\n  const feeRate = (\n    feeError === '' ?\n      estimateMultisigTransactionFeeRate(\n        {\n          addressType: state.addressType,\n          numInputs: state.inputs.length,\n          numOutputs: state.outputs.length,\n          m: state.requiredSigners,\n          n: state.totalSigners,\n          feesInSatoshis: feeSats,\n        }).toFixed(0)\n      :\n      '');\n\n  return updateState(state, {\n    fee: feeString,\n    feeError,\n    feeRate,\n    feeRateError: '',\n  });\n}\n\nfunction addOutput(state, action) {\n  const newOutputs = state.outputs.concat({...initialOutputState});\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction updateOutputAddress(state, action) {\n  const newOutputs = [...state.outputs];\n  const address = action.value;\n  let error = validateAddress(address, state.network);\n  if (error === '') {\n    for (var inputIndex=0; inputIndex < state.inputs.length; inputIndex++) {\n      const input = state.inputs[inputIndex];\n      if (address === input.address) {\n        error = \"Output address cannot equal input address.\";\n        break;\n      }\n    }\n  }\n  if (error === '') {\n    for (var outputIndex=0; outputIndex < state.outputs.length; outputIndex++) {\n      if (outputIndex !== (action.number - 1)) {\n        if (state.outputs[outputIndex].address === address) {\n          error = \"Duplicate output address.\";\n          break;\n        }\n      }\n    }\n  }\n  newOutputs[action.number - 1].address = address;\n  newOutputs[action.number - 1].addressError = error;\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction updateOutputAmount(state, action) {\n  const newOutputs = [...state.outputs];\n  const amount = action.value;\n  const amountSats = bitcoinsToSatoshis(BigNumber(amount));\n  let error = state.inputs.length ? validateOutputAmount(amountSats, state.inputsTotalSats) : \"\";\n  if (state.isWallet && error === \"Output amount is too large.\") error = \"\"\n\n  newOutputs[action.number - 1].amount = amount;\n  newOutputs[action.number - 1].amountError = error;\n  newOutputs[action.number - 1].amountSats = (error ? '' : amountSats);\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction deleteOutput(state, action) {\n  const newOutputs = [];\n  for (var i = 0; i < state.outputs.length; i++) {\n    if (i !== (action.number - 1)) {\n      newOutputs.push(state.outputs[i]);\n    } else if (action.number === state.changeOutputIndex) {\n      state.changeOutputIndex = 0;\n    }\n  }\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction finalizeOutputs(state, action) {\n  const unsignedTransaction = unsignedMultisigTransaction(state.network, state.inputs, state.outputs);\n  return {\n    ...state,\n    ...{finalizedOutputs: action.value, unsignedTransaction},\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_PERFORM_SPEND:\n    return updateState(state, { chosen: true} );\n  case SET_NETWORK:\n    return updateState(state, { network: action.value });\n  case SET_ADDRESS_TYPE:\n    return updateState(state, { addressType: action.value });\n  case SET_REQUIRED_SIGNERS:\n    return updateState(state, { requiredSigners: action.value });\n  case SET_TOTAL_SIGNERS:\n    return updateState(state, { totalSigners: action.value });\n  case SET_INPUTS:\n    return validateTransaction(updateInputs(state, action));\n  case ADD_OUTPUT:\n    return validateTransaction(addOutput(state, action));\n  case SET_CHANGE_OUTPUT_INDEX:\n      return updateState(state, { changeOutputIndex: action.value });\n  case SET_OUTPUT_ADDRESS:\n    return validateTransaction(updateOutputAddress(state, action));\n  case SET_OUTPUT_AMOUNT:\n    return validateTransaction(updateOutputAmount(state, action));\n  case DELETE_OUTPUT:\n    return validateTransaction(deleteOutput(state, action));\n  case SET_FEE_RATE:\n    return validateTransaction(updateFeeRate(state, action));\n  case SET_FEE:\n    return validateTransaction(updateFee(state, action));\n  case FINALIZE_OUTPUTS:\n    return finalizeOutputs(state, action);\n  case RESET_OUTPUTS:\n    return updateState(state, {\n      outputs: initialOutputsState(),\n      fee: '',\n      balanceError: '',\n      changeOutputIndex: 0,\n      // FIXME what about feeRate ?\n    });\n  case SET_TXID:\n    return updateState(state, { txid: action.value });\n  case SET_IS_WALLET:\n    return updateState(state, { isWallet: true} );\n  case RESET_TRANSACTION:\n    return updateState(state, initialState)\n  default:\n    return state;\n  }\n};\n","import {\n  PENDING,\n} from \"unchained-wallets\";\n\nimport {\n  SET_KEYSTORE,\n  SET_KEYSTORE_NOTE,\n  SET_KEYSTORE_STATUS,\n} from '../actions/keystoreActions';\n\nconst initialState = {\n  type: '',\n  version: '',\n  note: '',\n  status: PENDING,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_KEYSTORE:\n    return {\n      ...state,\n      ...{type: action.keystoreType, version: action.version},\n    };\n  case SET_KEYSTORE_NOTE:\n    return {\n      ...state,\n      ...{note: action.value},\n    };\n  case SET_KEYSTORE_STATUS:\n    return {\n      ...state,\n      ...{status: action.value},\n    };\n  default:\n    return state;\n  }\n};\n","import React from \"react\";\nimport {\n  MAINNET,\n  TESTNET,\n  TEST_FIXTURES,\n} from \"unchained-bitcoin\";\nimport {\n  ExportPublicKey,\n} from \"unchained-wallets\";\n\nimport Test from \"./Test\";\n\nclass ExportPublicKeyTest extends Test {\n\n  name() {\n    return `Export ${this.params.network} public key at ${this.params.bip32Path}`;\n\n  }\n\n  description() {\n    return (<p>Export a public key at BIP32 path <code>{this.params.bip32Path}</code>.</p>);\n  }\n  \n  interaction() {\n    return ExportPublicKey({\n      keystore: this.params.keystore, \n      network: this.params.network,\n      bip32Path: this.params.bip32Path,\n    });\n  }\n\n  postprocess(result) {\n    return (result.pubkey ? result.pubkey :  result);\n  }\n\n  expected() {\n    return TEST_FIXTURES.nodes[this.params.bip32Path].pub;\n  }\n\n}\n\nconst publicKeyTests = (keystore) => ([\n  new ExportPublicKeyTest({\n    keystore, \n    network: TESTNET,\n    bip32Path: \"m/45'/1'/0'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore, \n    network: TESTNET,\n    bip32Path: \"m/48'/1'/0'/1'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore, \n    network: TESTNET,\n    bip32Path: \"m/48'/1'/0'/2'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore, \n    network: MAINNET,\n    bip32Path: \"m/45'/0'/0'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore, \n    network: MAINNET,\n    bip32Path: \"m/48'/0'/0'/1'/0/0\",\n  }),\n  new ExportPublicKeyTest({\n    keystore, \n    network: MAINNET,\n    bip32Path: \"m/48'/0'/0'/2'/0/0\",\n  }),\n]);\n\nexport default publicKeyTests;\n","import React from \"react\";\nimport {\n  blockExplorerAddressURL,\n  satoshisToBitcoins,\n  unsignedMultisigTransaction,\n  TEST_FIXTURES,\n} from \"unchained-bitcoin\";\nimport {SignMultisigTransaction} from \"unchained-wallets\";\nimport {externalLink} from \"../utils\";\n\nimport Test from \"./Test\";\n\nimport {\n  Box, Button,\n  Table, TableBody, TableRow, TableCell\n} from \"@material-ui/core\";\n\nclass SignMultisigTransactionTest extends Test {\n\n  description() {\n    return (\n      <Box>\n        <p>Sign a transaction which {this.params.description}.</p>\n        <p><small>This transaction is not meant to be broadcast, but just in case, the output address is fixed and owned by Unchained Capital.</small></p>\n        <Table>\n          <TableBody>\n\n          <TableRow>\n            <TableCell>\n              Output Address:\n            </TableCell>\n            <TableCell>\n              {externalLink(blockExplorerAddressURL(this.outputAddress(), this.params.network), <code>{this.outputAddress()}</code>)}\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>\n              Output Amount:\n            </TableCell>\n            <TableCell>\n              {satoshisToBitcoins(this.outputAmountSats()).toString()} BTC\n            </TableCell>\n          </TableRow>\n\n          <TableRow>\n            <TableCell>\n              Fees:\n            </TableCell>\n            <TableCell>\n              {satoshisToBitcoins(this.feeSats()).toString()} BTC\n            </TableCell>\n          </TableRow>\n\n          </TableBody>\n        </Table>\n\n      </Box>);\n  }\n\n  inputsTotalSats() {\n    return this.params.inputs.reduce((total, input) => {return total  + input.amountSats.toNumber();}, 0);\n  }\n\n  outputAddress() {\n    return this.params.outputs[0].address;\n  }\n\n  outputAmountSats() {\n    return this.params.outputs[0].amountSats.toNumber();\n  }\n\n  feeSats() {\n    return this.inputsTotalSats() - this.outputAmountSats();\n  }\n\n  unsignedTransaction() {\n    return unsignedMultisigTransaction(this.params.network, this.params.inputs, this.params.outputs);\n  }\n\n  interaction() {\n    return SignMultisigTransaction({\n      keystore: this.params.keystore, \n      network: this.params.network,\n      inputs: this.params.inputs,\n      outputs: this.params.outputs,\n      bip32Paths: this.params.bip32Paths,\n    });\n  }\n\n  postprocess(result) {\n    return (result.signatures ? result.signatures : result);\n  }\n  \n  expected() {\n    return this.params.signature;\n  }\n\n  matches(expected, actual) {\n    return JSON.stringify(expected) === JSON.stringify(actual);\n  }\n\n}\n\nexport function signingTests(keystore) {\n  return TEST_FIXTURES.transactions.map((fixture) => {\n    return new SignMultisigTransactionTest({\n      ...fixture,\n      ...{keystore},\n    });\n  });\n}\n\nexport default signingTests;\n","import React from \"react\";\n\nimport {\n  blockExplorerAddressURL,\n  TEST_FIXTURES,\n} from \"unchained-bitcoin\";\nimport {ConfirmMultisigAddress} from \"unchained-wallets\";\nimport {externalLink} from \"../utils\";\n\nimport Test from \"./Test\";\n\nimport {\n  Box,\n  Table, TableBody, TableRow, TableCell,\n} from \"@material-ui/core\";\n\nclass ConfirmMultisigAddressTest extends Test {\n\n  name() {\n    return `Confirm ${this.params.network} ${this.params.type} multisig address`;\n  }\n\n  description() {\n    return (\n      <Box>\n        <p>Confirm the following {this.params.network} {this.params.type} 2-of-2 multisig address on your device:</p>\n\n        <Table>\n          <TableBody>\n\n            <TableRow>\n              <TableCell>\n                Address:\n              </TableCell>\n              <TableCell>\n                {externalLink(blockExplorerAddressURL(this.params.address, this.params.network), <code>{this.params.address}</code>)}\n              </TableCell>\n            </TableRow>\n\n\n            <TableRow>\n              <TableCell>\n                BIP32 Path:\n              </TableCell>\n              <TableCell>\n                <code>{this.params.bip32Path}</code>\n              </TableCell>\n            </TableRow>\n\n          </TableBody>\n        </Table>\n\n      </Box>\n    );\n  }\n  \n  interaction() {\n    return ConfirmMultisigAddress({\n      keystore: this.params.keystore, \n      network: this.params.network,\n      bip32Path: this.params.bip32Path,\n      multisig: this.params.multisig,\n    });\n  }\n\n  matches(expected, actual) {\n    // Either we get an error or we succeed with no output.\n    return true;\n  }\n\n}\n\nconst addressTests = (keystore) => (\n  TEST_FIXTURES.multisigs.map((fixture) => {\n    return new ConfirmMultisigAddressTest({\n      ...fixture,\n      ...{keystore},\n    });\n  }));\n\nexport default addressTests;\n","import {TREZOR} from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport signingTests from \"./signing\";\nimport addressTests from \"./addresses\";\n\nexport default publicKeyTests(TREZOR).concat(signingTests(TREZOR)).concat(addressTests(TREZOR));\n","import {LEDGER} from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport signingTests from \"./signing\";\n\nexport default publicKeyTests(LEDGER).concat(signingTests(LEDGER));\n","import {P2SH} from \"unchained-bitcoin\";\nimport {HERMIT} from \"unchained-wallets\";\n\nimport publicKeyTests from \"./publicKeys\";\nimport signingTests from \"./signing\";\n\nexport default publicKeyTests(HERMIT)\n  .concat(signingTests(HERMIT).filter((test) => { return !test.segwit; }));\n","import {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\nimport trezorTests from \"./trezor\";\nimport ledgerTests from \"./ledger\";\nimport hermitTests from \"./hermit\";\n\nconst SUITE = {};\n\nSUITE[TREZOR] = trezorTests;\nSUITE[LEDGER] = ledgerTests;\nSUITE[HERMIT] = hermitTests;\n\nconst SEED = [\n  'merge',\n  'alley',\n  'lucky',\n  'axis',\n  'penalty',\n  'manage',\n  'latin',\n  'gasp',\n  'virus',\n  'captain',\n  'wheel',\n  'deal',\n  'chase',\n  'fragile',\n  'chapter',\n  'boss',\n  'zero',\n  'dirt',\n  'stadium',\n  'tooth',\n  'physical',\n  'valve',\n  'kid',\n  'plunge',\n];\n\nexport {\n  SUITE,\n  SEED,\n};\n","import moment from \"moment\";\nimport {\n  PENDING,\n  ACTIVE,\n} from \"unchained-wallets\";\n\nimport {SUITE} from \"../tests\";\n\nimport {\n  SET_KEYSTORE,\n} from \"../actions/keystoreActions\";\nimport {\n  START_TEST_SUITE_RUN,\n  SET_CURRENT_TEST_RUN,\n} from \"../actions/testSuiteRunActions\";\nimport {\n  START_TEST_RUN,\n  END_TEST_RUN,\n  RESET_TEST_RUN,\n  SET_TEST_RUN_NOTE,\n} from \"../actions/testRunActions\";\n\nconst initialTestRunState = {\n  startedAt: '',\n  endedAt: '',\n  status: PENDING,\n  message: '',\n  note: '',\n};\n\nconst initialState = {\n  started: false,\n  startedAt: '',\n  endedAt: '',\n  testRuns: [],\n  currentTestRunIndex: -1,\n};\n\nconst testRunsForKeystore = (action) => {\n  if (action.keystoreType === '') {\n    return [];\n  }\n  return (SUITE[action.keystoreType] || [])\n    .filter((test) => test.supports(action.keystoreVersion))\n    .map((test, i) => {\n      return {\n        ...initialTestRunState,\n        ...{test},\n      };\n    });\n};\n\nconst updatedTestRun = (state, testRunIndex, update) => {\n  return {\n    ...state,\n    ...{testRuns: state.testRuns.map((testRun, i) => {\n      if (i === testRunIndex) {\n        return {\n          ...testRun,\n          ...update,\n        };\n      } else {\n        return testRun;\n      }\n    })},\n  };\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_KEYSTORE:\n    return {\n      ...state,\n      ...{testRuns: testRunsForKeystore(action)},\n    };\n  case START_TEST_SUITE_RUN:\n    return {\n      ...state,\n      ...{\n        started: true,\n        startedAt: moment(),\n        currentTestRunIndex: 0,\n      },\n    };\n  case SET_CURRENT_TEST_RUN:\n    return {\n      ...state,\n      ...{currentTestRunIndex: action.value},\n    };\n  case START_TEST_RUN:\n    return updatedTestRun(state, action.testRunIndex, {\n      startedAt: moment(), \n      status: ACTIVE,\n    });\n  case END_TEST_RUN:\n    return updatedTestRun(state, action.testRunIndex, {\n      endedAt: moment(), \n      status: action.status, \n      message: action.message,\n    });\n  case RESET_TEST_RUN:\n    return updatedTestRun(state, action.testRunIndex, initialTestRunState);\n  case SET_TEST_RUN_NOTE:\n    return updatedTestRun(state, action.testRunIndex, {note: action.note});\n  default:\n    return state;\n  }\n};\n","import {\n  SET_ERROR_NOTIFICATION,\n  CLEAR_ERROR_NOTIFICATION,\n} from '../actions/errorNotificationActions';\n\nconst initialState = {\n  message: '',\n  open: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_ERROR_NOTIFICATION:\n    return {\n      ...state,\n      ...{open: true, message: action.value},\n    };\n  case CLEAR_ERROR_NOTIFICATION:\n    return {\n      ...state,\n      ...{open: false, message: ''},\n    };\n  default:\n    return state;\n  }\n};\n","import { combineReducers } from 'redux';\n\nimport settingsReducer from './settingsReducer';\nimport clientReducer from './clientReducer';\nimport braidReducer from './braidReducer';\nimport quorumReducer from './quorumReducer';\nimport addressReducer from './addressReducer';\nimport walletReducer from './walletReducer';\n\nimport ownershipReducer from './ownershipReducer';\nimport signatureImportersReducer from './signatureImportersReducer';\nimport transactionReducer from './transactionReducer';\nimport keystoreReducer from \"./keystoreReducer\";\nimport testSuiteRunReducer from \"./testSuiteRunReducer\";\nimport errorNotificationReducer from \"./errorNotificationReducer\";\n\nimport {\n  UPDATE_DEPOSIT_NODE,\n  UPDATE_CHANGE_NODE,\n} from '../actions/walletActions';\n\nconst spendReducers = combineReducers({\n  ownership: ownershipReducer,\n  transaction: transactionReducer,\n  signatureImporters: signatureImportersReducer,\n});\n\nconst walletReducers = combineReducers({\n  deposits: braidReducer(UPDATE_DEPOSIT_NODE),\n  change: braidReducer(UPDATE_CHANGE_NODE),\n  info: walletReducer\n});\n\nconst rootReducers = combineReducers({\n  settings: settingsReducer,\n  client: clientReducer,\n  address: addressReducer,\n  spend: spendReducers,\n  quorum: quorumReducer,\n  wallet: walletReducers,\n  testSuiteRun: testSuiteRunReducer,\n  keystore: keystoreReducer,\n  errorNotification: errorNotificationReducer,\n});\n\nexport default rootReducers;\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport ReduxPromise from 'redux-promise';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducers from './reducers';\n\n/* eslint-disable-next-line no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(logger, ReduxPromise, thunk),\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app'),\n);\nregisterServiceWorker();\n","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHexString = toHexString;\nexports.validateHex = validateHex;\nexports.satoshisToBitcoins = satoshisToBitcoins;\nexports.bitcoinsToSatoshis = bitcoinsToSatoshis;\nexports.ZERO = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This module provides conversion and validation functions for units\n * (Satoshis, BTC) and hex strings.\n * \n * @module utils\n */\n\n/**\n * Converts a byte array to its hex representation.\n * \n * @param {number[]} byteArray - input byte array\n * @returns {string} hex representation of input array\n * \n * @example\n * import {toHexString} from \"unchained-bitcoin\";\n * const hex = toHexString([255, 0, 15, 16, 31, 32]);\n * console.log(hex) // ff000f101f20\n * \n */\n\n\nfunction toHexString(byteArray) {\n  return Array.prototype.map.call(byteArray, function (_byte) {\n    return ('0' + (_byte & 0xFF).toString(16)).slice(-2);\n  }).join('');\n}\n/**\n * Validate whether the given string is hex.\n *\n * - Valid hex consists of an even number of characters 'a-f`, `A-F`,\n *   or `0-9`.  This is case-insensitive.\n *\n * - The presence of the common prefix `0x` will make the input be\n *   considered invalid (because of the` `x`).\n * \n * @param {string} inputString - string to validate\n * @returns {string} empty if valid or corresponding validation message if not\n * \n * @example\n * import {validateHex} from \"unchained-bitcoin\";\n * console.log(validateHex('00112233gg')) // \"Invalid hex: ...\"\n * console.log(validateHex('0xdeadbeef')) // \"Invalid hex: ...\"\n * console.log(validateHex('deadbeef')) // \"\"\n * console.log(validateHex('DEADbeef')) // \"\"\n * \n */\n\n\nfunction validateHex(inputString) {\n  if (inputString.length % 2) {\n    return 'Invalid hex: odd-length string.';\n  }\n\n  var re = /^[0-9A-Fa-f]*$/;\n\n  if (!re.test(inputString)) {\n    return 'Invalid hex: only characters a-f, A-F and 0-9 allowed.';\n  }\n\n  return '';\n}\n/**\n * Convert a value in Satoshis to BTC.\n *\n * - Accepts both positive and negative input values.\n * - Rounds down (towards zero) input value to the nearest Satoshi.\n * \n * @param {BigNumber|string|number} satoshis - value in Satoshis\n * @returns {BigNumber} value in BTC\n * \n * @example\n * import {satoshisToBitcoins} from \"unchained-bitcoin\";\n * console.log(satoshisToBitcoins(123450000)); // 1.2345\n * console.log(satoshisToBitcoins('0.5')); // 0\n * console.log(satoshisToBitcoins('-100000000.5')); // -1.0\n * \n */\n\n\nfunction satoshisToBitcoins(satoshis) {\n  var originalValue = (0, _bignumber[\"default\"])(satoshis);\n  var roundedValue = originalValue.integerValue(_bignumber[\"default\"].ROUND_DOWN);\n  return roundedValue.shiftedBy(-8);\n}\n/**\n * Convert a value in BTC to Satoshis.\n *\n * - Accepts both positive and negative input values.\n * - Rounds down output value to the nearest Satoshi.\n * \n * @param {BigNumber|string|number} btc - value in BTC\n * @returns {BigNumber} value in satoshis\n * \n * @example\n * import {bitcoinsToSatoshis} from \"unchained-bitcoin\";\n * console.log(bitcoinsToSatoshis(1.2345)); // 123450000\n * console.log(bitcoinsToSatoshis(-1.2345)); // -123450000\n */\n\n\nfunction bitcoinsToSatoshis(num) {\n  return (0, _bignumber[\"default\"])(num).shiftedBy(8).integerValue(_bignumber[\"default\"].ROUND_DOWN);\n}\n\nvar ZERO = (0, _bignumber[\"default\"])(0);\nexports.ZERO = ZERO;","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.networkData = networkData;\nexports.networkLabel = networkLabel;\nexports.NETWORKS = exports.TESTNET = exports.MAINNET = void 0;\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * This module exports network constants and provide some utility\n * functions for displaying the network name and passing the network\n * value to bitcoinjs.\n * \n * @module networks\n */\n\n/**\n * Constant corresponding to the Bitcoin mainnet.\n * \n * @constant\n * @type {string}\n * @default mainnet\n * \n */\n\n\nvar MAINNET = \"mainnet\";\n/**\n * Constant corresponding to the current Bitcoin testnet.\n * \n * @constant\n * @type {string}\n * @default testnet\n */\n\nexports.MAINNET = MAINNET;\nvar TESTNET = \"testnet\";\n/**\n * Enumeration of possible values for bitcoin networks ([MAINET]{@link module:networks.MAINNET}|[TESTNET]{@link module:networks.TESTNET}).\n *\n * @constant\n * @enum {string}\n * @default\n */\n\nexports.TESTNET = TESTNET;\nvar NETWORKS = {\n  MAINNET: MAINNET,\n  TESTNET: TESTNET\n};\n/**\n * Returns bitcoinjs-lib network object corresponding to the given\n * network.\n *\n * This function is for internal use by this library.\n * \n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {Network} bitcoinjs-lib network object\n */\n\nexports.NETWORKS = NETWORKS;\n\nfunction networkData(network) {\n  switch (network) {\n    case NETWORKS.MAINNET:\n      return bitcoin.networks.bitcoin;\n\n    case NETWORKS.TESTNET:\n      return bitcoin.networks.testnet;\n\n    default:\n      return bitcoin.networks.testnet;\n  }\n}\n/**\n * Returns human-readable network label for the specified network.\n * \n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} network label\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * console.log(networkLabel(MAINNET)); // \"Mainnet\"\n */\n\n\nfunction networkLabel(network) {\n  switch (network) {\n    case NETWORKS.MAINNET:\n      return \"Mainnet\";\n\n    case NETWORKS.TESTNET:\n      return \"Testnet\";\n\n    default:\n      return \"Testnet\";\n  }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feeMagicBtn\":\"styles_feeMagicBtn__3R6H-\",\"utxoTxid\":\"styles_utxoTxid__1oJ63\",\"outputsFormInput\":\"styles_outputsFormInput__2eCJm\",\"unconfirmed\":\"styles_unconfirmed__1u5jD\",\"spent\":\"styles_spent__1ho2q\"};","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2SHTransactionVSize = estimateMultisigP2SHTransactionVSize;\nexports.P2SH = void 0;\n/**\n * This module provides functions and constants for the P2SH address type.\n * \n * @module p2sh\n */\n\n/**\n * Address type constant for \"pay-to-script-hash\" (P2SH) addresses.\n *\n * @constant\n * @type {string}\n * @default P2SH\n */\n\nvar P2SH = \"P2SH\";\n/**\n * Estimate the transaction virtual size (vsize) when spending inputs\n * from the same multisig P2SH address.\n * \n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - number of m-of-n multisig P2SH inputs\n * @param {number} config.numOutputs - number of outputs\n * @param {number} config.m - required signers\n * @param {number} config.n - total signers\n * @returns {number} estimated transaction virtual size in bytes\n */\n\nexports.P2SH = P2SH;\n\nfunction estimateMultisigP2SHTransactionVSize(config) {\n  var baseSize = 41 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72 + 1; // approx including push byte\n\n  var scriptOverhead = 4;\n  var keylength = 33 + 1; // push byte\n\n  var sigSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + scriptOverhead * config.numInputs;\n  var vsize = baseSize + sigSize;\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2SH_P2WSHTransactionVSize = estimateMultisigP2SH_P2WSHTransactionVSize;\nexports.P2SH_P2WSH = void 0;\n/**\n * This module provides functions and constants for the P2SH-wrapped\n * P2WSH address type, sometimes written P2SH-P2WSH.\n * \n * @module p2sh_p2wsh\n */\n\n/**\n * Address type constant for \"pay-to-script-hash\" wrapped\n * \"pay-to-witness-script-hash\" (P2SH-P2WSH) addresses.\n *\n * @constant\n * @type {string}\n * @default P2SH-P2WSH\n * \n */\n\nvar P2SH_P2WSH = \"P2SH-P2WSH\";\n/**\n * Estimate the transaction virtual size (vsize) when spending inputs\n * from the same multisig P2SH-P2WSH address.\n *\n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - number of m-of-n multisig P2SH inputs\n * @param {number} config.numOutputs - number of outputs\n * @param {number} config.m - required signers\n * @param {number} config.n - total signers\n * @returns {number} estimated transaction virtual size in bytes\n */\n\nexports.P2SH_P2WSH = P2SH_P2WSH;\n\nfunction estimateMultisigP2SH_P2WSHTransactionVSize(config) {\n  var baseSize = 76 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72;\n  var overhead = 6;\n  var keylength = 33;\n  var witnessSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + overhead * config.numInputs;\n  var vsize = Math.ceil(0.75 * baseSize + 0.25 * (baseSize + witnessSize));\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateMultisigP2WSHTransactionVSize = estimateMultisigP2WSHTransactionVSize;\nexports.P2WSH = void 0;\n/**\n * This module provides functions and constants for the P2WSH address type.\n * \n * @module p2wsh\n */\n\n/**\n * Address type constant for \"pay-to-witness-script-hash\" or (P2WSH)\n * addresses.\n * \n * @constant\n * @type {string}\n * @default P2WSH\n */\n\nvar P2WSH = \"P2WSH\";\n/**\n * Estimate the transaction virtual size (vsize) when spending inputs\n * from the same multisig P2WSH address.\n *\n * @param {Object} config - configuration for the calculation\n * @param {number} config.numInputs - number of m-of-n multisig P2SH inputs\n * @param {number} config.numOutputs - number of outputs\n * @param {number} config.m - required signers\n * @param {number} config.n - total signers\n * @returns {number} estimated transaction virtual size in bytes\n */\n\nexports.P2WSH = P2WSH;\n\nfunction estimateMultisigP2WSHTransactionVSize(config) {\n  var baseSize = 41 * config.numInputs + 34 * config.numOutputs + 30;\n  var signatureLength = 72;\n  var overhead = 6;\n  var keylength = 33;\n  var witnessSize = signatureLength * config.m * config.numInputs + keylength * config.n * config.numInputs + overhead * config.numInputs;\n  var vsize = Math.ceil(0.75 * baseSize + 0.25 * (baseSize + witnessSize));\n  return vsize;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateMultisigFromPublicKeys = generateMultisigFromPublicKeys;\nexports.generateMultisigFromHex = generateMultisigFromHex;\nexports.generateMultisigFromRedeemScript = generateMultisigFromRedeemScript;\nexports.multisigAddressType = multisigAddressType;\nexports.multisigRequiredSigners = multisigRequiredSigners;\nexports.multisigTotalSigners = multisigTotalSigners;\nexports.multisigScript = multisigScript;\nexports.multisigRedeemScript = multisigRedeemScript;\nexports.multisigWitnessScript = multisigWitnessScript;\nexports.multisigPublicKeys = multisigPublicKeys;\nexports.multisigAddress = multisigAddress;\nexports.MULTISIG_ADDRESS_TYPES = void 0;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _networks = require(\"./networks\");\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This module provides an API around the multisig capabilities of the\n * bitcoinjs-lib library.  The API is functional but requires you\n * creating and passing around a [`Multisig`]{@link module:multisig.MULTISIG} object.\n *\n * This `Multisig` object represents the combination of:\n *\n * 1) a sequence of N public keys\n * 2) the number of required signers (M)\n * 3) the address type  (P2SH, P2SH-P2WSH, P2WSH)\n * 4) the bitcoin network\n *\n * This corresponds to a unique bitcoin multisig address.  Note that\n * since (3) & (4) can change without changing (1) & (2), different\n * `Multisig` objects (and their corresponding bitcoin addresses) can\n * have different representations but the same security rules as to\n * who can sign.\n *\n * You can create `Multisig` objects yourself using the following\n * functions:\n *\n * - `generateMultisigFromPublicKeys` which takes public keys as input\n * - `generateMultisigFromHex` which takes a redeem/witness script as input\n * \n * Once you have a `Multisig` object you can pass it around in your\n * code and then ask questions about it using the other functions\n * defined in this module.\n *\n * You can manipulate `Multisig` objects directly but it's better to\n * use the functions from API provided by this module.\n *\n * @module multisig\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigRequiredSigners, multisigTotalSigners,\n *   multisigAddressType,\n *   multisigPublicKeys,\n * } from \"unchained-bitcoin\";\n * const pubkey1 = \"03a...\";\n * const pubkey2 = \"03b...\";\n * // A mainnet 1-of-2 P2SH multisig\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 1, pubkey1, pubkey2);\n * \n * console.log(multisigRequiredSigners(multisig)); // 1\n * console.log(multisigTotalSigners(multisig)); // 2\n * console.log(multisigAddressType(multisig)); // \"P2SH\"\n * console.log(multisigPublicKeys(multisig)); // [\"03a...\", \"03b...\"]\n *\n */\n\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n* Describes the return type of several functions in the\n* `bitcoin.payments` module of bitcoinjs-lib.\n*\n* The following functions in this module will return objects of this\n* type:\n*\n* - `generateMultisigFromPublicKeys` which takes public keys as input\n* - `generateMultisigFromHex` which takes a redeem/witness script as input\n*\n* The remaining functions accept these objects as arguments.\n*\n* @typedef module:multisig.Multisig\n* @type {Object}\n* \n*/\n\n/**\n * Enumeration of possible multisig address types ([P2SH]{@link module:p2sh.P2SH}|[P2SH_P2WSH]{@link module:p2sh_p2wsh.P2SH_P2WSH}|[P2WSH]{@link module:p2wsh.P2WSH}).\n *\n * @constant\n * @enum {string}\n * @default\n */\n\n\nvar MULTISIG_ADDRESS_TYPES = {\n  P2SH: _p2sh.P2SH,\n  P2SH_P2WSH: _p2sh_p2wsh.P2SH_P2WSH,\n  P2WSH: _p2wsh.P2WSH\n}; //\n// * Generating Multisig objects * \n//\n// ================================================================================\n\n/**\n * Return an M-of-N [`Multisig`]{@link module:multisig.MULTISIG}\n * object by specifying the total number of signers (M) and the public\n * keys (N total).\n * \n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - address type\n * @param {number} requiredSigners - number of signers required needed to spend funds (M)\n * @param  {...string} publicKeys - list of public keys, 1 per possible signer (N)\n * @returns {Multisig}\n * @example\n * // A 2-of-3 P2SH mainnte multisig built from 3 public keys.\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH, P2WSH,\n * } from \"unchained-bitcoin\";\n * const multisigP2SH = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * const multisigP2WSH = generateMultisigFromPublicKeys(MAINNET, P2WSH, 2, \"03a...\", \"03b...\", \"03c...\");\n */\n\nexports.MULTISIG_ADDRESS_TYPES = MULTISIG_ADDRESS_TYPES;\n\nfunction generateMultisigFromPublicKeys(network, addressType, requiredSigners) {\n  for (var _len = arguments.length, publicKeys = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    publicKeys[_key - 3] = arguments[_key];\n  }\n\n  var redeemScript = bitcoin.payments.p2ms({\n    m: requiredSigners,\n    pubkeys: publicKeys.map(function (hex) {\n      return Buffer.from(hex, 'hex');\n    }),\n    network: (0, _networks.networkData)(network)\n  });\n  return generateMultisigFromRedeemScript(addressType, redeemScript);\n}\n/**\n * Return an M-of-N [`Multisig`]{@link module.multisig:Multisig}\n * object by passing a script in hex.\n *\n * If the `addressType` is `P2SH` then the script hex being passed is\n * the redeem script.  If the `addressType` is P2SH-wrapped SegWit\n * (`P2SH_P2WSH`) or native SegWit (`P2WSH`) then the script hex being\n * passed is the witness script.\n *\n * In practice, the same script hex can be thought of as any of\n * several address types, depending on context.\n * \n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - address type\n * @param {string} multisigScriptHex - hex representation of the redeem/witness script\n * @returns {Multisig} object for further parsing\n * @example\n * import {\n *   generateMultisigFromHex, MAINNET, P2SH, P2WSH,\n * } from \"unchained-bitcoin\";\n * const multisigScript = \"512103a90d10bf3794352bb1fa533dbd4ea75a0ffc98e0d05124938fcc3e10cdbe1a4321030d60e8d497fa8ce59a2b3203f0e597cd0182e1fe0cc3688f73497f2e99fbf64b52ae\";\n * const multisigP2SH = generateMultisigFromHex(MAINNET, P2SH, multisigScript);\n * const multisigP2WSH = generateMultisigFromHex(MAINNET, P2WSH, multisigScript);\n */\n\n\nfunction generateMultisigFromHex(network, addressType, multisigScriptHex) {\n  var redeemScript = bitcoin.payments.p2ms({\n    output: Buffer.from(multisigScriptHex, 'hex'),\n    network: (0, _networks.networkData)(network)\n  });\n  return generateMultisigFromRedeemScript(addressType, redeemScript);\n}\n/**\n * Adapter function for bitcoinjs-lib...used internally, do not use\n * externally.\n * \n * @ignore\n */\n\n\nfunction generateMultisigFromRedeemScript(addressType, redeemScript) {\n  switch (addressType) {\n    case _p2sh.P2SH:\n      return bitcoin.payments.p2sh({\n        redeem: redeemScript\n      });\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return bitcoin.payments.p2sh({\n        redeem: bitcoin.payments.p2wsh({\n          redeem: redeemScript\n        })\n      });\n\n    case _p2wsh.P2WSH:\n      return bitcoin.payments.p2wsh({\n        redeem: redeemScript\n      });\n\n    default:\n      return null;\n  }\n} //\n// * Interrogating Multisig objects * \n//\n// ================================================================================\n\n/**\n * Return the [address type]{@link module:multisig.MULTISIG_ADDRESS_TYPES} of the given `Multisig` object.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {module:multisig.MULTISIG_ADDRESS_TYPES} the address type\n * @example\n * import {\n *   multisigAddressType, P2SH, P2SH_P2WSH, P2WSH,\n * } from \"unchained-bitcoin\";\n * function doSomething(multisig) {\n *   switch (multisigAddressType(multisig)) {\n *   case P2SH:\n *     // handle P2SH here\n *   case P2SH_P2WSH:\n *     // handle P2SH-P2WSH here\n *   case P2WSH:\n *     // handle P2WSH here\n *   default:\n *     // shouldn't reach here\n * }\n */\n\n\nfunction multisigAddressType(multisig) {\n  if (multisig.redeem.redeem) {\n    return _p2sh_p2wsh.P2SH_P2WSH;\n  } else {\n    // FIXME why is multisig.witness null?\n    // if (multisig.witness) {\n    if (multisig.address.match(/^(tb|bc)/)) {\n      return _p2wsh.P2WSH;\n    } else {\n      return _p2sh.P2SH;\n    }\n  }\n}\n/**\n * Return the number of required signers of the given `Multisig`\n * object.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {number} number of required signers\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigRequiredSigners,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigRequiredSigners(multisig)); // 2\n */\n\n\nfunction multisigRequiredSigners(multisig) {\n  return multisigAddressType(multisig) === _p2sh_p2wsh.P2SH_P2WSH ? multisig.redeem.redeem.m : multisig.redeem.m;\n}\n/**\n * Return the number of total signers (public keys) of the given\n * `Multisig` object.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {number} number of total signers\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigTotalSigners,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigTotalSigners(multisig)); // 3\n */\n\n\nfunction multisigTotalSigners(multisig) {\n  return multisigAddressType(multisig) === _p2sh_p2wsh.P2SH_P2WSH ? multisig.redeem.redeem.n : multisig.redeem.n;\n}\n/**\n * Return the multisig script for the given `Multisig` object.\n *\n * If the address type of the given multisig object is P2SH, the\n * redeem script will be returned.  Otherwise, the witness script will\n * be returned.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {Multisig|null}\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigScript,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigScript(multisig));\n */\n\n\nfunction multisigScript(multisig) {\n  switch (multisigAddressType(multisig)) {\n    case _p2sh.P2SH:\n      return multisigRedeemScript(multisig);\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return multisigWitnessScript(multisig);\n\n    case _p2wsh.P2WSH:\n      return multisigWitnessScript(multisig);\n\n    default:\n      return null;\n  }\n}\n/**\n * Return the redeem script for the given `Multisig` object.\n *\n * If the address type of the given multisig object is P2WSH, this\n * will return null.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {Multisig|null}\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigRedeemScript,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigRedeemScript(multisig));\n */\n\n\nfunction multisigRedeemScript(multisig) {\n  switch (multisigAddressType(multisig)) {\n    case _p2sh.P2SH:\n      return multisig.redeem;\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return multisig.redeem;\n\n    case _p2wsh.P2WSH:\n      return null;\n\n    default:\n      return null;\n  }\n}\n/**\n * Return the witness script for the given `Multisig` object.\n *\n * If the address type of the given multisig object is P2SH, this will\n * return null.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {Multisig|null}\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2WSH,\n *   multisigWitnessScript,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2WSH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigWitnessScript(multisig));\n */\n\n\nfunction multisigWitnessScript(multisig) {\n  switch (multisigAddressType(multisig)) {\n    case _p2sh.P2SH:\n      return null;\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return multisig.redeem.redeem;\n\n    case _p2wsh.P2WSH:\n      return multisig.redeem;\n\n    default:\n      return null;\n  }\n}\n/**\n * Return the (compressed) public keys in hex for the given `Multisig`\n * object.\n *\n * The public keys are in the order used in the corresponding\n * redeem/witness script.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {string[]} (compressed) public keys in hex\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2WSH,\n *   multisigPublicKeys,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2WSH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigPublicKeys(multisig)); // [\"03a...\", \"03b...\", \"03c...\"]\n * \n */\n\n\nfunction multisigPublicKeys(multisig) {\n  return (multisigAddressType(multisig) === _p2sh.P2SH ? multisigRedeemScript(multisig) : multisigWitnessScript(multisig)).pubkeys.map(_utils.toHexString);\n}\n/**\n * Return the address for a given `Multisig` object.\n * \n * @param {module:multisig.Multisig} multisig\n * @returns {string} the address\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   multisigAddress,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 2, \"03a...\", \"03b...\", \"03c...\");\n * console.log(multisigAddress(multisig)); // \"3j...\"\n * \n */\n\n\nfunction multisigAddress(multisig) {\n  return multisig.address;\n}","\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/bondibit/projects/unchained/caravan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndirectKeystoreInteraction = exports.DirectKeystoreInteraction = exports.UnsupportedInteraction = exports.KeystoreInteraction = exports.LEVELS = exports.STATES = exports.ERROR = exports.WARNING = exports.INFO = exports.ACTIVE = exports.PENDING = exports.UNSUPPORTED = void 0;\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.reflect.get\");\n\nrequire(\"core-js/modules/es6.object.create\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nvar _bowser = _interopRequireDefault(require(\"bowser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Constant representing a keystore which is unsupported due to the\n * kind of interaction or combination of paramters provided.\n * \n * @type {string}\n */\n\n\nvar UNSUPPORTED = \"unsupported\";\n/**\n * Constant representing a keystore pending activation by the user.\n * \n * @type {string}\n */\n\nexports.UNSUPPORTED = UNSUPPORTED;\nvar PENDING = \"pending\";\n/**\n * Constant representing a keystore in active use.\n * \n * @type {string}\n */\n\nexports.PENDING = PENDING;\nvar ACTIVE = \"active\";\n/**\n * Constant for messages at the \"info\" level.\n * \n * @type {string}\n */\n\nexports.ACTIVE = ACTIVE;\nvar INFO = \"info\";\n/**\n * Constant for messages at the \"warning\" level.\n * \n * @type {string}\n */\n\nexports.INFO = INFO;\nvar WARNING = \"warning\";\n/**\n * Constant for messages at the \"error\" level.\n * \n * @type {string}\n */\n\nexports.WARNING = WARNING;\nvar ERROR = \"error\";\n/**\n * Enumeration of possible keystore states ([PENDING]{@link module:interaction.PENDING}|[ACTIVE]{@link module:interaction.ACTIVE}|[UNSUPPORTED]{@link module:interaction.UNSUPPORTED}).\n * \n * @constant\n * @enum {string}\n * @default\n * \n */\n\nexports.ERROR = ERROR;\nvar STATES = [PENDING, ACTIVE, UNSUPPORTED];\n/**\n * Enumeration of possible message levels ([INFO]{@link module:interaction.INFO}|[WARNING]{@link module:interaction.WARNING}|[ERROR]{@link module:interaction.ERROR}).\n * \n * @constant\n * @enum {string}\n * @default\n * \n */\n\nexports.STATES = STATES;\nvar LEVELS = [INFO, WARNING, ERROR];\n/**\n * Represents an image in a message returned by an interaction.\n *\n * @typedef module:interaction.MessageImage\n * @type {Object}\n * @property {string} label - a human-readable label for the image\n * @property {string} mimeType - the MIME type of the image\n * @property {string} data - base64-encoded image data\n */\n\n/**\n * Represents a message returned by an interaction.\n *\n * Message objects may have additional properties.\n *\n * @typedef module:interaction.Message\n * @type {Object}\n * @property {string} text - message text\n * @property {string} code - a dot-separated message code, e.g. `device.connect` (*Optional for submessages*)\n * @property {module:interaction.STATES} state - keystore state (*Optional for submessages*)\n * @property {module:interaction.LEVELS} level - message level (*Optional for submessages*)\n * @property {string} version - keystore version (can be a single version string or a range/spec) (*Optional*)\n * @property {string} action - keystore action user is expected to take (*Optional*)\n * @property {module:interaction.MessageImage} image - image for this message (*Optional*)\n * @property {Message[]} messages - submessages (*Optional*)\n */\n\n/**\n * Abstract base class for all keystore interactions.\n *\n * Concrete subclasses will want to subclass either\n * `DirectKeystoreInteraction` or `IndirectKeystoreInteraction`.\n *\n * Defines an API for subclasses to leverage and extend.\n *\n * - Subclasses should not have any internal state.  External tools\n *   (UI frameworks such as React) will maintain state and pass it\n *   into the interaction in order to display properly.\n *\n * - Subclasses may override the default constructor in order to allow\n *   users to pass in parameters.\n * \n * - Subclasses should override the `messages` method to customize\n *   what messages are surfaced in applications at what state of the\n *   user interface.\n *\n * - Subclasses should not try to catch all errors, instead letting\n *   them bubble up the stack.  This allows UI developers to deal with\n *   them as appropriate.\n *\n * @example\n * import {KeystoreInteraction, PENDING, ACTIVE, INFO} from \"unchained-wallets\";\n * class DoNothingInteraction extends KeystoreInteraction {\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   messages() {\n *     const messages = super.messages()\n *     messages.push({state: PENDING, level: INFO, text: `Interaction pending: ${this.param}` code: \"pending\"});\n *     messages.push({state: ACTIVE, level: INFO, text: `Interaction active: ${this.param}` code: \"active\"});\n *     return messages;\n *   }\n * \n * }\n *\n * // usage\n * const interaction = new DoNothingInteraction({param: \"foo\"});\n * console.log(interaction.messageTextFor({state: ACTIVE})); // \"Interaction active: foo\"\n * console.log(interaction.messageTextFor({state: PENDING})); // \"Interaction pending: foo\"\n * \n */\n\nexports.LEVELS = LEVELS;\n\nvar KeystoreInteraction =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Base constructor.\n   *\n   * Subclasses will often override this constructor to accept options.\n   *\n   * Just make sure to call `super()` if you do that!\n   * \n   * @constructor\n   */\n  function KeystoreInteraction() {\n    _classCallCheck(this, KeystoreInteraction);\n\n    this.environment = _bowser[\"default\"].getParser(window.navigator.userAgent);\n  }\n  /**\n   * Subclasses can override this method to indicate they are not\n   * supported.\n   *\n   * This method has access to whatever options may have been passed\n   * in by the constructor as well as the ability to interact with\n   * `this.environment` to determine whether the functionality is\n   * supported.  See the Bowser documentation for more details:\n   * https://github.com/lancedikson/bowser\n   * \n   * @returns {boolean}\n   * @example\n   * isSupported() {\n   *   return this.environment.satisfies({\n   *     * declare browsers per OS\n   *     windows: {\n   *       \"internet explorer\": \">10\",\n   *     },\n   *     macos: {\n   *       safari: \">10.1\"\n   *     },\n   *\n   *     * per platform (mobile, desktop or tablet)\n   *     mobile: {\n   *       safari: '>=9',\n   *       'android browser': '>3.10'\n   *     },\n   *\n   *     * or in general\n   *     chrome: \"~20.1.1432\",\n   *     firefox: \">31\",\n   *     opera: \">=22\",\n   *\n   *     * also supports equality operator\n   *     chrome: \"=20.1.1432\", * will match particular build only\n   *\n   *     * and loose-equality operator\n   *     chrome: \"~20\",        * will match any 20.* sub-version\n   *     chrome: \"~20.1\"       * will match any 20.1.* sub-version (20.1.19 as well as 20.1.12.42-alpha.1)\n   *   });\n   * }\n   */\n\n\n  _createClass(KeystoreInteraction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return true;\n    }\n    /**\n     * Return messages array for this interaction.\n     *\n     * The messages array is a (possibly empty) array of [`Message`]{@link module:interaction.Message} objects.\n     *\n     * Subclasses should override this method and add messages as\n     * needed.  Make sure to call `super.messages()` to return an empty\n     * messages array for you to begin populating.\n     * \n     * @returns {module:interaction.Message[]} []\n     */\n\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = [];\n      return messages;\n    }\n    /**\n     * Return messages filtered by the given options.\n     *\n     * Multiple options can be given at once to filter along multiple\n     * dimensions.\n     * \n     * @param {object} options\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {module:interaction.Message[]} matching `Message` objects\n     * @example\n     * import {PENDING, ACTIVE} from \"unchained-bitcoin\";\n     * // Create any interaction instance\n     * interaction.messages().forEach(msg => console.log(msg));\n     *   { code: \"device.connect\", state: \"pending\", level: \"info\", text: \"Please plug in your device.\"}\n     *   { code: \"device.active\", state: \"active\", level: \"info\", text: \"Communicating with your device...\"}\n     *   { code: \"device.active.warning\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     * interaction.messagesFor({state: PENDING}).forEach(msg => console.log(msg));\n     *   { code: \"device.connect\", state: \"pending\", level: \"info\", text: \"Please plug in your device.\"}\n     * interaction.messagesFor({code: ACTIVE}).forEach(msg => console.log(msg));\n     *   { code: \"device.active\", state: \"active\", level: \"info\", text: \"Communicating with your device...\"}\n     *   { code: \"device.active.warning\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     * interaction.messagesFor({version: /^2/}).forEach(msg => console.log(msg));\n     *   { code: \"device.active\", state: \"active\", level: \"warning\", text: \"Your device will warn you about...\", version: \"2.x\"}\n     */\n\n  }, {\n    key: \"messagesFor\",\n    value: function messagesFor(_ref) {\n      var state = _ref.state,\n          level = _ref.level,\n          code = _ref.code,\n          text = _ref.text,\n          version = _ref.version;\n      return this.messages().filter(function (message, i) {\n        if (state && message.state !== state) {\n          return false;\n        }\n\n        if (level && message.level !== level) {\n          return false;\n        }\n\n        if (code && !(message.code || '').match(code)) {\n          return false;\n        }\n\n        if (text && !(message.text || '').match(text)) {\n          return false;\n        }\n\n        if (version && !(message.version || '').match(version)) {\n          return false;\n        }\n\n        return true;\n      });\n    }\n    /**\n     * Return whether there are any messages matching the given options.\n     * \n     * @param {object} options\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasMessagesFor\",\n    value: function hasMessagesFor(_ref2) {\n      var state = _ref2.state,\n          level = _ref2.level,\n          code = _ref2.code,\n          text = _ref2.text,\n          version = _ref2.version;\n      return this.messagesFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      }).length > 0;\n    }\n    /**\n     * Return the first message matching the given options (or `null` if none is found).\n     * \n     * @param {object} options\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {module:interaction.Message|null} the first matching `Message` object (or `null` if none is found)\n     */\n\n  }, {\n    key: \"messageFor\",\n    value: function messageFor(_ref3) {\n      var state = _ref3.state,\n          level = _ref3.level,\n          code = _ref3.code,\n          text = _ref3.text,\n          version = _ref3.version;\n      var messages = this.messagesFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      });\n\n      if (messages.length > 0) {\n        return messages[0];\n      }\n\n      return null;\n    }\n    /**\n     * Retrieve the text of the first message matching the given options\n     * (or `null` if none is found).\n     * \n     * @param {object} options\n     * @param {string} options.state - must equal this keystore state\n     * @param {string} options.level - must equal this message level\n     * @param {string|regexp} options.code - code must match this regular expression\n     * @param {string|regexp} options.text - text must match this regular expression\n     * @param {string|regexp} options.version - version must match this regular expression\n     * @returns {string|null} the text of the first matching message (or `null` if none is found)\n     */\n\n  }, {\n    key: \"messageTextFor\",\n    value: function messageTextFor(_ref4) {\n      var state = _ref4.state,\n          level = _ref4.level,\n          code = _ref4.code,\n          text = _ref4.text,\n          version = _ref4.version;\n      var message = this.messageFor({\n        state: state,\n        level: level,\n        code: code,\n        text: text,\n        version: version\n      });\n      return message ? message.text : null;\n    }\n  }]);\n\n  return KeystoreInteraction;\n}();\n/**\n * Class used for describing an unsupported interaction.\n *\n * - Always returns `false` when the `isSupported` method is called.\n *\n * - Has a keystore state `unsupported` message at the `error` level.\n *\n * - Throws errors when attempting to call API methods such as `run`,\n *   `request`, and `parse`.\n *\n * @extends {module:interaction.KeystoreInteraction}\n * @example\n * import {UnsupportedInteraction} from \"unchained-wallets\";\n * const interaction = new UnsupportedInteraction({text: \"failure text\", code: \"fail\"});\n * console.log(interaction.isSupported()); // false\n * \n */\n\n\nexports.KeystoreInteraction = KeystoreInteraction;\n\nvar UnsupportedInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction) {\n  _inherits(UnsupportedInteraction, _KeystoreInteraction);\n  /**\n   * Accepts parameters to describe what is unsupported and why.\n   *\n   * The `text` should be human-readable.  The `code` is for machines.\n   * \n   * @param {object} options\n   * @param {string} options.text - the text of the error message\n   * @param {string} options.code - the code of the error message\n   * @constructor\n   */\n\n\n  function UnsupportedInteraction(_ref5) {\n    var _this;\n\n    var text = _ref5.text,\n        code = _ref5.code;\n\n    _classCallCheck(this, UnsupportedInteraction);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UnsupportedInteraction).call(this));\n    _this.text = text;\n    _this.code = code;\n    return _this;\n  }\n  /**\n   * Always returns false.\n   * \n   * @returns {false}\n   */\n\n\n  _createClass(UnsupportedInteraction, [{\n    key: \"isSupported\",\n    value: function isSupported() {\n      return false;\n    }\n    /**\n     * Returns a single `error` level message at the `unsupported`\n     * state.\n     *\n     * @returns {module:interaction.Message[]}\n     */\n\n  }, {\n    key: \"messages\",\n    value: function messages() {\n      var messages = _get(_getPrototypeOf(UnsupportedInteraction.prototype), \"messages\", this).call(this);\n\n      messages.push({\n        state: UNSUPPORTED,\n        level: ERROR,\n        code: this.code,\n        text: this.text\n      });\n      return messages;\n    }\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      return _regeneratorRuntime.async(function run$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              throw new Error(this.text);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      throw new Error(this.text);\n    }\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      throw new Error(this.text);\n    }\n  }]);\n\n  return UnsupportedInteraction;\n}(KeystoreInteraction);\n/**\n * Base class for direct keystore interactions.\n *\n * Subclasses *must* implement a `run` method which communicates\n * directly with the keystore.  This method must be asynchronous\n * (return a `Promise`) to accommodate delays with network, devices,\n * &c.\n *\n * @example\n * import {DirectKeystoreInteraction} from \"unchained-wallets\";\n * class SimpleDirectInteraction extends DirectKeystoreInteraction {   *\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   async run() {\n *     // Or do something complicated...\n *     return this.param;\n *   }\n * }\n *\n * const interaction = new SimpleDirectInteraction({param: \"foo\"});\n * \n * const result = await interaction.run();\n * console.log(result);\n * // \"foo\"\n * \n */\n\n\nexports.UnsupportedInteraction = UnsupportedInteraction;\n\nvar DirectKeystoreInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction2) {\n  _inherits(DirectKeystoreInteraction, _KeystoreInteraction2);\n  /**\n   * Sets the `this.direct` property to `true`.  This property can be\n   * utilized when introspecting on interaction classes..\n   *\n   * @constructor\n   */\n\n\n  function DirectKeystoreInteraction() {\n    var _this2;\n\n    _classCallCheck(this, DirectKeystoreInteraction);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DirectKeystoreInteraction).call(this));\n    _this2.direct = true;\n    return _this2;\n  }\n  /**\n   * Initiate the intended interaction and return a result.\n   *\n   * Subclasses *must* override this function.  This function must\n   * always return a promise as it is designed to be called within an\n   * `await` block.\n   *\n   * @returns {Promise}\n   * \n   */\n\n\n  _createClass(DirectKeystoreInteraction, [{\n    key: \"run\",\n    value: function run() {\n      return _regeneratorRuntime.async(function run$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              throw new Error(\"Override the `run` method in this interaction.\");\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    }\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"request\",\n    value: function request() {\n      throw new Error(\"This interaction is direct and does not support a `request` method.\");\n    }\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      throw new Error(\"This interaction is direct and does not support a `parse` method.\");\n    }\n  }]);\n\n  return DirectKeystoreInteraction;\n}(KeystoreInteraction);\n/**\n * Base class for indirect keystore interactions.\n *\n * Subclasses *must* implement two methods: `request` and `parse`.\n * Application code will pass the result of calling `request` to some\n * external process (HTTP request, QR code, &c.) and pass the response\n * to `parse` which should return a result.\n *\n * @example\n * import {IndirectKeystoreInteraction} from \"unchained-wallets\";\n * class SimpleIndirectInteraction extends IndirectKeystoreInteraction {   *\n *\n *   constructor({param}) {\n *     super();\n *     this.param = param;\n *   }\n *\n *   async request() {\n *     // Or do something complicated...\n *     return this.param;\n *   }\n *\n *   parse(response) {\n *     // Or do something complicated with `response`...\n *     return response;\n *   }\n *\n * }\n *\n * const interaction = new SimpleIndirectInteraction({param: \"foo\"});\n * \n * const request = interaction.request();\n * const response = \"bar\"; // Or do something complicated with `request`\n * const result = interaction.parse(response);\n * console.log(result);\n * // \"bar\"\n * \n */\n\n\nexports.DirectKeystoreInteraction = DirectKeystoreInteraction;\n\nvar IndirectKeystoreInteraction =\n/*#__PURE__*/\nfunction (_KeystoreInteraction3) {\n  _inherits(IndirectKeystoreInteraction, _KeystoreInteraction3);\n  /**\n   * Sets the `this.indirect` property to `true`.  This property can\n   * be utilized when introspecting on interaction classes..\n   *\n   * @constructor\n   */\n\n\n  function IndirectKeystoreInteraction() {\n    var _this3;\n\n    _classCallCheck(this, IndirectKeystoreInteraction);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(IndirectKeystoreInteraction).call(this));\n    _this3.indirect = true;\n    return _this3;\n  }\n  /**\n   * Provide the request.\n   *\n   * Subclasses *may* override this function.  It can return any kind\n   * of object.  Strings, data for QR codes, HTTP requests, command\n   * lines, functions, &c. are all allowed.  Whatever is appropriate\n   * for the interaction.\n   *\n   * @returns {Object}\n   *\n   */\n\n\n  _createClass(IndirectKeystoreInteraction, [{\n    key: \"request\",\n    value: function request() {}\n    /**\n     * Parse the response into a result.\n     *\n     * Subclasses *must* override this function.  It must accept an\n     * appropriate kind of `response` object and return the final result\n     * of this interaction.\n     *\n     * @param {Object} response\n     * @returns {Object}\n     *\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(response) {}\n    /**\n     * Throws an error.\n     * \n     */\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      return _regeneratorRuntime.async(function run$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              throw new Error(\"This interaction is indirect and does not support a `run` method.\");\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return IndirectKeystoreInteraction;\n}(KeystoreInteraction);\n\nexports.IndirectKeystoreInteraction = IndirectKeystoreInteraction;","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortInputs = sortInputs;\nexports.validateMultisigInputs = validateMultisigInputs;\nexports.validateMultisigInput = validateMultisigInput;\nexports.validateTransactionID = validateTransactionID;\nexports.validateTransactionIndex = validateTransactionIndex;\n\nrequire(\"core-js/modules/es7.array.includes\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _utils = require(\"./utils\");\n/** \n * This module provides functions for sorting & validating multisig\n * transaction inputs.\n * \n * @module inputs\n */\n\n/**\n* Represents a transaction input.\n*\n* The [`Multisig`]{@link module:multisig.MULTISIG} object represents\n* the address the corresponding UTXO belongs to.\n* \n* @typedef module:inputs.MultisigTransactionInput\n* @type {Object}\n* @property {string} txid - The transaction ID where funds were received\n* @property {number} index - The index in the transaction referred to by {txid}\n* @property {module:multisig.Multisig} multisig - The multisig object encumbering this UTXO\n* \n*/\n\n/**\n * Sorts the given inputs according to the [BIP69 standard]{@link https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki#transaction-inputs}: ascending lexicographic order.\n * \n * @param {module:inputs.MultisigTransactionInput[]} inputs - inputs to sort\n * @returns {module:inputs.MultisigTransactionInput[]} inputs sorted according to BIP69\n */\n\n\nfunction sortInputs(inputs) {\n  return inputs.sort(function (input1, input2) {\n    if (input1.txid > input2.txid) {\n      return 1;\n    } else {\n      if (input1.txid < input2.txid) {\n        return -1;\n      } else {\n        return input1.index < input2.index ? -1 : 1;\n      }\n    }\n  });\n}\n/**\n * Validates the given transaction inputs.\n *\n * Returns an error message if there are no inputs.  Passes each output to [`validateMultisigInput`]{@link module:transactions.validatOutput}.\n *\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:inputs.MultisigTransactionInput[]} inputs - inputs to validate\n * @returns {string} empty if valid or corresponding validation message if not\n * \n */\n\n\nfunction validateMultisigInputs(inputs) {\n  if (!inputs || inputs.length === 0) {\n    return \"At least one input is required.\";\n  }\n\n  var utxoIDs = [];\n\n  for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n    var input = inputs[inputIndex];\n    var error = validateMultisigInput(input);\n\n    if (error) {\n      return error;\n    }\n\n    var utxoID = \"\".concat(input.txid, \":\").concat(input.index);\n\n    if (utxoIDs.includes(utxoID)) {\n      return \"Duplicate input: \".concat(utxoID);\n    }\n\n    utxoIDs.push(utxoID);\n  }\n\n  return \"\";\n}\n/**\n * Validates the given transaction input.\n *\n * - Validates the presence and value of the transaction ID (`txid`) property.\n *\n * - Validates the presence and value of the transaction index (`index`) property.\n *\n * - Validates the presence of the `multisig` property.\n *\n * @param {module:inputs.MultisigTransactionInput} input - input to validate\n * @returns {string} empty if valid or corresponding validation message if not\n * \n */\n\n\nfunction validateMultisigInput(input) {\n  if (!input.txid) {\n    return \"Does not have a transaction ID ('txid') property.\";\n  }\n\n  var error = validateTransactionID(input.txid);\n\n  if (error) {\n    return error;\n  }\n\n  if (input.index !== 0 && !input.index) {\n    return \"Does not have a transaction index ('index') property.\";\n  }\n\n  error = validateTransactionIndex(input.index);\n\n  if (error) {\n    return error;\n  }\n\n  if (!input.multisig) {\n    return \"Does not have a multisig object ('multisig') property.\";\n  }\n\n  return \"\";\n}\n/**\n * Validates the given transaction ID.\n *\n * @param {string} txid - transaction ID to validate\n * @returns {string} empty if valid or corresponding validation message if not\n * \n */\n\n\nfunction validateTransactionID(txid) {\n  if (txid === null || txid === undefined || txid === '') {\n    return \"TXID cannot be blank.\";\n  }\n\n  var error = (0, _utils.validateHex)(txid);\n\n  if (error) {\n    return \"TXID is invalid (\".concat(error, \")\");\n  }\n\n  return '';\n}\n/**\n * Validates the given transaction index.\n *\n * @param {string|number} index - transaction index to validate\n * @returns {string} empty if valid or corresponding validation message if not\n * \n */\n\n\nfunction validateTransactionIndex(indexString) {\n  if (indexString === null || indexString === undefined || indexString === '') {\n    return \"Index cannot be blank.\";\n  }\n\n  var index = parseInt(indexString);\n\n  if (!isFinite(index)) {\n    return \"Index is invalid\";\n  }\n\n  if (index < 0) {\n    return \"Index cannot be negative.\";\n  }\n\n  return \"\";\n}","\"use strict\";\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utils = require(\"./utils\");\n\nObject.keys(_utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _utils[key];\n    }\n  });\n});\n\nvar _paths = require(\"./paths\");\n\nObject.keys(_paths).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _paths[key];\n    }\n  });\n});\n\nvar _keys = require(\"./keys\");\n\nObject.keys(_keys).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _keys[key];\n    }\n  });\n});\n\nvar _networks = require(\"./networks\");\n\nObject.keys(_networks).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _networks[key];\n    }\n  });\n});\n\nvar _script = require(\"./script\");\n\nObject.keys(_script).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _script[key];\n    }\n  });\n});\n\nvar _addresses = require(\"./addresses\");\n\nObject.keys(_addresses).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _addresses[key];\n    }\n  });\n});\n\nvar _fees = require(\"./fees\");\n\nObject.keys(_fees).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _fees[key];\n    }\n  });\n});\n\nvar _signatures = require(\"./signatures\");\n\nObject.keys(_signatures).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _signatures[key];\n    }\n  });\n});\n\nvar _transactions = require(\"./transactions\");\n\nObject.keys(_transactions).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _transactions[key];\n    }\n  });\n});\n\nvar _multisig = require(\"./multisig\");\n\nObject.keys(_multisig).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _multisig[key];\n    }\n  });\n});\n\nvar _block_explorer = require(\"./block_explorer\");\n\nObject.keys(_block_explorer).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _block_explorer[key];\n    }\n  });\n});\n\nvar _p2sh = require(\"./p2sh\");\n\nObject.keys(_p2sh).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _p2sh[key];\n    }\n  });\n});\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nObject.keys(_p2sh_p2wsh).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _p2sh_p2wsh[key];\n    }\n  });\n});\n\nvar _p2wsh = require(\"./p2wsh\");\n\nObject.keys(_p2wsh).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _p2wsh[key];\n    }\n  });\n});\n\nvar _fixtures = require(\"./fixtures\");\n\nObject.keys(_fixtures).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _fixtures[key];\n    }\n  });\n});\n\nvar _inputs = require(\"./inputs\");\n\nObject.keys(_inputs).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _inputs[key];\n    }\n  });\n});\n\nvar _outputs = require(\"./outputs\");\n\nObject.keys(_outputs).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _outputs[key];\n    }\n  });\n});","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  VERSION: true,\n  DIRECT_KEYSTORES: true,\n  INDIRECT_KEYSTORES: true,\n  KEYSTORES: true,\n  GetMetadata: true,\n  ExportPublicKey: true,\n  ExportExtendedPublicKey: true,\n  SignMultisigTransaction: true,\n  ConfirmMultisigAddress: true\n};\nexports.GetMetadata = GetMetadata;\nexports.ExportPublicKey = ExportPublicKey;\nexports.ExportExtendedPublicKey = ExportExtendedPublicKey;\nexports.SignMultisigTransaction = SignMultisigTransaction;\nexports.ConfirmMultisigAddress = ConfirmMultisigAddress;\nexports.KEYSTORES = exports.INDIRECT_KEYSTORES = exports.DIRECT_KEYSTORES = exports.VERSION = void 0;\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar _package = require(\"../package.json\");\n\nvar _interaction = require(\"./interaction\");\n\nObject.keys(_interaction).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _interaction[key];\n    }\n  });\n});\n\nvar _trezor = require(\"./trezor\");\n\nObject.keys(_trezor).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _trezor[key];\n    }\n  });\n});\n\nvar _ledger = require(\"./ledger\");\n\nObject.keys(_ledger).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ledger[key];\n    }\n  });\n});\n\nvar _hermit = require(\"./hermit\");\n\nObject.keys(_hermit).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _hermit[key];\n    }\n  });\n});\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Current unchained-wallets version.\n *\n * @type {string}\n */\n\n\nvar VERSION = _package.version;\n/**\n * Enumeration of keystores which support direct interactions.\n *\n * @constant\n * @enum {string}\n * @default\n */\n\nexports.VERSION = VERSION;\nvar DIRECT_KEYSTORES = {\n  TREZOR: _trezor.TREZOR,\n  LEDGER: _ledger.LEDGER\n};\n/**\n * Enumeration of keystores which support indirect interactions.\n *\n * @constant\n * @enum {string}\n * @default\n */\n\nexports.DIRECT_KEYSTORES = DIRECT_KEYSTORES;\nvar INDIRECT_KEYSTORES = {\n  HERMIT: _hermit.HERMIT\n};\n/**\n * Enumeration of supported keystores.\n *\n * @type {string[]}\n */\n\nexports.INDIRECT_KEYSTORES = INDIRECT_KEYSTORES;\n\nvar KEYSTORES = _objectSpread({}, DIRECT_KEYSTORES, {}, INDIRECT_KEYSTORES);\n/**\n * Return an interaction class for obtaining metadata from the given\n * `keystore`.\n *\n * **Supported keystores:** Trezor, Ledger\n *\n * @param {Object} options\n * @param {KEYSTORES} options.keystore\n * @return {module:interaction.KeystoreInteraction}\n * @example\n * import {GetMetadata, TREZOR} from \"unchained-wallets\";\n * // Works similarly for Ledger.\n * const interaction = GetMetadata({keystore: TREZOR});\n * const metadata = await interaction.run();\n */\n\n\nexports.KEYSTORES = KEYSTORES;\n\nfunction GetMetadata(_ref) {\n  var keystore = _ref.keystore;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorGetMetadata();\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerGetMetadata();\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore does not return a version.\"\n      });\n  }\n}\n/**\n * Return an interaction class for exporting a public key from the\n * given `keystore` for the given `bip32Path` and `network`.\n *\n * **Supported keystores:** Trezor, Ledger, Hermit\n *\n * @param {Object} options\n * @param {KEYSTORES} options.keystore\n * @param {string} options.network - bitcoin network\n * @param {string} options.bip32Path - the BIP32 path of the HD node of the public key\n * @return {module:interaction.KeystoreInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {ExportPublicKey, TREZOR, HERMIT} from \"unchained-wallets\";\n * // Works similarly for Ledger\n * const interaction = ExportPublicKey({keystore: TREZOR, network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0\"});\n * const publicKey = await interaction.run();\n */\n\n\nfunction ExportPublicKey(_ref2) {\n  var keystore = _ref2.keystore,\n      network = _ref2.network,\n      bip32Path = _ref2.bip32Path,\n      bip32Paths = _ref2.bip32Paths;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorExportPublicKey({\n        network: network,\n        bip32Path: bip32Path,\n        bip32Paths: bip32Paths\n      });\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerExportPublicKey({\n        network: network,\n        bip32Path: bip32Path,\n        bip32Paths: bip32Paths\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitExportPublicKey({\n        bip32Path: bip32Path\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when exporting public keys.\"\n      });\n  }\n}\n/**\n * Return an interaction class for exporting an extended public key\n * from the given `keystore` for the given `bip32Path` and `network`.\n *\n * **Supported keystores:** Trezor, Hermit\n *\n *\n * @param {Object} options\n * @param {KEYSTORES} options.keystore\n * @param {string} options.network - bitcoin network\n * @param {string} options.bip32Path - the BIP32 path of the HD node of the extended public key\n * @return {module:interaction.KeystoreInteraction}\n * @example\n * import {MAINNET} from \"unchained-bitcoin\";\n * import {ExportExtendedPublicKey, TREZOR, HERMIT} from \"unchained-wallets\";\n * // Works similarly for Ledger\n * const interaction = ExportExtendedPublicKey({keystore: TREZOR, network: MAINNET, bip32Path: \"m/45'/0'/0'/0/0\"});\n * const xpub = await interaction.run();\n */\n\n\nfunction ExportExtendedPublicKey(_ref3) {\n  var keystore = _ref3.keystore,\n      network = _ref3.network,\n      bip32Path = _ref3.bip32Path;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorExportExtendedPublicKey({\n        network: network,\n        bip32Path: bip32Path\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitExportExtendedPublicKey({\n        bip32Path: bip32Path\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when exporting extended public keys.\"\n      });\n  }\n}\n/**\n * Return an interaction class for signing a multisig transaction with\n * the given `keystore`.\n *\n * The inputs are objects which have `txid`, `index`, and a `multisig`\n * object, the last which is a `Multisig` object from\n * `unchained-bitcoin`.\n *\n * The outputs are objects which have `address` and `amountSats` (an\n * integer).\n *\n * `bip32Paths` is an array of BIP32 paths for the public keys on this\n * device, one for each input.\n *\n * **Supported keystores:** Trezor, Ledger, Hermit\n *\n *\n * @param {Object} options\n * @param {KEYSTORES} options.keystore\n * @param {string} options.network - bitcoin network\n * @param {object[]} options.inputs - transaction inputs\n * @param {object[]} options.outputs - transaction outputs\n * @param {string[]} options.bip32Paths - the BIP32 paths on this device corresponding to a public key in each input\n * @return {module:interaction.KeystoreInteraction}\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {SignMultisigTransaction, TREZOR} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const inputs = [\n *   {\n *     txid: \"8d276c76b3550b145e44d35c5833bae175e0351b4a5c57dc1740387e78f57b11\",\n *     index: 1,\n *     multisig: generateMultisigFromHex(TESTNET, P2SH, redeemScript),\n *     amountSats: '1234000'\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     amountSats: '1299659',\n *     address: \"2NGHod7V2TAAXC1iUdNmc6R8UUd4TVTuBmp\"\n *   },\n *   // other outputs...\n * ];\n * const interaction = SignMultisigTransaction({\n *   keystore: TREZOR, // works the same for Ledger\n *   network: TESTNET,\n *   inputs,\n *   outputs,\n *   bip32Paths: [\"m/45'/0'/0'/0\", // add more, 1 per input],\n * });\n * const signature = await interaction.run();\n * console.log(signatures);\n * // [\"ababab...\", // 1 per input]\n *\n */\n\n\nfunction SignMultisigTransaction(_ref4) {\n  var keystore = _ref4.keystore,\n      network = _ref4.network,\n      inputs = _ref4.inputs,\n      outputs = _ref4.outputs,\n      bip32Paths = _ref4.bip32Paths;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    case _ledger.LEDGER:\n      return new _ledger.LedgerSignMultisigTransaction({\n        network: network,\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    case _hermit.HERMIT:\n      return new _hermit.HermitSignTransaction({\n        inputs: inputs,\n        outputs: outputs,\n        bip32Paths: bip32Paths\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when signing multisig transactions.\"\n      });\n  }\n}\n/**\n * Return an interaction class for confirming a multisig addreess with\n * the given `keystore`.\n *\n * The `multisig` parameter is a `Multisig` object from\n * `unchained-bitcoin`.\n *\n * `bip32Path` is the BIP32 path for the publiic key in the address on\n * this device.\n *\n * **Supported keystores:** Trezor\n *\n * @param {Object} options\n * @param {KEYSTORES} options.keystore\n * @param {string} options.network - bitcoin network\n * @param {object} options.multisig - `Multisig` object representing the address\n * @param {string} options.bip32Path - the BIP32 path on this device containing a public key from the address\n * @return {module:interaction.KeystoreInteraction}\n * @example\n * import {\n *   generateMultisigFromHex, TESTNET, P2SH,\n * } from \"unchained-bitcoin\";\n * import {ConfirmMultisigAddress, TREZOR} from \"unchained-wallets\";\n * const redeemScript = \"5...ae\";\n * const multisig = generateMultisigFromHex(TESTNET, P2SH, redeemScript);\n * const interaction = ConfirmMultisigAddress({\n *   keystore: TREZOR,\n *   network: TESTNET,\n *   multisig,\n *   bip32Path: \"m/45'/1'/0'/0/0\",\n * });\n * await interaction.run();\n *\n */\n\n\nfunction ConfirmMultisigAddress(_ref5) {\n  var keystore = _ref5.keystore,\n      network = _ref5.network,\n      bip32Path = _ref5.bip32Path,\n      multisig = _ref5.multisig;\n\n  switch (keystore) {\n    case _trezor.TREZOR:\n      return new _trezor.TrezorConfirmMultisigAddress({\n        network: network,\n        bip32Path: bip32Path,\n        multisig: multisig\n      });\n\n    default:\n      return new _interaction.UnsupportedInteraction({\n        code: \"unsupported\",\n        text: \"This keystore is not supported when confirming multisig addresses.\"\n      });\n  }\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scriptToOps = scriptToOps;\nexports.scriptToHex = scriptToHex;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n/**\n * This module provides functions for converting generic bitcoin\n * scripts to hex or opcodes.\n * \n * @module script\n */\n\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * Extracts the ASM (opcode) representation of a script from a\n * `Multisig` object.\n * \n * @param {Multisig} script - Multisig object\n * @returns {string} ASM representation of script\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   scriptToOps,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 1, \"03a...\", \"03b...\");\n * console.log(scriptToOps(multisig)) // \"OP_1 03a... 03b... OP_2 OP_CHECKMULTISIG\"\n * \n */\n\n\nfunction scriptToOps(script) {\n  return bitcoin.script.toASM(script.output);\n}\n/**\n * Extracts the hex representation of a script from a `Multisig`\n * object.\n * \n * @param {Multisig} script - Multisig object\n * @returns {string} hex representation of script\n * @example\n * import {\n *   generateMultisigFromPublicKeys, MAINNET, P2SH,\n *   scriptToHex,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(MAINNET, P2SH, 1, \"03a...\", \"03b...\");\n * console.log(scriptToHex(multisig)) // \"5121024f355bdcb...5871aa52ae\"\n * \n */\n\n\nfunction scriptToHex(script) {\n  return script.output.toString('hex');\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAddress = validateAddress;\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nvar _bitcoinAddressValidation = _interopRequireDefault(require(\"bitcoin-address-validation\"));\n\nvar _networks = require(\"./networks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This module provides validation messages related to addresses.\n * \n * @module address\n */\n\n\nvar MAINNET_ADDRESS_MAGIC_BYTE_PATTERN = \"^(bc1|[13])\";\nvar TESTNET_ADDRESS_MAGIC_BYTE_PATTERN = \"^(tb1|bcrt1|[mn2])\";\nvar ADDRESS_BODY_PATTERN = \"[A-HJ-NP-Za-km-z1-9]+$\";\nvar BECH32_ADDRESS_MAGIC_BYTE_REGEX = /^(tb|bc)/;\nvar BECH32_ADDRESS_BODY_PATTERN = \"[ac-hj-np-z02-9]+$\";\n/**\n * Validate a given bitcoin address.\n *\n * Address must be a valid address on the given bitcoin network.\n * \n * @param {string} address - the address to validate\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {MAINNET, TESTNET, validateAddress} from \"unchained-bitcoin\";\n * console.log(validateAddress('', MAINNET)); // \"Address cannot be blank\"\n * console.log(validateAddress('2Mx6Y8VRj8rmSdLfwrvnpBR7ctjctPLzpWs', MAINNET)); // \"Address must start with either of 'bc1', '1' or '3' followed by letters or digits.\"\n * console.log(validateAddress('2Mx6Y8VRj8rmSdLfwrvnpBR7ctjctPLzpWs', TESTNET)); // \"\"\n * \n */\n\nfunction validateAddress(address, network) {\n  if (!address || address.trim() === '') {\n    return 'Address cannot be blank.';\n  }\n\n  var magic_byte_regex = network === _networks.TESTNET ? TESTNET_ADDRESS_MAGIC_BYTE_PATTERN : MAINNET_ADDRESS_MAGIC_BYTE_PATTERN;\n  var isBech32 = address.match(BECH32_ADDRESS_MAGIC_BYTE_REGEX);\n  var address_body_regex = isBech32 ? BECH32_ADDRESS_BODY_PATTERN : ADDRESS_BODY_PATTERN;\n  var address_regex = magic_byte_regex + address_body_regex;\n\n  if (!address.match(address_regex)) {\n    if (network === _networks.TESTNET) {\n      return \"Address must start with one of 'tb1', 'm', 'n', or '2' followed by letters or digits.\";\n    } else {\n      return \"Address must start with either of 'bc1', '1' or '3' followed by letters or digits.\";\n    }\n  } // try {\n  //   // FIXME does this support Bech32 addresses?\n  //   bitcoin.address.toOutputScript(address, network);\n  // } catch (e) {\n  //   return `Address is invalid: ${e}`;\n  // }\n\n\n  var result = (0, _bitcoinAddressValidation[\"default\"])(address);\n\n  if (result) {\n    if (network === _networks.TESTNET && !result.testnet) {\n      return \"This is a \".concat(_networks.MAINNET, \" address.\");\n    }\n\n    if (network === _networks.MAINNET && result.testnet) {\n      return \"This is a \".concat(_networks.TESTNET, \" address.\");\n    }\n  } else {\n    return \"Address is invalid.\";\n  }\n\n  return '';\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMultisigSignature = validateMultisigSignature;\nexports.signatureNoSighashType = signatureNoSighashType;\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _bip = _interopRequireDefault(require(\"bip66\"));\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _multisig = require(\"./multisig\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * This modulde provides functions for validating and handling\n * multisig transaction signatures.\n * \n * @module signatures\n */\n\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * Validate a multisig signature for given input and public key.\n * \n * @param {Transaction} unsignedTransaction - transaction to validate\n * @param {number} inputIndex - the index where the input appears in the transaction\n * @param {module:transactions.UTXO} input - the input itself\n * @param {string} signerInputSignature - signature to validate\n * @returns {string|boolean} false if invalid or corresponding public key\n * @example\n * import {\n *   generateMultisigFromPublicKeys, TESTNET, P2SH,\n *   unsignedMultisigTransaction,\n *   validateMultisigSignature,\n * } from \"unchained-bitcoin\";\n * const pubkey1 = \"03a...\";\n * const pubkey2 = \"03b...\";\n * const multisig = generateMultisigFromPublicKeys(TESTNET, P2SH, 2, pubkey1, pubkey2);\n * const inputs = [\n *   {\n *     txid: \"ae...\",\n *     index: 0,\n *     multisig,\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     address: \"2N...\",\n *     amountSats: 90000,\n *   },\n *   // other outputs...\n * ];\n * const unsignedTransaction = unsignedMultisigTransaction(TESTNET, inputs, outputs);\n * const signature = \"304...\";\n * const result = validateMultisigSignature(unsignedTransaction, 0, inputs[0], signature);\n * switch (result) {\n *   case false:\n *     // signature was invalid\n *   case pubkey1:\n *     // signature was valid for pubkey1\n *   case pubkey2:\n *     // signature was valid for pubkey2\n *   default:\n *     // ...\n * }\n */\n\n\nfunction validateMultisigSignature(unsignedTransaction, inputIndex, input, signerInputSignature) {\n  var hash = multisigSignatureHash(unsignedTransaction, inputIndex, input);\n  var signatureBuffer = multisigSignatureBuffer(signatureNoSighashType(signerInputSignature));\n  var publicKeys = (0, _multisig.multisigPublicKeys)(input.multisig);\n\n  for (var publicKeyIndex = 0; publicKeyIndex < (0, _multisig.multisigTotalSigners)(input.multisig); publicKeyIndex++) {\n    var publicKey = publicKeys[publicKeyIndex];\n    var publicKeyBuffer = Buffer.from(publicKey, 'hex');\n    var keyPair = bitcoin.ECPair.fromPublicKey(publicKeyBuffer);\n\n    if (keyPair.verify(hash, signatureBuffer)) {\n      return publicKey;\n    }\n  }\n\n  return false;\n}\n\nfunction signatureNoSighashType(signature) {\n  var len = parseInt(signature.slice(2, 4), 16);\n  if (len == (signature.length - 4) / 2) return signature;else return signature.slice(0, -2);\n}\n\nfunction multisigSignatureHash(unsignedTransaction, inputIndex, input) {\n  if ((0, _multisig.multisigAddressType)(input.multisig) === _p2wsh.P2WSH || (0, _multisig.multisigAddressType)(input.multisig) === _p2sh_p2wsh.P2SH_P2WSH) {\n    return unsignedTransaction.hashForWitnessV0(inputIndex, (0, _multisig.multisigWitnessScript)(input.multisig).output, (0, _bignumber[\"default\"])(input.amountSats).toNumber(), bitcoin.Transaction.SIGHASH_ALL);\n  } else {\n    return unsignedTransaction.hashForSignature(inputIndex, (0, _multisig.multisigRedeemScript)(input.multisig).output, bitcoin.Transaction.SIGHASH_ALL);\n  }\n}\n\nfunction multisigSignatureBuffer(signature) {\n  var encodedSignerInputSignatureBuffer = new Buffer(signature, 'hex');\n\n  var decodedSignerInputSignatureBuffer = _bip[\"default\"].decode(encodedSignerInputSignatureBuffer);\n\n  var r = decodedSignerInputSignatureBuffer.r,\n      s = decodedSignerInputSignatureBuffer.s; // Ignore the leading 0 if r is 33 bytes\n\n  var rToUse = r;\n\n  if (r.byteLength > 32) {\n    rToUse = r.slice(1);\n  }\n\n  var signatureBuffer = new Buffer(64);\n  signatureBuffer.set(new Buffer(rToUse), 0);\n  signatureBuffer.set(new Buffer(s), 32);\n  return signatureBuffer;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateOutputs = validateOutputs;\nexports.validateOutput = validateOutput;\nexports.validateOutputAmount = validateOutputAmount;\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _utils = require(\"./utils\");\n\nvar _addresses = require(\"./addresses\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/** \n * This module provides functions for and validating transaction\n * outputs.\n * \n * @module outputs\n */\n\n/**\n* Represents an output in a transaction.\n*\n* @typedef module:outputs.TransactionOutput\n* @type {Object}\n* @property {string} address - the output address\n* @property {string|number|BigNumber} amountSats - output amount in Satoshis\n* \n*/\n\n/**\n * Validates the given transaction outputs.\n *\n * Returns an error message if there are no outputs.  Passes each output to [`validateOutput`]{@link module:transactions.validateOutput}.\n *\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:outputs.TransactionOutput[]} outputs - outputs to validate\n * @param {string|number|BigNumber} inputsTotalSats - (optional) the total input amount in Satoshis\n * @returns {string} empty if valid or corresponding validation message if not\n * \n */\n\n\nfunction validateOutputs(network, outputs, inputsTotalSats) {\n  if (!outputs || outputs.length === 0) {\n    return \"At least one output is required.\";\n  }\n\n  for (var outputIndex = 0; outputIndex < outputs.length; outputIndex++) {\n    var output = outputs[outputIndex];\n    var error = validateOutput(network, output, inputsTotalSats);\n\n    if (error) {\n      return error;\n    }\n  }\n\n  return \"\";\n}\n/**\n * Validate the given transaction output.\n *\n * - Validates the presence and value of `address`.\n * \n * - Validates the presence and value of `amountSats`.  If `inputsTotalSats`\n *   is also passed, this will be taken into account when validating the\n *   amount.\n *\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:outputs.TransactionOutput} output - output to validate\n * @param {string|number|BigNumber} inputsTotalSats - (optional) the total input amount in Satoshis\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateOutput} from \"unchained-bitcoin\";\n * console.log(validateOutput(MAINNET, {amountSats: 100000, address: \"2...\"})); // \"...address is invalid...\"\n * console.log(validateOutput(MAINNET, {amountSats: 100000, address: \"3...\"})); // \"\"\n * console.log(validateOutput(MAINNET, {amountSats: 100000, address: \"3...\"}, 10000)); // \"Amount is too large.\"\n */\n\n\nfunction validateOutput(network, output, inputsTotalSats) {\n  if (output.amountSats !== 0 && !output.amountSats) {\n    return \"Does not have an 'amountSats' property.\";\n  }\n\n  var error = validateOutputAmount(output.amountSats, inputsTotalSats);\n\n  if (error) {\n    return error;\n  }\n\n  if (!output.address) {\n    return \"Does not have an 'address' property.\";\n  }\n\n  error = (0, _addresses.validateAddress)(output.address, network);\n\n  if (error) {\n    return \"Has an invalid 'address' property: \".concat(error, \".\");\n  }\n\n  return '';\n}\n/**\n * Lowest acceptable output amount in Satoshis.\n * \n * @constant\n * @type {BigNumber}\n * @default 546 Satoshis\n * \n */\n\n\nvar DUST_LIMIT_SATS = (0, _bignumber[\"default\"])(546);\n/**\n * Validate the given output amount (in Satoshis).\n * \n * - Must be a parseable as a number.\n *\n * - Cannot be negative (zero is OK).\n *\n * - Cannot be smaller than the limit set by `DUST_LIMIT_SATS`.\n * \n * - Cannot exceed the total input amount (this check is only run if `inputsTotalSats` is passed.\n * \n * @param {string|number|BigNumber} amountSats - output amount in Satoshis\n * @param {string|number|BigNumber} inputsTotalSats - (optional) total input amount in Satoshis\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateOutputAmount} from \"unchained-bitcoin\";\n * console.log(validateOutputAmount(-100, 1000000) // \"Output amount must be positive.\"\n * console.log(validateOutputAmount(0, 1000000) // \"Output amount must be positive.\"\n * console.log(validateOutputAmount(10, 1000000) // \"Output amount is too small.\"\n * console.log(validateOutputAmount(1000000, 100000) // \"Output amount is too large.\"\n * console.log(validateOutputAmount(100000, 1000000) // \"\"\n */\n\nfunction validateOutputAmount(amountSats, inputsTotalSats) {\n  var a, its;\n\n  try {\n    a = (0, _bignumber[\"default\"])(amountSats);\n  } catch (e) {\n    return \"Invalid output amount.\";\n  }\n\n  if (!a.isFinite()) {\n    return \"Invalid output amount.\";\n  }\n\n  if (a.isLessThanOrEqualTo(_utils.ZERO)) {\n    return \"Output amount must be positive.\";\n  }\n\n  if (a.isLessThanOrEqualTo(DUST_LIMIT_SATS)) {\n    return \"Output amount is too small.\";\n  }\n\n  if (inputsTotalSats !== undefined) {\n    try {\n      its = (0, _bignumber[\"default\"])(inputsTotalSats);\n    } catch (e) {\n      return \"Invalid total input amount.\";\n    }\n\n    if (!its.isFinite()) {\n      return \"Invalid total input amount.\";\n    }\n\n    if (its.isLessThanOrEqualTo(_utils.ZERO)) {\n      return \"Total input amount must be positive.\";\n    }\n\n    if (a.isGreaterThan(its)) {\n      return \"Output amount is too large.\";\n    }\n  }\n\n  return '';\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hardenedBIP32Index = hardenedBIP32Index;\nexports.bip32PathToSequence = bip32PathToSequence;\nexports.bip32SequenceToPath = bip32SequenceToPath;\nexports.validateBIP32Path = validateBIP32Path;\nexports.multisigBIP32Root = multisigBIP32Root;\nexports.multisigBIP32Path = multisigBIP32Path;\n\nrequire(\"core-js/modules/es6.number.constructor\");\n\nrequire(\"core-js/modules/es6.number.is-nan\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nvar _utils = require(\"./utils\");\n\nvar _networks = require(\"./networks\");\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n/**\n * This module contains various utility functions for converting and\n * validating BIP32 derivation paths.\n * \n * @module paths\n */\n\n\nvar bip32 = require('bip32');\n\nvar HARDENING_OFFSET = Math.pow(2, 31);\nvar BIP32_PATH_REGEX = /^(m\\/)?(\\d+'?\\/)*\\d+'?$/;\nvar BIP32_HARDENED_PATH_REGEX = /^(m\\/)?(\\d+'\\/)*\\d+'$/;\nvar BIP32_UNHARDENED_PATH_REGEX = /^(m\\/)?(\\d+\\/)*\\d+$/;\nvar MAX_BIP32_HARDENED_NODE_INDEX = Math.pow(2, 31) - 1;\nvar MAX_BIP32_NODE_INDEX = Math.pow(2, 32) - 1;\n/**\n * Return the hardened version of the given BIP32 index.\n *\n * Hardening is equivalent to adding 2^31.\n * \n * @param {string|number} index - BIP32 index\n * @returns {number} the hardened index\n * @example\n * import {hardenedBIP32Index} from \"unchained-bitcoin\";\n * console.log(hardenedBIP32Index(44); // 2147483692\n */\n\nfunction hardenedBIP32Index(index) {\n  return parseInt(index) + HARDENING_OFFSET;\n}\n/**\n * Convert BIP32 derivation path to an array of integer values\n * representing the corresponding derivation indices.\n *\n * Hardened path segments will have the [hardening offset]{@link module:paths.HARDENING_OFFSET} added to the index.\n * \n * @param {string} pathString - BIP32 derivation path string\n * @returns {number[]} the derivation indices\n * @example\n * import {bip32PathToSequence} from \"unchained-bitcoin\";\n * console.log(bip32PathToSequence(\"m/45'/1/99\")); // [2147483693, 1, 99]\n */\n\n\nfunction bip32PathToSequence(pathString) {\n  var pathSegments = pathString.split(\"/\").splice(1);\n  return pathSegments.map(function (pathSegment) {\n    if (pathSegment.substr(-1) === \"'\") {\n      return parseInt(pathSegment.slice(0, -1), 10) + HARDENING_OFFSET;\n    } else {\n      return parseInt(pathSegment, 10);\n    }\n  });\n}\n/**\n * Convert a sequence of derivation indices into the corresponding\n * BIP32 derivation path.\n *\n * Indices above the [hardening offset]{@link * module:paths.HARDENING_OFFSET} will be represented wiith hardened * path segments (using a trailing single-quote).\n * \n * @param {number[]} sequence - the derivation indices\n * @returns {string} BIP32 derivation path\n * @example\n * import {bip32SequenceToPath} from \"unchained-bitcoin\";\n * console.log(bip32SequenceToPath([2147483693, 1, 99])); // m/45'/1/99\n */\n\n\nfunction bip32SequenceToPath(sequence) {\n  return \"m/\" + sequence.map(function (index) {\n    if (index >= HARDENING_OFFSET) {\n      return \"\".concat(index - HARDENING_OFFSET, \"'\");\n    } else {\n      return index.toString();\n    }\n  }).join('/');\n}\n/**\n * Validate a given BIP32 derivation path string.\n *\n * - Path segments are validated numerically as well as statically\n *   (the value of 2^33 is an invalid path segment).\n * \n * - The `mode` option can be pass to validate fully `hardened` or\n *   `unhardened` paths.\n * \n * @param {string} pathString - BIP32 derivation path string\n * @param {Object} [options] - additional options\n * @param {string} [options.mode] - \"hardened\" or \"unhardened\"\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateBIP32Path} from \"unchained-bitcoin\";\n * console.log(validateBIP32Path(\"\")); // \"BIP32 path cannot be blank.\"\n * console.log(validateBIP32Path(\"foo\")); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path(\"//45\")); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path(\"/45/\")); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path(\"/45''\")); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path('/45\"')); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path(\"/-45\")); // \"BIP32 path is invalid.\"\n * console.log(validateBIP32Path(\"/8589934592\")); // \"BIP32 index is too high.\"\n * console.log(validateBIP32Path(\"/45\")); // \"\"\n * console.log(validateBIP32Path(\"/45/0'\")); // \"\"\n * console.log(validateBIP32Path(\"/45/0'\", {mode: \"hardened\")); // \"BIP32 path must be fully-hardened.\"\n * console.log(validateBIP32Path(\"/45'/0'\", {mode: \"hardened\")); // \"\"\n * console.log(validateBIP32Path(\"/0'/0\", {mode: \"unhardened\")); // \"BIP32 path cannot include hardened segments.\"\n * console.log(validateBIP32Path(\"/0/0\", {mode: \"unhardened\")); // \"\"\n */\n\n\nfunction validateBIP32Path(pathString, options) {\n  if (pathString === null || pathString === undefined || pathString === '') {\n    return \"BIP32 path cannot be blank.\";\n  }\n\n  if (!pathString.match(BIP32_PATH_REGEX)) {\n    return \"BIP32 path is invalid.\";\n  }\n\n  if (options && options.mode === 'hardened') {\n    if (!pathString.match(BIP32_HARDENED_PATH_REGEX)) {\n      return \"BIP32 path must be fully-hardened.\";\n    }\n  }\n\n  if (options && options.mode === 'unhardened') {\n    if (!pathString.match(BIP32_UNHARDENED_PATH_REGEX)) {\n      return \"BIP32 path cannot include hardened segments.\";\n    }\n  }\n\n  var segmentStrings = pathString.toLowerCase().split('/');\n  return validateBIP32PathSegments(segmentStrings.slice(1));\n}\n\nfunction validateBIP32PathSegments(segmentStrings) {\n  for (var i = 0; i < segmentStrings.length; i++) {\n    var segmentString = segmentStrings[i];\n    var error = validateBIP32PathSegment(segmentString);\n\n    if (error !== '') {\n      return error;\n    }\n  }\n\n  return '';\n}\n\nfunction validateBIP32PathSegment(segmentString) {\n  if (segmentString === null || segmentString === undefined || segmentString === '') {\n    return \"BIP32 path segment cannot be blank.\";\n  }\n\n  var numberString, hardened;\n\n  if (segmentString.substr(segmentString.length - 1) === \"'\") {\n    numberString = segmentString.substr(0, segmentString.length - 1);\n    hardened = true;\n  } else {\n    numberString = segmentString;\n    hardened = false;\n  } // We should never actually wind up throwing this error b/c of an\n  // earlier check against BIP32_PATH_REGEX.\n\n\n  var numberError = \"Invalid BIP32 path segment.\";\n  var number;\n\n  try {\n    number = parseInt(numberString, 10);\n  } catch (parseError) {\n    // shouldn't reach here b/c we already applied a regex check\n    return numberError;\n  }\n\n  if (Number.isNaN(number) || number.toString().length !== numberString.length) {\n    return numberError;\n  }\n\n  if (number < 0) {\n    return numberError;\n  }\n\n  if (number > (hardened ? MAX_BIP32_HARDENED_NODE_INDEX : MAX_BIP32_NODE_INDEX)) {\n    return \"BIP32 index is too high.\";\n  }\n\n  return '';\n}\n/**\n * Return the default BIP32 root derivation path for the given\n * `addressType` and `network`.\n *\n * - Mainnet:\n *   - P2SH: m/45'/0'/0'\n *   - P2SH-P2WSH: m/48'/0'/0'/1'\n *   - P2WSH: m/48'/0'/0'/2'\n * - Testnet:\n *   - P2SH: m/45'/1'/0'\n *   - P2SH-P2WSH: m/48'/1'/0'/1'\n *   - P2WSH: m/48'/1'/0'/2'\n * \n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - address type\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} derivation path\n * @example\n * import {multisigBIP32Root} from \"unchained-bitcoin\";\n * console.log(multisigBIP32Root(P2SH, MAINNET)); // m/45'/0'/0'\n * console.log(multisigBIP32Root(P2SH_P2WSH, TESTNET); // m/48'/1'/0'/1'\n */\n\n\nfunction multisigBIP32Root(addressType, network) {\n  var coinPath = network === _networks.MAINNET ? \"0'\" : \"1'\";\n\n  switch (addressType) {\n    case _p2sh.P2SH:\n      return \"m/45'/\".concat(coinPath, \"/0'\");\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return \"m/48'/\".concat(coinPath, \"/0'/1'\");\n\n    case _p2wsh.P2WSH:\n      return \"m/48'/\".concat(coinPath, \"/0'/2'\");\n\n    default:\n      return null;\n  }\n}\n/**\n * Returns a BIP32 path at the given `path` under the default BIP32\n * path for the given `addressType` and `network`.\n * \n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} addressType - type from which to create the child path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {number|string} path - the relative path\n * @returns {string} derivation path\n * @example\n * import {multisigBIP32Path} from \"unchained-bitcoin\";\n * console.log(multisigBIP32Path(P2SH, MAINNET, 0); // m/45'/0'/0'/0\n * console.log(multisigBIP32Path(P2SH_P2WSH, TESTNET, \"3'/4\"); // m/48'/1'/0'/1'/3'/4\"\n */\n\n\nfunction multisigBIP32Path(addressType, network, index) {\n  var root = multisigBIP32Root(addressType, network);\n\n  if (root) {\n    return root + \"/\".concat(index || \"0\");\n  }\n\n  return null;\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendedPublicKeyConvert = extendedPublicKeyConvert;\nexports.convertAndValidateExtendedPublicKey = convertAndValidateExtendedPublicKey;\nexports.validateExtendedPublicKey = validateExtendedPublicKey;\nexports.validatePublicKey = validatePublicKey;\nexports.compressPublicKey = compressPublicKey;\nexports.deriveChildPublicKey = deriveChildPublicKey;\nexports.deriveChildExtendedPublicKey = deriveChildExtendedPublicKey;\nexports.extendedPublicKeyVersions = void 0;\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nvar _bitcoinjsLib = require(\"bitcoinjs-lib\");\n\nvar _utils = require(\"./utils\");\n\nvar _networks = require(\"./networks\");\n/**\n * This module provides functions for validating & deriving public\n * keys and extended public keys.\n *\n * @module keys\n */\n\n\nvar bip32 = require('bip32');\n\nvar bs58check = require('bs58check');\n\nvar extendedPublicKeyVersions = {\n  xpub: \"0488b21e\",\n  ypub: \"049d7cb2\",\n  zpub: \"04b2430c\",\n  Ypub: \"0295b43f\",\n  Zpub: \"02aa7ed3\",\n  tpub: \"043587cf\",\n  upub: \"044a5262\",\n  vpub: \"045f1cf6\",\n  Upub: \"024289ef\",\n  Vpub: \"02575483\"\n};\nexports.extendedPublicKeyVersions = extendedPublicKeyVersions;\n\nfunction validatePrefix(prefix, prefixType) {\n  if (!~Object.keys(extendedPublicKeyVersions).indexOf(prefix)) {\n    return \"Invalid \".concat(prefixType, \" version for extended public key conversion\");\n  }\n\n  return null;\n}\n/**\n * Convert an extended public key between formats\n * @param {string} extendedPublicKey - the extended public key to convert\n * @param {string} targetPrefix - the target format to convert to\n * @example\n * const tpub = extendedPublicKeyConvert(\"xpub6CCH...\", \"tpub\");\n * if (tpub.error) {\n *   // handle\n * } else if (tpub.message === '') {\n *   // no conversion was needed\n * } else {\n *   console.log(tpub.extendedPublicKey, tpub.message)\n *   // tpubDCZv...\n *   // Your extended public key has been converted from xpub to tpub\n * }\n * @returns {module:keys.ConvertedExtendedPublicKey}\n */\n\n\nfunction extendedPublicKeyConvert(extendedPublicKey, targetPrefix) {\n  var targetError = validatePrefix(targetPrefix, 'target');\n  if (targetError !== null) return {\n    extendedPublicKey: extendedPublicKey,\n    error: targetError\n  };\n  var sourcePrefix = extendedPublicKey.slice(0, 4);\n  var sourceError = validatePrefix(sourcePrefix, 'source');\n  if (sourceError !== null) return {\n    extendedPublicKey: extendedPublicKey,\n    error: sourceError\n  };\n\n  try {\n    var decodedExtendedPublicKey = bs58check.decode(extendedPublicKey.trim());\n    var extendedPublicKeyNoPrefix = decodedExtendedPublicKey.slice(4);\n    var extendedPublicKeyNewPrefix = Buffer.concat([Buffer.from(extendedPublicKeyVersions[targetPrefix], 'hex'), extendedPublicKeyNoPrefix]);\n    return {\n      extendedPublicKey: bs58check.encode(extendedPublicKeyNewPrefix),\n      message: \"Your extended public key has been converted from \".concat(sourcePrefix, \" to \").concat(targetPrefix),\n      error: \"\"\n    };\n  } catch (err) {\n    return {\n      extendedPublicKey: extendedPublicKey,\n      error: \"Unable to convert extended public key: \" + err.message\n    };\n  }\n}\n/**\n * Perform conversion to xpub or tpub based on the bitcoin network\n * additional validation is performed on the converted extended public key\n * @param {string} extendedPublicKey - the extended public key to convert\n * @param {string} network - the bitcoin network\n * @example\n * const xpub = convertAndValidateExtendedPublicKey('tpubDCZv...', MAINNET)\n * if (xpub.error) {\n *   // handle\n * } else if (xpub.message === '') {\n *   // no conversion was needed\n * } else {\n *   console.log(xpub.extendedPublicKey, xpub.message)\n *   // tpubDCZv...\n *   // Your extended public key has been converted from tpub to xpub\n * }\n * @returns {module:keys.ConvertedExtendedPublicKey}\n */\n\n\nfunction convertAndValidateExtendedPublicKey(extendedPublicKey, network) {\n  var targetPrefix = network === _networks.TESTNET ? 'tpub' : 'xpub';\n  var preliminaryErrors = preExtendedPublicKeyValidation(extendedPublicKey, network);\n\n  if (preliminaryErrors !== '') {\n    return {\n      extendedPublicKey: extendedPublicKey,\n      error: preliminaryErrors\n    };\n  } else {\n    var networkError = extendedPublicKeyNetworkValidateion(extendedPublicKey, network);\n\n    if (networkError === '') {\n      var extendedPublicKeyValidation = validateExtendedPublicKey(extendedPublicKey, network);\n      if (extendedPublicKeyValidation === '') return {\n        extendedPublicKey: extendedPublicKey,\n        message: \"\",\n        error: \"\"\n      }; // valid for network, use it\n      // else convert and validate below\n    }\n  }\n\n  var convertedExtendedPublicKey = extendedPublicKeyConvert(extendedPublicKey, targetPrefix);\n\n  if (convertedExtendedPublicKey.extendedPublicKey !== extendedPublicKey) {\n    // a conversion happended\n    var _extendedPublicKeyValidation = validateExtendedPublicKey(convertedExtendedPublicKey.extendedPublicKey, network);\n\n    if (_extendedPublicKeyValidation === '') return convertedExtendedPublicKey;else return {\n      extendedPublicKey: extendedPublicKey,\n      error: _extendedPublicKeyValidation\n    };\n  } else return convertedExtendedPublicKey;\n}\n\nfunction extendedPublicKeyNetworkValidateion(extendedPublicKey, network) {\n  var requiredPrefix = \"'xpub'\";\n\n  if (network === _networks.TESTNET) {\n    requiredPrefix += \" or 'tpub'\";\n  }\n\n  var notXpubError = \"Extended public key must begin with \".concat(requiredPrefix, \".\");\n  var prefix = extendedPublicKey.slice(0, 4);\n\n  if (!(prefix === 'xpub' || network === _networks.TESTNET && prefix === 'tpub')) {\n    return notXpubError;\n  }\n\n  return '';\n}\n\nfunction preExtendedPublicKeyValidation(extendedPublicKey, network) {\n  if (extendedPublicKey === null || extendedPublicKey === undefined || extendedPublicKey === '') {\n    return \"Extended public key cannot be blank.\";\n  }\n\n  if (extendedPublicKey.length < 111) {\n    return \"Extended public key length is too short.\";\n  }\n\n  return '';\n}\n/**\n * Validate the given extended public key.\n *\n * - Must start with the appropriate (network-dependent) prefix.\n * - Must be a valid BIP32 extended public key\n *\n * @param {string} xpubString - base58 encoded extended public key (`xpub...`)\n * @param {module:networks.NETWORKS} network  - bitcoin network\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateExtendedPublicKey} from \"unchained-bitcoin\";\n * console.log(validateExtendedPublicKey(\"\", MAINNET)); // \"Extended public key cannot be blank.\"\n * console.log(validateExtendedPublicKey(\"foo\", MAINNET)); // \"Extended public key must begin with ...\"\n * console.log(validateExtendedPublicKey(\"xpub123\", MAINNET)); // \"Extended public key is too short.\"\n * console.log(validateExtendedPublicKey(\"tpub123...\", MAINNET)); // \"Extended public key must begin with ....\"\n * console.log(validateExtendedPublicKey(\"xpub123%%!~~...\", MAINNET)); // \"Invalid extended public key\"\n * console.log(validateExtendedPublicKey(\"xpub123...\", MAINNET)); // \"\"\n */\n\n\nfunction validateExtendedPublicKey(xpubString, network) {\n  if (xpubString === null || xpubString === undefined || xpubString === '') {\n    return \"Extended public key cannot be blank.\";\n  }\n\n  var requiredPrefix = network === _networks.TESTNET ? \"tpub\" : \"xpub\";\n  var notXpubError = \"Extended public key must begin with '\".concat(requiredPrefix, \"'.\");\n\n  if (xpubString.length < 4) {\n    return notXpubError;\n  }\n\n  var prefix = xpubString.slice(0, 4);\n\n  if (prefix !== requiredPrefix) {\n    return notXpubError;\n  }\n\n  if (xpubString.length < 111) {\n    return \"Extended public key is too short.\";\n  }\n\n  try {\n    bip32.fromBase58(xpubString, (0, _networks.networkData)(network));\n  } catch (e) {\n    return \"Invalid extended public key.\";\n  }\n\n  return '';\n}\n/**\n * Validate the given public key.\n *\n * - Must be valid hex.\n * - Must be a valid BIP32 public key.\n *\n * @param {string} pubkeyHex - (compressed) public key in hex\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validatePublicKey} from \"unchained-bitcoin\";\n * console.log(validatePublicKey(\"\")); // \"Public key cannot be blank.\"\n * console.log(validatePublicKey(\"zzzz\")); // \"Invalid hex...\"\n * console.log(validatePublicKey(\"deadbeef\")); // \"Invalid public key.\"\n * console.log(validatePublicKey(\"03b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee\")); // \"\"\n */\n\n\nfunction validatePublicKey(pubkeyHex) {\n  if (pubkeyHex === null || pubkeyHex === undefined || pubkeyHex === '') {\n    return \"Public key cannot be blank.\";\n  }\n\n  var error = (0, _utils.validateHex)(pubkeyHex);\n\n  if (error !== '') {\n    return error;\n  }\n\n  try {\n    _bitcoinjsLib.ECPair.fromPublicKey(Buffer.from(pubkeyHex, 'hex'));\n  } catch (e) {\n    return \"Invalid public key.\";\n  }\n\n  return '';\n}\n/**\n * Compresses the given public key.\n *\n * @param {string} publicKey - (uncompressed) public key in hex\n * @returns {string} compressed public key in hex\n * @example\n * import {compressPublicKey} from \"unchained-bitcoin\";\n * console.log(compressPublicKey(\"04b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee6e43c09d025c2ad322382347ec0f69b4e78d8e23c8ff9aa0dd0cb93665ae83d5\"));\n * // \"03b32dc780fba98db25b4b72cf2b69da228f5e10ca6aa8f46eabe7f9fe22c994ee\"\n */\n\n\nfunction compressPublicKey(publicKey) {\n  // validate Public Key Length\n  // validate Public Key Structure\n  var pubkeyBuffer = Buffer.from(publicKey, 'hex'); // eslint-disable-next-line no-bitwise\n\n  var prefix = (pubkeyBuffer[64] & 1) !== 0 ? 0x03 : 0x02;\n  var prefixBuffer = Buffer.alloc(1);\n  prefixBuffer[0] = prefix;\n  return Buffer.concat([prefixBuffer, pubkeyBuffer.slice(1, 1 + 32)]).toString('hex');\n}\n/**\n * Return the public key at the given BIP32 path below the given\n * extended public key.\n *\n * @param {string} extendedPublicKey - base58 encoded extended public key (`xpub...`)\n * @param {string} bip32Path - BIP32 derivation path string (with or without initial `m/`)\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} (compressed) child public key in hex\n * @example\n * import {deriveChildPublicKey, MAINNET} from \"unchained-bitcoin\";\n * const xpub = \"xpub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\";\n * console.log(deriveChildPublicKey(xpub, \"m/0/0\", MAINNET));\n * // \"021a0b6eb37bd9d2767a364601e41635a11c1dbbbb601efab8406281e210336ace\"\n * console.log(deriveChildPublicKey(xpub, \"0/0\", MAINNET)); // w/o leading `m/`\n * // \"021a0b6eb37bd9d2767a364601e41635a11c1dbbbb601efab8406281e210336ace\"\n *\n */\n\n\nfunction deriveChildPublicKey(extendedPublicKey, bip32Path, network) {\n  if (bip32Path.slice(0, 2) === 'm/') {\n    return deriveChildPublicKey(extendedPublicKey, bip32Path.slice(2), network);\n  }\n\n  var node = bip32.fromBase58(extendedPublicKey, (0, _networks.networkData)(network));\n  var child = node.derivePath(bip32Path);\n  return (0, _utils.toHexString)(child.publicKey);\n}\n/**\n * Return the extended public key at the given BIP32 path below the\n * given extended public key.\n *\n * @param {string} extendedPublicKey - base58 encoded extended public key (`xpub...`)\n * @param {string} bip32Path - BIP32 derivation path string (with or without initial `m/`)\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} child extended public key in base58\n * @example\n * import {deriveChildExtendedPublicKey, MAINNET} from \"unchained-bitcoin\";\n * const xpub = \"xpub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\";\n * console.log(deriveChildExtendedPublicKey(xpub, \"m/0/0\", MAINNET));\n * // \"xpub6GYTTMaaN8bSEhicdKq7ji9H7B2SL4un33obThv9aekop4J7L7B3snYMnJUuwXJiUmsbSVSyZydbqLC97JMWnj3R4MHz6JNunMJhjEBKovS\"\n * console.log(deriveChildExtendedPublicKey(xpub, \"0/0\", MAINNET)); // without initial `m/`\n * // \"xpub6GYTTMaaN8bSEhicdKq7ji9H7B2SL4un33obThv9aekop4J7L7B3snYMnJUuwXJiUmsbSVSyZydbqLC97JMWnj3R4MHz6JNunMJhjEBKovS\"\n\n */\n\n\nfunction deriveChildExtendedPublicKey(extendedPublicKey, bip32Path, network) {\n  if (bip32Path.slice(0, 2) === 'm/') {\n    return deriveChildExtendedPublicKey(extendedPublicKey, bip32Path.slice(2), network);\n  }\n\n  var node = bip32.fromBase58(extendedPublicKey, (0, _networks.networkData)(network));\n  var child = node.derivePath(bip32Path);\n  return child.toBase58();\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateFeeRate = validateFeeRate;\nexports.validateFee = validateFee;\nexports.estimateMultisigTransactionFeeRate = estimateMultisigTransactionFeeRate;\nexports.estimateMultisigTransactionFee = estimateMultisigTransactionFee;\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/** \n * This module provides functions for calculating & validating\n * transaction fees.\n * \n * @module fees\n */\n\n/**\n * Maxmium acceptable transaction fee rate in Satoshis/vbyte.\n *\n * @constant\n * @type {BigNumber}\n * @default 1000 Satoshis/vbyte\n * \n */\n\n\nvar MAX_FEE_RATE_SATS_PER_VBYTE = (0, _bignumber[\"default\"])(1000); // 1000 Sats/vbyte\n\n/**\n * Maxmium acceptable transaction fee in Satoshis.\n *\n * @constant\n * @type {BigNumber}\n * @default 2500000 Satoshis (=0.025 BTC)\n */\n\nvar MAX_FEE_SATS = (0, _bignumber[\"default\"])(2500000); // ~ 0.025 BTC ~ $250 if 1 BTC = $10k\n\n/**\n * Validate the given transaction fee rate (in Satoshis/vbyte).\n *\n * - Must be a parseable as a number.\n *\n * - Cannot be negative (zero is OK).\n * \n * - Cannot be greater than the limit set by\n *   `MAX_FEE_RATE_SATS_PER_VBYTE`.\n * \n * @param {string|number|BigNumber} feeRateSatsPerVbyte - the fee rate in Satoshis/vbyte\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateFeeRate} from \"unchained-bitcoin\";\n * console.log(validateFeeRate(-1)); // \"Fee rate must be positive.\"\n * console.log(validateFeeRate(10000)); // \"Fee rate is too high.\"\n * console.log(validateFeeRate(250)); // \"\"\n */\n\nfunction validateFeeRate(feeRateSatsPerVbyte) {\n  var fr;\n\n  try {\n    fr = (0, _bignumber[\"default\"])(feeRateSatsPerVbyte);\n  } catch (e) {\n    return \"Invalid fee rate.\";\n  }\n\n  if (!fr.isFinite()) {\n    return \"Invalid fee rate.\";\n  }\n\n  if (fr.isLessThan(_utils.ZERO)) {\n    return \"Fee rate cannot be negative.\";\n  }\n\n  if (fr.isGreaterThan(MAX_FEE_RATE_SATS_PER_VBYTE)) {\n    return \"Fee rate is too high.\";\n  }\n\n  return '';\n}\n/**\n * Validate the given transaction fee (in Satoshis).\n *\n * - Must be a parseable as a number.\n *\n * - Cannot be negative (zero is OK).\n *\n * - Cannot exceed the total input amount.\n *\n * - Cannot be higher than the limit set by `MAX_FEE_SATS`.\n * \n * @param {string|number|BigNumber} feeSats - fee in Satoshis\n * @param {string|number|BigNumber} inputsTotalSats - total input amount in Satoshis\n * @returns {string} empty if valid or corresponding validation message if not\n * @example\n * import {validateFee} from \"unchained-bitcoin\";\n * console.log(validateFee(3000000, 10000000)) // \"Fee is too high.\"\n * console.log(validateFee(30000, 20000)) // \"Fee is too high.\"\n * console.log(validateFee(-30000)) // \"Fee cannot be negative.\"\n * console.log(validateFee(30000, 10000000)) // \"\"\n */\n\n\nfunction validateFee(feeSats, inputsTotalSats) {\n  var fs, its;\n\n  try {\n    fs = (0, _bignumber[\"default\"])(feeSats);\n  } catch (e) {\n    return \"Invalid fee.\";\n  }\n\n  if (!fs.isFinite()) {\n    return \"Invalid fee.\";\n  }\n\n  try {\n    its = (0, _bignumber[\"default\"])(inputsTotalSats);\n  } catch (e) {\n    return \"Invalid total input amount.\";\n  }\n\n  if (!its.isFinite()) {\n    return \"Invalid total input amount.\";\n  }\n\n  if (fs.isLessThan(_utils.ZERO)) {\n    return \"Fee cannot be negative.\";\n  }\n\n  if (its.isLessThanOrEqualTo(_utils.ZERO)) {\n    return \"Total input amount must be positive.\";\n  }\n\n  if (fs.isGreaterThan(its)) {\n    return \"Fee is too high.\";\n  }\n\n  if (fs.isGreaterThan(MAX_FEE_SATS)) {\n    return \"Fee is too high.\";\n  }\n\n  return '';\n}\n/**\n * Estimate transaction fee rate based on actual fee and address type, number of inputs and number of outputs.\n * \n * @param {Object} config - configuration for the calculation\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} config.addressType - address type used for estimation\n * @param {number} config.numInputs - number of inputs used in calculation\n * @param {number} config.numOutputs - number of outputs used in calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @param {BigNumber} config.feesInSatoshis - total transaction fee in satoshis\n * @example \n * import {estimateMultisigP2WSHTransactionFeeRate} from \"unchained-bitcoin\";\n * // get the fee rate a P2WSH multisig transaction with 2 inputs and 3 outputs with a known fee of 7060\n * const feerate = estimateMultisigTransactionFeeRate({\n *   addressType: P2WSH, \n *   numInputs: 2, \n *   numOutputs: 3, \n *   m: 2,\n *   n: 3,\n *   feesInSatoshis: 7060\n * });\n * \n * \n * @returns {string} estimated fee rate\n */\n\n\nfunction estimateMultisigTransactionFeeRate(config) {\n  return (0, _bignumber[\"default\"])(config.feesInSatoshis).dividedBy(estimateMultisigTransactionVSize(config));\n}\n/**\n * Estimate transaction fee based on fee rate, address type, number of inputs and outputs.\n * @param {Object} config - configuration for the calculation\n * @param {module:multisig.MULTISIG_ADDRESS_TYPES} config.addressType - address type used for estimation\n * @param {number} config.numInputs - number of inputs used in calculation\n * @param {number} config.numOutputs - number of outputs used in calculation\n * @param {number} config.m - number of required signers for the quorum\n * @param {number} config.n - number of total signers for the quorum\n * @param {string} config.feesPerByteInSatoshis - satoshis per byte fee rate\n * @example\n * // get fee for P2SH multisig transaction with 2 inputs and 3 outputs at 10 satoshis per byte\n * import {estimateMultisigP2WSHTransactionFee} from \"unchained-bitcoin\";\n * const fee = estimateMultisigTransactionFee({\n *   addressType: P2SH, \n *   numInputs: 2, \n *   numOutputs: 3, \n *   m: 2,\n *   n: 3,\n *   feesPerByteInSatoshis: 10\n * });\n * @returns {number} estimated transaction fee\n */\n\n\nfunction estimateMultisigTransactionFee(config) {\n  return (0, _bignumber[\"default\"])(config.feesPerByteInSatoshis).multipliedBy(estimateMultisigTransactionVSize(config));\n}\n\nfunction estimateMultisigTransactionVSize(config) {\n  switch (config.addressType) {\n    case _p2sh.P2SH:\n      return (0, _p2sh.estimateMultisigP2SHTransactionVSize)(config);\n\n    case _p2sh_p2wsh.P2SH_P2WSH:\n      return (0, _p2sh_p2wsh.estimateMultisigP2SH_P2WSHTransactionVSize)(config);\n\n    case _p2wsh.P2WSH:\n      return (0, _p2wsh.estimateMultisigP2WSHTransactionVSize)(config);\n\n    default:\n      return null;\n  }\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unsignedMultisigTransaction = unsignedMultisigTransaction;\nexports.signedMultisigTransaction = signedMultisigTransaction;\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _networks = require(\"./networks\");\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _multisig = require(\"./multisig\");\n\nvar _signatures = require(\"./signatures\");\n\nvar _inputs = require(\"./inputs\");\n\nvar _outputs = require(\"./outputs\");\n\nvar _script = require(\"./script\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar bitcoin = require('bitcoinjs-lib');\n/**\n * Create an unsigned bitcoin transaction based on the network, inputs\n * and outputs.\n *\n * Returns a [`Transaction`]{@link https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/types/transaction.d.ts|Transaction} object from bitcoinjs-lib.\n *\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:inputs.MultisigTransactionInput[]} inputs - transaction inputs\n * @param {module:outputs.TransactionOutput[]} outputs - transaction outputs\n * @returns {Transaction} an unsigned bitcoinjs-lib Transaction object\n * @example\n * import {\n *   generateMultisigFromPublicKeys, TESTNET, P2SH,\n *   unsignedMultisigTransaction,\n * } from \"unchained-bitcoin\";\n * const multisig = generateMultisigFromPublicKeys(TESTNET, P2SH, 2, \"03a...\", \"03b...\");\n * const inputs = [\n *   {\n *     txid: \"ae...\",\n *     index: 0,\n *     multisig,\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     address: \"2N...\",\n *     amountSats: 90000,\n *   },\n *   // other outputs...\n * ];\n * const unsignedTransaction = unsignedMultisigTransaction(TESTNET, inputs, outputs);\n * \n */\n\n\nfunction unsignedMultisigTransaction(network, inputs, outputs) {\n  var error = (0, _inputs.validateMultisigInputs)(inputs);\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  error = (0, _outputs.validateOutputs)(network, outputs);\n\n  if (error) {\n    throw new Error(error);\n  }\n\n  var transactionBuilder = new bitcoin.TransactionBuilder();\n  transactionBuilder.setVersion(1); // FIXME this depends on type...\n\n  transactionBuilder.network = (0, _networks.networkData)(network);\n\n  for (var inputIndex = 0; inputIndex < inputs.length; inputIndex += 1) {\n    var input = inputs[inputIndex];\n    transactionBuilder.addInput(input.txid, input.index);\n  }\n\n  for (var outputIndex = 0; outputIndex < outputs.length; outputIndex += 1) {\n    var output = outputs[outputIndex];\n    transactionBuilder.addOutput(output.address, (0, _bignumber[\"default\"])(output.amountSats).toNumber());\n  }\n\n  return transactionBuilder.buildIncomplete();\n}\n/**\n * Create a fully signed multisig transaction based on the unsigned\n * transaction, inputs, and their signatures.\n * \n * @param {module:networks.NETWORKS} network - bitcoin network\n * @param {module:inputs.MultisigTransactionInput[]} inputs - multisig transaction inputs\n * @param {module:inputs.TransactionOutput[]} outputs - transaction outputs\n * @param {Object[]} transactionSignatures - array of transaction signatures, each an array of input signatures (1 per input)\n * @returns {Transaction} a signed {@link https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/types/transaction.d.ts|Transaction} object\n * @example\n * import {\n *   generateMultisigFromPublicKeys, TESTNET, P2SH,\n *   signedMultisigTransaction,\n * } from \"unchained-bitcoin\";\n * const pubkey1 = \"03a...\";\n * const pubkey2 = \"03b...\";\n * const multisig = generateMultisigFromPublicKeys(TESTNET, P2SH, 2, pubkey1, pubkey2);\n * const inputs = [\n *   {\n *     txid: \"ae...\",\n *     index: 0,\n *     multisig,\n *   },\n *   // other inputs...\n * ];\n * const outputs = [\n *   {\n *     address: \"2N...\",\n *     amountSats: 90000,\n *   },\n *   // other outputs...\n * ];\n * const transactionSignatures = [\n *   // Each element is an array of signatures from a given key, one per input.\n *   [\n *     \"301a...\",\n *     // more, 1 per input\n *   ],\n *   [\n *     \"301b...\",\n *     // more, 1 per input\n *   ],\n *   // More transaction signatures if required, based on inputs\n * ];\n * const signedTransaction = signedMultisigTransaction(TESTNET, inputs, outputs, transactionSignatures)\n */\n\n\nfunction signedMultisigTransaction(network, inputs, outputs, transactionSignatures) {\n  var unsignedTransaction = unsignedMultisigTransaction(network, inputs, outputs); // validates inputs & outputs\n\n  if (!transactionSignatures || transactionSignatures.length === 0) {\n    throw new Error(\"At least one transaction signature is required.\");\n  }\n\n  transactionSignatures.forEach(function (transactionSignature, transactionSignatureIndex) {\n    if (transactionSignature.length < inputs.length) {\n      throw new Error(\"Insufficient input signatures for transaction signature \".concat(transactionSignatureIndex + 1, \": require \").concat(inputs.length, \", received \").concat(transactionSignature.length, \".\"));\n    }\n  });\n  var signedTransaction = bitcoin.Transaction.fromHex(unsignedTransaction.toHex()); // FIXME inefficient?\n\n  var _loop = function _loop(inputIndex) {\n    var input = inputs[inputIndex];\n    var inputSignatures = transactionSignatures.map(function (transactionSignature) {\n      return transactionSignature[inputIndex];\n    }).filter(function (inputSignature) {\n      return !!inputSignature;\n    });\n    var requiredSignatures = (0, _multisig.multisigRequiredSigners)(input.multisig);\n\n    if (inputSignatures.length < requiredSignatures) {\n      throw new Error(\"Insufficient signatures for input  \".concat(inputIndex + 1, \": require \").concat(requiredSignatures, \",  received \").concat(inputSignatures.length, \".\"));\n    }\n\n    var inputSignaturesByPublicKey = {};\n    inputSignatures.forEach(function (inputSignature) {\n      var publicKey;\n\n      try {\n        publicKey = (0, _signatures.validateMultisigSignature)(unsignedTransaction, inputIndex, input, inputSignature);\n      } catch (e) {\n        throw new Error(\"Invalid signature for input \".concat(inputIndex + 1, \": \").concat(inputSignature, \" (\").concat(e, \")\"));\n      }\n\n      if (!publicKey) {\n        throw new Error(\"Invalid signature for input \".concat(inputIndex + 1, \": \").concat(inputSignature));\n      }\n\n      if (inputSignaturesByPublicKey[publicKey]) {\n        throw new Error(\"Duplicate signature for input \".concat(inputIndex + 1, \": \").concat(inputSignature));\n      }\n\n      inputSignaturesByPublicKey[publicKey] = inputSignature;\n    }); // Sort the signatures for this input by the index of their\n    // corresponding public key within this input's redeem script.\n\n    var publicKeys = (0, _multisig.multisigPublicKeys)(input.multisig);\n    var sortedSignatures = publicKeys.map(function (publicKey) {\n      return inputSignaturesByPublicKey[publicKey];\n    }).filter(function (signature) {\n      return signature ? (0, _signatures.signatureNoSighashType)(signature) : signature;\n    }); // FIXME why not filter out the empty sigs?\n\n    if ((0, _multisig.multisigAddressType)(input.multisig) === _p2wsh.P2WSH) {\n      var witness = multisigWitnessField(input.multisig, sortedSignatures);\n      signedTransaction.setWitness(inputIndex, witness);\n    } else if ((0, _multisig.multisigAddressType)(input.multisig) === _p2sh_p2wsh.P2SH_P2WSH) {\n      var _witness = multisigWitnessField(input.multisig, sortedSignatures);\n\n      signedTransaction.setWitness(inputIndex, _witness);\n      var scriptSig = (0, _multisig.multisigRedeemScript)(input.multisig);\n      signedTransaction.ins[inputIndex].script = Buffer.from([scriptSig.output.length].concat(_toConsumableArray(scriptSig.output)));\n    } else {\n      var _scriptSig = multisigScriptSig(input.multisig, sortedSignatures);\n\n      signedTransaction.ins[inputIndex].script = _scriptSig.input;\n    }\n  };\n\n  for (var inputIndex = 0; inputIndex < inputs.length; inputIndex++) {\n    _loop(inputIndex);\n  }\n\n  return signedTransaction;\n}\n\nfunction multisigWitnessField(multisig, sortedSignatures) {\n  var witness = [\"\"].concat(sortedSignatures.map(function (s) {\n    return (0, _signatures.signatureNoSighashType)(s) + '01';\n  }));\n  var witnessScript = (0, _multisig.multisigWitnessScript)(multisig);\n  witness.push((0, _script.scriptToHex)(witnessScript));\n  return witness.map(function (wit) {\n    return Buffer.from(wit, 'hex');\n  });\n}\n\nfunction multisigScriptSig(multisig, signersInputSignatures) {\n  var signatureOps = signersInputSignatures.map(function (signature) {\n    return \"\".concat((0, _signatures.signatureNoSighashType)(signature), \"01\");\n  }).join(' '); // 01 => SIGHASH_ALL\n\n  var inputScript = \"OP_0 \".concat(signatureOps);\n  var inputScriptBuffer = bitcoin.script.fromASM(inputScript);\n  var redeemScript = bitcoin.payments.p2ms({\n    network: multisig.network,\n    output: Buffer.from((0, _multisig.multisigRedeemScript)(multisig).output, 'hex'),\n    input: inputScriptBuffer\n  });\n  return (0, _multisig.generateMultisigFromRedeemScript)((0, _multisig.multisigAddressType)(multisig), redeemScript);\n}","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.blockExplorerURL = blockExplorerURL;\nexports.blockExplorerAPIURL = blockExplorerAPIURL;\nexports.blockExplorerTransactionURL = blockExplorerTransactionURL;\nexports.blockExplorerAddressURL = blockExplorerAddressURL;\n\nvar _networks = require(\"./networks\");\n/**\n * This module provides functions for creating URLs for Blockstream's\n * [block explorer]{@link https://blockstream.info}.\n *\n * This module does NOT provide implementations of HTTP requests which\n * fetch data from these URLs.\n * \n * @module block_explorer\n */\n\n\nvar BASE_URL_MAINNET = 'https://blockstream.info';\nvar BASE_URL_TESTNET = 'https://blockstream.info/testnet';\n\nfunction blockExplorerBaseURL(network) {\n  return network === _networks.TESTNET ? BASE_URL_TESTNET : BASE_URL_MAINNET;\n}\n/**\n * Returns the block explorer URL for the given path and network.\n * \n * @param {string} path - the explorer path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} the block explorer url\n * @example\n * import {MAINNET, TESTNET, blockExplorerURL} from \"unchained-bitcoin\";\n * const path = \"/block/00000000000000000011341d69792271766e4683e29b3ea169eacc59bde10a57\";\n * console.log(blockExplorerURL(path, MAINNET)) // https://blockstream.info/block/00000000000000000011341d69792271766e4683e29b3ea169eacc59bde10a57\n * console.log(blockExplorerURL(path, TESTNET)) // https://blockstream.info/block/testnet/00000000000000000011341d69792271766e4683e29b3ea169eacc59bde10a57\n */\n\n\nfunction blockExplorerURL(path, network) {\n  return \"\".concat(blockExplorerBaseURL(network)).concat(path);\n}\n/**\n * Returns the block explorer API URL for the given path and network.\n * \n * @param {string} path - the API path\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} the full block explorer url\n * @example\n * import {MAINNET, TESTNET, blockExplorerAPIURL} from \"unchained-bitcoin\";\n * const path = \"/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\";\n * console.log(blockExplorerAPIURL(path, MAINNET)); // https://blockstream.info/api/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n * console.log(blockExplorerAPIURL(path, TESTNET)); // https://blockstream.info/testnet/api/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n */\n\n\nfunction blockExplorerAPIURL(path, network) {\n  return \"\".concat(blockExplorerBaseURL(network), \"/api\").concat(path);\n}\n/**\n * Return the block explorer URL for the given transaction ID and network.\n * \n * @param {string} txid - the transaction id\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} the full transaction URL\n * @example\n * import {MAINNET, TESTNET, blockExplorerTransactionURL} from \"unchained-bitcoin\";\n * const txid = \"1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\";\n * console.log(blockExplorerTransactionURL(txid, MAINNET)); // https://blockstream.info/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n * console.log(blockExplorerTransactionURL(txid, TESTNET)); // https://blockstream.info/testnet/tx/1814a10fb22e9551a17a94a1e68971e19b4f59eaf1689e0af85b97929b3b9ae0\n */\n\n\nfunction blockExplorerTransactionURL(txid, network) {\n  return blockExplorerURL(\"/tx/\".concat(txid), network);\n}\n/**\n * Return the block explorer URL for the given address and network.\n * \n * @param {string} address - the address\n * @param {module:networks.NETWORKS} network - bitcoin network\n * @returns {string} full URL for address lookup\n * @example\n * import {MAINNET, TESTNET, blockExplorerAddressURL} from \"unchained-bitcoin\";\n * const address = \"39YqNoLULDpbjmeCTdGJ42DQhrQLzRcMdX\";\n * console.log(blockExplorerAddressURL(address, MAINNET)); // https://blockstream.info/address/39YqNoLULDpbjmeCTdGJ42DQhrQLzRcMdX\n * console.log(blockExplorerAddressURL(address, TESTNET)); // https://blockstream.info/testnet/address/39YqNoLULDpbjmeCTdGJ42DQhrQLzRcMdX\n */\n\n\nfunction blockExplorerAddressURL(address, network) {\n  return blockExplorerURL(\"/address/\".concat(address), network);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TEST_FIXTURES = exports.EXTENDED_PUBLIC_KEY_CONVERSIONS = void 0;\n\nrequire(\"core-js/modules/es6.object.define-properties\");\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es6.array.filter\");\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.array.map\");\n\nvar _bignumber = _interopRequireDefault(require(\"bignumber.js\"));\n\nvar _multisig = require(\"./multisig\");\n\nvar _inputs = require(\"./inputs\");\n\nvar _p2sh = require(\"./p2sh\");\n\nvar _p2sh_p2wsh = require(\"./p2sh_p2wsh\");\n\nvar _p2wsh = require(\"./p2wsh\");\n\nvar _networks = require(\"./networks\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar RECEIVING_ADDRESSES = {};\nRECEIVING_ADDRESSES[_networks.MAINNET] = \"3DRVz9YUhoXSMgBngvv2JkNReBHvkeJwLs\";\nRECEIVING_ADDRESSES[_networks.TESTNET] = \"2NE1LH35XT4YrdnEebk5oKMmRpGiYcUvpNR\";\nvar BIP39_PHRASE = ['merge', 'alley', 'lucky', 'axis', 'penalty', 'manage', 'latin', 'gasp', 'virus', 'captain', 'wheel', 'deal', 'chase', 'fragile', 'chapter', 'boss', 'zero', 'dirt', 'stadium', 'tooth', 'physical', 'valve', 'kid', 'plunge'];\nvar NODES = {\n  \"m/45'/0'/0'\": {\n    xpub: \"xpub6CCHViYn5VzKFqrKjAzSSqP8XXSU5fEC6ZYSncX5pvSKoRLrPDcF8cEaZkrQvvnuwRUXeKVjoGmAqvbwVkNBFLaRiqcdVhWPyuShUrbcZsv\",\n    tpub: \"tpubDCZv1xNTnmwmXe3BBMyXekiVreY853jFeC8k9AaEAqCDYi1ZTSTLH3uQonwCTRk9jL1SFu1cLNbDY76YtcDR8n2inSMwBEAdZs37EpYS9px\"\n  },\n  \"m/45'/0'/0'/0/0\": {\n    pub: \"03102f0df5e34ffa1178a5310952221b8e26b3e761a9e328832c750a2de252f21a\",\n    xpub: \"xpub6FjSpitFpSJB9BpSVwp3eJzhpaQFLbLefD1f3qaGRmok2Z2FDeSNsy5CL9TLwM3HpcV2kAyTNf2W1uUXs1jbeXGWjdWnsaqnUQ9PyWAYVhQ\",\n    tpub: \"tpubDG75LxhwXiFdQz1Hx8o8rEL59hVuKyqiCqbxQPdQmgZdmqgxHsHU2Qk2aBY8TqzXcX1wMkVKukrYi5y9FsaqXxiooEG6Z7W24MjojRNcVtA\"\n  },\n  \"m/45'/0'/4'\": {\n    xpub: \"xpub6CCHViYn5VzKSmKD9cK9LBDPz9wBLV7owXJcNDioETNvhqhVtj3ABnVUERN9aV1RGTX9YpyPHnC4Ekzjnr7TZthsJRBiXA4QCeXNHEwxLab\",\n    tpub: \"tpubDCZv1xNTnmwmiZW4boJEY6YmKH2qKscsV9tuimmwaN8pT8NCxwtFLEAJUTSw6yxf4N44AQVFpt26vwVMBhxhTLAAN1w2Cgidnc7n3JVnBDH\"\n  },\n  \"m/45'/0'/4'/0/0\": {\n    pub: \"021a0b6eb37bd9d2767a364601e41635a11c1dbbbb601efab8406281e210336ace\",\n    xpub: \"xpub6GYTTMaaN8bSEhicdKq7ji9H7B2SL4un33obThv9aekop4J7L7B3snYMnJUuwXJiUmsbSVSyZydbqLC97JMWnj3R4MHz6JNunMJhjEBKovS\",\n    tpub: \"tpubDGv5ybQG5QYtWVuU5WpCwdUeSJ86KTQqagPtpFyHvZWhZLxpQL292EDC2LZhU2FxGgQW44xr75TeXWgkWACkgAVi7x3Hmq39NJu7VBdS42V\"\n  },\n  \"m/45'/0'/4'/6/2\": {\n    pub: \"021bb3e8d7e2ded6301478457de6b651f5f7b4b20dad28ddfee70c746719443ff8\",\n    xpub: \"xpub6HBwGjhNzvy16npAQ2y53kpWcaaohBZCjh3HvPwngWwEVjT5hUtVeg8YPr11DpZgcb4DWsAH273Z7Jxo1fSMXkQemLrBWRxjERqHz12L2K1\",\n    tpub: \"tpubDHZZnyX4iCvTNb11rDxAFg9swhgTga4GHKdbGwzw2Rh8F27nmhjao7oNdt5nkKWvQVb88Sg9ZCsboVTQQXHbRBrwpwbVBxcxpPRhk4NnLYN\"\n  },\n  \"m/45'/0'/4'/99'\": {\n    xpub: \"xpub6DYRpdguLMw7gRvTn4Qo3VBU7k6ucyauGyR4chHftSQVoX5M5ArP4qgfyGWFzrURBmXyebFDg7TLh82cbk7KEsL2Es74hS24bxoEduYyDDq\",\n    tpub: \"tpubDDv4LsWb3dtZxE7KEFPtFQWqSsCZcN5xpc1MyFLpEMAPYok49PhUDHMWDJb3XMReyg4tGAm6DDHPPJXDzbxZ8JnKJTrNNxgJBvPePy4Px6s\"\n  },\n  \"m/45'/0'/4'/99'/0/0\": {\n    pub: \"030d661b96bd1dbb22f6eacabb94905bca5694eb3af5d699c1b2d8de5427496f42\",\n    xpub: \"xpub6JfuzV9Yo9m1L9nBcMVVjgg3kmkCr7rkjAS5cTy2Dny4bjFS5m4Rvdrj71hAHR8qmhUN7mRbxgoBZjP93EdNQiiLM2XnDPPTBFYUEfRaiz3\",\n    tpub: \"tpubDK3YWiyEWRiTbwy34YUawc1R5tqrqWMpGo2Ny22AZhixM1v99yuX55XZM3mwov65Zc1GjLwUVndEFuskS6UcJAAdQdH5tv3gmD8szggjEA4\"\n  },\n  \"m/45'/0'/4'/99'/2147483647/3/1\": {\n    pub: \"0211aa5c03e290dc0110103c3d3f817500e76061d35ea89072286cb6f7962eda81\",\n    xpub: \"xpub6LCRwXBN9moqsJKhToW6K5qfBfTguMXuZw67q1BUuaWRyYD56P1zhqbyXsHqoo4WPsjUfeiJPu4JXnhtUz6cHbYgX6AFfDhUnPfCvbZD3JZ\",\n    tpub: \"tpubDLa4Tm13s3mJ96WYuzVBX1B2WnZLtk2y7ZgRBZEdFVGKipsnAbs5rHGomuNdLJ1kBnGPHEEAvztMDyCVsqwrB2zyaguZLkMiNMFcgX4e2rG\"\n  },\n  \"m/45'/1'/0'/0/0\": {\n    pub: \"037226e92491b2cf9691152fc2e9a0a7cff8f9ab7ad1b24b6f6506d7c8bf18911b\"\n  },\n  \"m/48'/0'/0'/1'/0/0\": {\n    pub: \"02c63c7ae511c9902e885da3e2fbb4a8f227eefc7f53eda3cad4d8f9389331b5be\"\n  },\n  \"m/48'/1'/0'/1'/0/0\": {\n    pub: \"03ff8a79f5016243a3959e2216e51cf90034cf510b379a34e6fdf565b19852baa2\"\n  },\n  \"m/48'/0'/0'/2'/0/0\": {\n    pub: \"032817ba5e2b76f6e2fab1d985224516f2b77a9c181e210def81ec2be8e17007c9\"\n  },\n  \"m/48'/1'/0'/2'/0/0\": {\n    pub: \"03ecf349ecf63fcd0ece9de7eb1abfb8f8b243fecc443bd62ef47744f0f6b7eef6\"\n  }\n};\nvar MULTISIGS_BASE = [{\n  network: _networks.TESTNET,\n  type: _p2sh.P2SH,\n  bip32Path: \"m/45'/1'/100'/0/0\",\n  publicKey: \"02a8513d9931896d5d3afc8063148db75d8851fd1fc41b1098ba2a6a766db563d4\",\n  publicKeys: [\"02a8513d9931896d5d3afc8063148db75d8851fd1fc41b1098ba2a6a766db563d4\", \"03938dd09bf3dd29ddf41f264858accfa40b330c98e0ed27caf77734fac00139ba\"],\n  redeemScriptOps: \"OP_2 02a8513d9931896d5d3afc8063148db75d8851fd1fc41b1098ba2a6a766db563d4 03938dd09bf3dd29ddf41f264858accfa40b330c98e0ed27caf77734fac00139ba OP_2 OP_CHECKMULTISIG\",\n  redeemScriptHex: \"522102a8513d9931896d5d3afc8063148db75d8851fd1fc41b1098ba2a6a766db563d42103938dd09bf3dd29ddf41f264858accfa40b330c98e0ed27caf77734fac00139ba52ae\",\n  scriptOps: \"OP_HASH160 8479072d5a550ee0900b5af7e70af575527a879d OP_EQUAL\",\n  scriptHex: \"a9148479072d5a550ee0900b5af7e70af575527a879d87\",\n  address: \"2N5KgAnFFpmk5TRMiCicRZDQS8FFNCKqKf1\",\n  utxos: [{\n    txid: \"65e7ef764030dabfb46e3ae1c357b0666d0dda722c9809fb73245d6d68665284\",\n    index: 1,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"0200000000010149c912d0e5e46f6ef933038c7fb7e1d665db9ae56b67fa57fe4c3476a95cf954000000001716001400e2f78f987a5a4493cf062994dbde49d040a922feffffff02631418000000000017a914c7ab6d103180a48181847d35732e93e0ce9ab07387a08601000000000017a9148479072d5a550ee0900b5af7e70af575527a879d870247304402202f538752e408b4817e7751ef243eee67d2242ca2061e8e6c9f22873247f10a8d02205b4622314efd733f12fc6557bc2f323ff2cbc1604ad97a351807e1be80875bc8012102e92335f6ecb1862f0eea0b99297f21bdb9beb9a1e8f41113788f5add306ca9fcee9b1800\"\n  }, {\n    txid: \"ae9e1aa8312e102e806fa11d8e65965a624f88459e6bb5bcf48156a0c53e022a\",\n    index: 1,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"0200000000010101745e1daa28c1705dbf73edd183e5ef91ad0918d97ad3e2ec2c69b548086f4d00000000171600142b0b522ba87db1646898118860449fcb2c69dae3feffffff02329642000000000017a9140f894f7e3b70b8741f830e066b6ef508a9f7479d87a08601000000000017a9148479072d5a550ee0900b5af7e70af575527a879d870247304402202dc887e5d623bd974968285e9c8165cfa9facd943caf0f8472e7acef632fb94302205c60434061e6a4e45360d3b3c901a9c1dd148b38dd6c9623cd8fa2677587e632012102366538692ffb9622e75a05dc2004d85efa0ebc27b99961e694d88f9ede2b57cae49b1800\"\n  }, {\n    txid: \"f243c1fbb85dd49da91477b89c76636202721be9c7df5ee6eee0c6a10861ae44\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"02000000000101e5d6a0ffc5f8387a90c463bf614ae53609b72988c44afc6a577f22666bc971a7000000001716001428386489d15b1cddfd245b506b8ff2d909b18d36feffffff02a08601000000000017a9148479072d5a550ee0900b5af7e70af575527a879d8786ce18050000000017a914d2fb0a8958e55d4c6c3ff58f970fdbba3006ec078702473044022007a7186e6afb93de749b3a905d1c7437f470f97095ea410538b6ac33d15a947802205a66118c7dc2e14d7325a122eb0021f54e1dbd5dfb8fd56b253fa3782716af3d012103f5951ccccf00964d54eefa78280ae083e0f0f0cc6382fd27b3fbfdfeda8dd2c7b29b1800\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.TESTNET],\n      amountSats: '291590'\n    }],\n    hex: \"0100000003845266686d5d2473fb09982c72da0d6d66b057c3e13a6eb4bfda304076efe7650100000000ffffffff2a023ec5a05681f4bcb56b9e45884f625a96658e1da16f802e102e31a81a9eae0100000000ffffffff44ae6108a1c6e0eee65edfc7e91b72026263769cb87714a99dd45db8fbc143f20000000000ffffffff01067304000000000017a914e3ba1151b75effbf7adc4673c83c8feec3ddc3678700000000\",\n    signature: [\"304402205397795a8b6e0b8d1c5a0b2b5b8fb8e49afb6dd150d1a186604fa9e71e23aaa20220514b7b7ed9ec43d983d7be5ea4ece5a55b29efa2193d90bf1fd087356fcbd54b\", \"304402200ffcb2331655f1f24bf2f7e16984d81310e55d47c405b45e327abde524c8d31e022036460b70a665d1756ea91e131a1ed1022544dfdd2232f64117230d22f9deeb08\", \"30440220167a35bccf4bb13073e8c66a1b094906d5c7879d6cdac730e435aef196d2f3eb02205a39e05763e511dc15deff56fa29eead850623076fda8a5e173dd0942197aaf4\"]\n  }\n}, {\n  network: _networks.TESTNET,\n  type: _p2sh_p2wsh.P2SH_P2WSH,\n  bip32Path: \"m/48'/1'/100'/1'/0/0\",\n  publicKey: \"026aaa7c4697ff439bfd6c7a70abf66253b4e329654b41ee2ad21d68b854e4a422\",\n  publicKeys: [\"025566585b3a8066b7d0bba4d2b24c3c59a5f527d62c100bbb7073a7cb2565418c\", \"026aaa7c4697ff439bfd6c7a70abf66253b4e329654b41ee2ad21d68b854e4a422\"],\n  witnessScriptOps: \"OP_2 025566585b3a8066b7d0bba4d2b24c3c59a5f527d62c100bbb7073a7cb2565418c 026aaa7c4697ff439bfd6c7a70abf66253b4e329654b41ee2ad21d68b854e4a422 OP_2 OP_CHECKMULTISIG\",\n  witnessScriptHex: \"5221025566585b3a8066b7d0bba4d2b24c3c59a5f527d62c100bbb7073a7cb2565418c21026aaa7c4697ff439bfd6c7a70abf66253b4e329654b41ee2ad21d68b854e4a42252ae\",\n  redeemScriptOps: \"OP_0 deeb888c0a0a1871a3da4c2e75ffab5eb17e9d27fccd41bc3d683a2674f93aa1\",\n  redeemScriptHex: \"0020deeb888c0a0a1871a3da4c2e75ffab5eb17e9d27fccd41bc3d683a2674f93aa1\",\n  scriptOps: \"OP_HASH160 dac0270cbf87a65c0cf4fd2295eb44c756b288ec OP_EQUAL\",\n  scriptHex: \"a914dac0270cbf87a65c0cf4fd2295eb44c756b288ec87\",\n  address: \"2NDBsV6VBe4d2Ukp2XB644dg2xZ2SuWGkyG\",\n  utxos: [{\n    txid: \"429da41d05db69d7c006e91b15031e6d47faab15adba3c97059eeea093c36a23\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"02000000000101845266686d5d2473fb09982c72da0d6d66b057c3e13a6eb4bfda304076efe7650000000017160014a89baf1e6b16698bf34927d4a1f71270a57972d6feffffff02a08601000000000017a914dac0270cbf87a65c0cf4fd2295eb44c756b288ec871d8d16000000000017a91471e39bcec3aead7b1d45ad04aea8ad231be756768702473044022067dbe8b2623bd3948bfca811f934c1b512d7add1a09ff70a5b0e083edccbee780220325924a596ce2b567797b53eaa7eec3f6a989427829479ea5619ed72aaeffea40121023251e686167dbea8774b3510a78caa67550d566bd078c1285aa69ec0c561f767ee9b1800\"\n  }, {\n    txid: \"d8edcd3ef4293a2554a147f048442d735fb54b901c1e39ffdb59448c1abae812\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"02000000000101236ac393a0ee9e05973cbaad15abfa476d1e03151be906c0d769db051da49d4201000000171600149df8fa8c17c034dd0e4f96c1eb0110113037ff71feffffff02a08601000000000017a914dac0270cbf87a65c0cf4fd2295eb44c756b288ec87d70515000000000017a9144b1d195a2cf70e3233aaf8e229d9d2a2da1b7845870247304402205c2e3d2cb7c8aa461aabb5c74210f795ec018db703910c9556f8b222012bb3ad02200f8c63fd859b575a6a762df0019f18ad917cf9de1e128e33bc540c4e5356b9ea012103280eb7fdde76317c63664c46bfe7602f6ff64a0dc22695c7e7093f34b40c5536ee9b1800\"\n  }, {\n    txid: \"ff43f4cc8473341ce9effb91d715a4deb4e8a8cb669dd1d119a3a30552a829d1\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"02000000000101eef67cc41c10722be710952296866ea13ed1608acdf15e453e8d874e6a15c6d50000000017160014a989c1c6a3dbbf44d508d5f36df2d08c97e9fca4feffffff02a08601000000000017a914dac0270cbf87a65c0cf4fd2295eb44c756b288ec87a5b90d000000000017a914d0324b98895786d859ae3ee3df0c384249f1a4ab870247304402200621a08b242b807a0c39b6e0bf302e503b9a2596acdd218b176cb62afba31824022027bb2cc91b5ae57500a2e3c440d4d45cc42617f4db665a1b25974122b3789ddd01210209bb437e2e4658c6eb92c20a1ef459a2d1da50757dfba0c49a19dd3dbd621d87e09b1800\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.TESTNET],\n      amountSats: '291590'\n    }],\n    hex: \"0100000003236ac393a0ee9e05973cbaad15abfa476d1e03151be906c0d769db051da49d420000000000ffffffff12e8ba1a8c4459dbff391e1c904bb55f732d4448f047a154253a29f43ecdedd80000000000ffffffffd129a85205a3a319d1d19d66cba8e8b4dea415d791fbefe91c347384ccf443ff0000000000ffffffff01067304000000000017a914e3ba1151b75effbf7adc4673c83c8feec3ddc3678700000000\",\n    signature: [\"30440220571b44fea349bb6d41698269f47a3b481186b5823457f50e5836f3674d78aee802206730c2d4366c83dc57afa1f2d31a70b6a5ef5345555025fb0245f03393275ae201\", \"30450221008152abafaef773821816e9e84254a1f6f1794024d22320a0689297961d627716022014ee4a8b254dbaa9765aa86a43aa2a2fd52abde009a9ad9b315dc9f557f869c301\", \"30440220163c8fe5e09a7c5a2750f6cd98325cb57e8523ace74431fc748144365f32cfd50220372eefd2dd119c84b27a0b215609e9e1323ae1045c35eee3bc849eb2dd6b4c6701\"]\n  }\n}, {\n  network: _networks.TESTNET,\n  type: _p2wsh.P2WSH,\n  bip32Path: \"m/48'/1'/100'/2'/0/0\",\n  publicKey: \"03bc34c50cf768f802290269c2ddabd086c73514c880cecb6db3f67676a4b72469\",\n  publicKeys: [\"035a763e0480f858ef626b649fa0efe9eb647abbf77db54f3af904d2de50c4342d\", \"03bc34c50cf768f802290269c2ddabd086c73514c880cecb6db3f67676a4b72469\"],\n  witnessScriptOps: \"OP_2 035a763e0480f858ef626b649fa0efe9eb647abbf77db54f3af904d2de50c4342d 03bc34c50cf768f802290269c2ddabd086c73514c880cecb6db3f67676a4b72469 OP_2 OP_CHECKMULTISIG\",\n  witnessScriptHex: \"5221035a763e0480f858ef626b649fa0efe9eb647abbf77db54f3af904d2de50c4342d2103bc34c50cf768f802290269c2ddabd086c73514c880cecb6db3f67676a4b7246952ae\",\n  scriptOps: \"OP_0 ba2514cdd3a3c202eb4394e550a0fc116cb834f34662a019be8a52c62351d068\",\n  scriptHex: \"0020ba2514cdd3a3c202eb4394e550a0fc116cb834f34662a019be8a52c62351d068\",\n  address: \"tb1qhgj3fnwn50pq966rjnj4pg8uz9ktsd8nge32qxd73ffvvg636p5q54g7m0\",\n  utxos: [{\n    txid: \"84df8dcc9b86e8c7bb39ce0ba9f577ec750f0b64df97a5c9559cf39243a1f501\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"020000000001018342873aa48ba6b2e5a796f34b7431bb56f9c569a6bd8f7e539cb3147a86b3f80000000000feffffff02a086010000000000220020ba2514cdd3a3c202eb4394e550a0fc116cb834f34662a019be8a52c62351d068a9873f0000000000160014208e4178e48f2d270a06475ad8caeb2e01f55ae80247304402205369dedb14963e0bfa22748a546e03e47fcf994c85944ae0d6b507d15ebba57d022073cdd6c8af057aabac652ec438de7fc7e201d6a3b8619e54a2db5c1b509865e9012103ba504ae1099d8f38163c90540fa10e09cac4fa2df95b8b91bc2aba01571c27d9ee9b1800\"\n  }, {\n    txid: \"f010998e033355636c2ba34af753cd6d5f198889a379bc30625bb38f646f3d72\",\n    index: 0,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"0200000000010144ae6108a1c6e0eee65edfc7e91b72026263769cb87714a99dd45db8fbc143f201000000171600142ff3a6303add9138957b880c73a331cf718a418ffeffffff02a086010000000000220020ba2514cdd3a3c202eb4394e550a0fc116cb834f34662a019be8a52c62351d068364717050000000016001403f4d726aec3c06aa8a31b230e9997288faea72a02473044022032368bd2b2441840850b62f86bfa4434854b5e83da1e5cac43cd613a88f91839022042b2f9f7ea20c97d889a89b0f7cb649b8bb3acc20c4207b5665e235b340766a101210216bb0c99eb498379d5c7b7ad0f3afb9ff3eec9be622fffe821c5456003f22c02ee9b1800\"\n  }, {\n    txid: \"f8b3867a14b39c537e8fbda669c5f956bb31744bf396a7e5b2a68ba43a874283\",\n    index: 1,\n    amountSats: '100000',\n    // 0.001 BTC\n    transactionHex: \"020000000001012a023ec5a05681f4bcb56b9e45884f625a96658e1da16f802e102e31a81a9eae0000000017160014c4733d80022a7a3dde9a7e3112b39e390500713cfeffffff02e20e410000000000160014060213b00b3d902d2bd7e90c4b7e9e34830d2f9da086010000000000220020ba2514cdd3a3c202eb4394e550a0fc116cb834f34662a019be8a52c62351d0680247304402201504b1dbf14cf216c7de1fa78dd649a319b2274361034aaa9bc82473632650d1022013da0cb0bb740a95010821e451e7fc699bb2489e71c20093d8d3cd3f4e8c2efc012102db49c46b1a64061d15d0faa234e8da59defe0f4164009e73be9be540265cf0caee9b1800\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.TESTNET],\n      amountSats: '291590'\n    }],\n    hex: \"010000000301f5a14392f39c55c9a597df640b0f75ec77f5a90bce39bbc7e8869bcc8ddf840000000000ffffffff723d6f648fb35b6230bc79a38988195f6dcd53f74aa32b6c635533038e9910f00000000000ffffffff8342873aa48ba6b2e5a796f34b7431bb56f9c569a6bd8f7e539cb3147a86b3f80100000000ffffffff01067304000000000017a914e3ba1151b75effbf7adc4673c83c8feec3ddc3678700000000\",\n    signature: [\"3044022006af7cbad3b34ca8b7ba0b72e2424b918ce57798603e5473a05d83abaad697b4022014696327ff1c17cdf1af27460e5b196ebdb4fa0f4650289696642ecea5399c0301\", \"3045022100b8cf09c3abecaa59a677f3633375a3c608031b827497d6476beaae15b4641732022036156d23d4adcc32424c8ea08ba8fcf171f82b947f1b3f09f95b0731ea4e898301\", \"304402204971879ff546217adafafa0f2fdf0a351c304af8bd32bb1241b2eb0043d45e8102202cebfab10ba08156a8165fec341af12635a204cbeb07cb0deb16d2726d744bc501\"]\n  }\n}, {\n  network: _networks.MAINNET,\n  type: _p2sh.P2SH,\n  bip32Path: \"m/45'/0'/100'/0/0\",\n  publicKey: \"02583c4776b51691f4e036c8e0eb160f3464a2de9ae4c6818b7945c78fc6bace79\",\n  publicKeys: [\"02583c4776b51691f4e036c8e0eb160f3464a2de9ae4c6818b7945c78fc6bace79\", \"02b024e76d6c2d8c22d9550467e97ced251ead5592529f9c813c1d818f7e89a35a\"],\n  redeemScriptOps: \"OP_2 02583c4776b51691f4e036c8e0eb160f3464a2de9ae4c6818b7945c78fc6bace79 02b024e76d6c2d8c22d9550467e97ced251ead5592529f9c813c1d818f7e89a35a OP_2 OP_CHECKMULTISIG\",\n  redeemScriptHex: \"522102583c4776b51691f4e036c8e0eb160f3464a2de9ae4c6818b7945c78fc6bace792102b024e76d6c2d8c22d9550467e97ced251ead5592529f9c813c1d818f7e89a35a52ae\",\n  scriptOps: \"OP_HASH160 f18bcbf45f7805fe663339d838d5c8a086d79e53 OP_EQUAL\",\n  scriptHex: \"a914f18bcbf45f7805fe663339d838d5c8a086d79e5387\",\n  address: \"3PiCF26aq57Wo5DJEbFNTVwD1bLCUEpAYZ\",\n  utxos: [{\n    txid: \"456813be8389d17e945c0b91b5112938a7268bb7c6721147bce6521eeabde7b0\",\n    index: 0,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"0200000000010216ac0943cd43bb8168c591016a0a5439b3124427bf5df0582f68f2ae52fc86560000000017160014f827ea2db54a62d5027b411ff9d2d6e9234796a8feffffffd9bde17e907b90631edc22f83a4f849d9527e4a3d3b3096fdfc8131eeb8c4c8201000000171600141aabdcba4979e2772ad5da60e757f6d992c09d41feffffff02102700000000000017a914f18bcbf45f7805fe663339d838d5c8a086d79e5387ac0700000000000017a914df0aa2a92361822c637c0e44fb1cae2f1a22f0df870247304402204f91360c63c8ce6c98ebec06a6710e5f016cac8d8733c3855401f821f437c5650220611c87d76c2e72accb892cff110f0837d6d60942fdaea2edf86098af355016570121033c5f5b6c028649dedbe089033d6736788199041567b510d88448d0d1bcd5675d024730440220296ce4c551c6945176d8f057c9d05d7a21aa7ccb4c1d8d692c8937b00e3a9be4022024a514a72e4c52ee9c7bcf5c60dd7fb8ee4e83059d0869d85a6659e4d6737535012103c86c2e648f8e34be880b5f12d33bfd712c552ebf68fe01a1daebf2a24a44cbfa99490900\"\n  }, {\n    txid: \"5bbf64e036e46bf93dadc770f0415f6566453b9ae2d932df00fd5b5e49bdbbd5\",\n    index: 1,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"0200000000010133f0ca4e94d7ad6673a3777ed56fbcf0d2ebc5f6578578746c989ba2ec20cfaa0300000017160014c530831acb421c9ac89d1a83113acf4b46b3a2affeffffff02f00602000000000017a914939b4923002a1f44854a671be64cf55846d4f5f887102700000000000017a914f18bcbf45f7805fe663339d838d5c8a086d79e5387024730440220044dac81ef05b655fb6e72a21423f2db9fd4fc938243ba8293f7f0f24c7e56e202201fa946e11c0be1eeae81fe2418a8d30bf39048fc110e6aaf253149ef47dc8d28012103fb20014d5c613fc2d5a588cf6ea9292afa843a8e5f14dfe9d4e18e5cb158ecee99490900\"\n  }, {\n    txid: \"74c11de1a3f1a5daa06441d78d7fb45609b3415721466c6256bffd881451cda5\",\n    index: 0,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000101d748779bd254dce3523c691a9ce1bf8836d524ba97d26cc24127e3367a2027f600000000171600141aabdcba4979e2772ad5da60e757f6d992c09d41feffffff02102700000000000017a914f18bcbf45f7805fe663339d838d5c8a086d79e5387025b00000000000017a9145d0e078b76ff5e990bf628bf28f593d217caaeb9870247304402206b99e2475b2424db1e47fdb9689036fa44d5c9dea3e5419f26759eed86920c91022011c38e5e69280e62353088d5bf28ecf15a3ff348edcad8c31e441f9f57da172a012103c86c2e648f8e34be880b5f12d33bfd712c552ebf68fe01a1daebf2a24a44cbfa99490900\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.MAINNET],\n      amountSats: '21590'\n    }],\n    hex: \"0100000003b0e7bdea1e52e6bc471172c6b78b26a7382911b5910b5c947ed18983be1368450000000000ffffffffd5bbbd495e5bfd00df32d9e29a3b4566655f41f070c7ad3df96be436e064bf5b0100000000ffffffffa5cd511488fdbf56626c46215741b30956b47f8dd74164a0daa5f1a3e11dc1740000000000ffffffff01565400000000000017a91480b2477411a78b2a939d7da08bfa1939a871a4b98700000000\",\n    signature: [\"30440220093e19b884411f941ccebe9a175e3e36a91c60b469ad1b8b9983017943b6e2550220583fde25a48ee2627c1c2496cf46784f2a12803378c443969b3779fea62e23ae\", \"30440220697b840a3b42ba50b5911b5830c3b75817dfe8d42f6c8d12e7532d4e19539a3202204d3655a3d4db9c57cb2522de739630270822ea23d044df7343eb489b5fe2dfec\", \"304502210080ad474a50c50047efc34eeae1c3acc0bb214424878b723de95abd33edd7a76a022049b4fdc82d026ba1dae2641c54b9d3468298800a5e4dc4988b6b1dbb3ac54bc5\"]\n  }\n}, {\n  network: _networks.MAINNET,\n  type: _p2sh_p2wsh.P2SH_P2WSH,\n  bip32Path: \"m/48'/0'/100'/1'/0/0\",\n  publicKey: \"0342997f6fcd7fa4a3c7e290c8867148992e6194742120985c664d9e214461af7c\",\n  publicKeys: [\"0328b57c2f65c98ed7cde4bca54cc3a13afa4d47117fd9dae06663a4169e05ef86\", \"0342997f6fcd7fa4a3c7e290c8867148992e6194742120985c664d9e214461af7c\"],\n  witnessScriptOps: \"OP_2 0328b57c2f65c98ed7cde4bca54cc3a13afa4d47117fd9dae06663a4169e05ef86 0342997f6fcd7fa4a3c7e290c8867148992e6194742120985c664d9e214461af7c OP_2 OP_CHECKMULTISIG\",\n  witnessScriptHex: \"52210328b57c2f65c98ed7cde4bca54cc3a13afa4d47117fd9dae06663a4169e05ef86210342997f6fcd7fa4a3c7e290c8867148992e6194742120985c664d9e214461af7c52ae\",\n  redeemScriptOps: \"OP_0 049d6e945074525b03e0487759368ff663f10bb88976017bdd9d3cce849085e5\",\n  redeemScriptHex: \"0020049d6e945074525b03e0487759368ff663f10bb88976017bdd9d3cce849085e5\",\n  scriptOps: \"OP_HASH160 1abcf8cea321ca874de4beb4f975077fe864a54a OP_EQUAL\",\n  scriptHex: \"a9141abcf8cea321ca874de4beb4f975077fe864a54a87\",\n  address: \"348PsXezZAHcW7RjmCoMJ8PHWx1QBTXJvm\",\n  utxos: [{\n    txid: \"2062282a8c6644740d4a5c85a74ad21c6a0fda8d753e8a4bdfba09a26d20eb40\",\n    index: 1,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000104e7f99e90ef69f7bf577cc34c695469d1ef2e021320f4f5d312a439fa5119214c010000001716001458ff1cdc218f9baaf9a5ac278206e8f8cc2d55a2feffffffb0e7bdea1e52e6bc471172c6b78b26a7382911b5910b5c947ed18983be13684501000000171600144245d8387278181e8f5d61e35427fa055f891ccefeffffffb68f87f28f11710b7005426340c4c4d9795c331f027549bd383b6f179d709a280000000000feffffff79d037447d0706083212ec168a5b3e24f97bd7a9e0099b105b042781853780810000000017160014ec62a1ca200abdc755c8b34faae78202b6dd3fc3feffffff02920500000000000017a91449e9133aaffa9192d802655f2db8fa1db9eec00887102700000000000017a9141abcf8cea321ca874de4beb4f975077fe864a54a8702473044022069c0985164d17c746fb818179f969740e39d6569ec5a144a83c72de2473b6b8002204f62217bbb2b34efedda454c85dfa960788d4c7f538c7fdf22c5074f5a2c78bb012103e74f757ceb0288ac7c051b7db87fb059a19eac05a480c65c913068a6f80d23b80247304402200f827b64e5feb6071f5d4278e4fa3643e164316ab897f53df0482658e753110202201143f4348812122322876aa29a7285cc8ea51a3e32fb0392fd2e6422d63793f501210350de53693c9da7f849cab9479304ee2b2af317f28ee00ed1e112cd95bc200bd2024730440220025e0eff09b09817e8d595c01bfd2fdba6082e2c4f8f286545f9a2a2e9f148ba02205725704e14c2969a1afcf0084dd29bdbc5136b75438158ecf76992e3c24b561f012102e24e7df260cb56ffbcdb52bea6f8c8bc267d849f5799cf919e32574568ed85d602473044022011bbd9ec6338f174fa0a386acb1fb4dfe348343b2eed5017b11e96151ad214ca02207e7bb5443f34d33147f28fafb4cd661dccc7c6993ad7c58ed47197c85b48c849012102587990c5f71d9e4c894069589845c5f2649b83006160b9d1b8f31bab54133a9399490900\"\n  }, {\n    txid: \"4c211951fa39a412d3f5f42013022eefd16954694cc37c57bff769ef909ef9e7\",\n    index: 0,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000101a5cd511488fdbf56626c46215741b30956b47f8dd74164a0daa5f1a3e11dc1740100000017160014eeeff0e10da2973449331a9e48f246b18488e965feffffff02102700000000000017a9141abcf8cea321ca874de4beb4f975077fe864a54a87bd2a00000000000017a91445a77947cf42db7fec41cec25c28af0b73becf2e8702473044022044858a87117fd8af2fa92db123935019d76ee9157fb9a48a9cd97ee085b128f90220572b799eae6f3f8cf6aa287450ff46b21588840dabeeb63e57c6f3f320f49eea0121025abd982f0c9ebbb7238900326af437c393eb2c5e875f5bd63152ddd756e5049a99490900\"\n  }, {\n    txid: \"c5d0e548e2332450057ce5bd2a6fb720b2c8bd6f595ed11fdba71488b1bf7b31\",\n    index: 1,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000101d5bbbd495e5bfd00df32d9e29a3b4566655f41f070c7ad3df96be436e064bf5b00000000171600140e021c1c3313ef991acd0c5d9f63ca12ce110005feffffff02abd601000000000017a9145d27db58f13d4851260174d9dc9eacdf62074a4e87102700000000000017a9141abcf8cea321ca874de4beb4f975077fe864a54a8702473044022077b4f0f2d1480443f8b29ed68a29b606b83a3ebbda4349bf813c33330b7f4aa902202061823fd25330b6c0adb68afce4546ada193eb63982f28a7562bc605ea6b0e5012102930a7b8a6fd51a8ce36039bacf160239cfb7dbc72dc1a051aaac333bc7f8e7924e490900\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.MAINNET],\n      amountSats: '21590'\n    }],\n    hex: \"010000000340eb206da209badf4b8a3e758dda0f6a1cd24aa7855c4a0d7444668c2a2862200100000000ffffffffe7f99e90ef69f7bf577cc34c695469d1ef2e021320f4f5d312a439fa5119214c0000000000ffffffff317bbfb18814a7db1fd15e596fbdc8b220b76f2abde57c05502433e248e5d0c50100000000ffffffff01565400000000000017a91480b2477411a78b2a939d7da08bfa1939a871a4b98700000000\",\n    signature: [\"304402207da18a5f73e691fcd2451252919cada67c47f267fbc48cc729d4809c5ec9bcbe0220428d5ead8e9654586946dbd2e10e2a0f3677e405708f82c139be7adcccc36d1c01\", \"3045022100f33793cdd3848f51527c9fdd2c0f44408ccea4a3890f17f1409a054f59b7e8b2022001f26bd9180e598cae0a32c94e4f49b1a145062ef4612cd69054b3e3b130403401\", \"304402207931f66347d8573346eac0ec817c47dffc3af6ea2d7f354d60f1b73caa85ea9c02201062ee14b856737e6040c591e7a80fc684ec67d26ccb7e86eddf68572072416801\"]\n  }\n}, {\n  network: _networks.MAINNET,\n  type: _p2wsh.P2WSH,\n  bip32Path: \"m/48'/0'/100'/2'/0/0\",\n  publicKey: \"0369e74fc954355b6f7acf9bbec5b861c186852b759a85f92558e420a0202047f4\",\n  publicKeys: [\"02e21b7318cfbd482bdbb66441420b9018e5b440bf9b0cdedd427626d81f32605b\", \"0369e74fc954355b6f7acf9bbec5b861c186852b759a85f92558e420a0202047f4\"],\n  witnessScriptOps: \"OP_2 02e21b7318cfbd482bdbb66441420b9018e5b440bf9b0cdedd427626d81f32605b 0369e74fc954355b6f7acf9bbec5b861c186852b759a85f92558e420a0202047f4 OP_2 OP_CHECKMULTISIG\",\n  witnessScriptHex: \"522102e21b7318cfbd482bdbb66441420b9018e5b440bf9b0cdedd427626d81f32605b210369e74fc954355b6f7acf9bbec5b861c186852b759a85f92558e420a0202047f452ae\",\n  scriptOps: \"OP_0 497b026c3d3547a30e6d8006e385e0366af5eca2b5b455d8783875941e5c7fa9\",\n  scriptHex: \"0020497b026c3d3547a30e6d8006e385e0366af5eca2b5b455d8783875941e5c7fa9\",\n  address: \"bc1qf9asympax4r6xrndsqrw8p0qxe40tm9zkk69tkrc8p6eg8ju075sjeekkt\",\n  utxos: [{\n    txid: \"4ab356fef8b8205a3b96b4924e8e94f18c4b8ecdefa0bb1ee28ce19f091c3f58\",\n    index: 0,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"020000000001011aa35769284e2822b65a98ac46472bb5c455831927da993dbe9ad1959c296eaf0100000000feffffff021027000000000000220020497b026c3d3547a30e6d8006e385e0366af5eca2b5b455d8783875941e5c7fa94c76010000000000160014553e9be0af92386ae6b4065262dc97fdee9979170247304402206407b5c1fa2fd49b92e6f1802a0eed9e75f55c3db1ea179f077072d0c6e9031602205823ba8d01a6b96db9334affcb9b1e7dfb434cfdc1389287016d6b68c5c2cf0c0121029de99c2fec6fad0a90fb5a7792775477b8d82fa4f213903a2f67d3e2c1d802eb99490900\"\n  }, {\n    txid: \"a21b384dc72b9ef2559339cecd5ad2652171589b1e479497817b617734859d90\",\n    index: 1,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000101583f1c099fe18ce21ebba0efcd8e4b8cf1948e4e92b4963b5a20b8f8fe56b34a0100000000feffffff02c04601000000000016001416d8412d77ae6d6280c60091a7197a3f98546c911027000000000000220020497b026c3d3547a30e6d8006e385e0366af5eca2b5b455d8783875941e5c7fa90247304402204fada6ffa61f578f647ace8c8d02b678ff95ed0feca83b3a4750a97c5aa3ddca02203dc438b53e7aef6bd4f9152e37d6cbce4e64306932cc27f7e2072d764990cb530121020b500126d56d6f17b28e90f254b4b38c260ecd8e941b65c557b8af6c767027dd99490900\"\n  }, {\n    txid: \"af6e299c95d19abe3d99da27198355c4b52b4746ac985ab622284e286957a31a\",\n    index: 0,\n    amountSats: '10000',\n    // 0.0001 BTC\n    transactionHex: \"02000000000101317bbfb18814a7db1fd15e596fbdc8b220b76f2abde57c05502433e248e5d0c500000000171600147e88fb2bc740d5efffef8b6f53d5eb68b83317b6feffffff021027000000000000220020497b026c3d3547a30e6d8006e385e0366af5eca2b5b455d8783875941e5c7fa9d8a50100000000001600144ddfedfd823ee5dc953f4792a855b262a85ed77c0247304402202fc8347a8801fbbd13db5bd2694cdabb2c3428b6cfa6edda02ff16bc6cacb6b8022054604d07510ede500197deefe9d39abe277fb97a837ae40ea815b6aa38f0329701210247348c03f596b52730429ea89df4b3d75b219fd3c30cbcb66dae04779e0de6d236490900\"\n  }],\n  transaction: {\n    outputs: [{\n      address: RECEIVING_ADDRESSES[_networks.MAINNET],\n      amountSats: '21590'\n    }],\n    hex: \"0100000003583f1c099fe18ce21ebba0efcd8e4b8cf1948e4e92b4963b5a20b8f8fe56b34a0000000000ffffffff909d853477617b819794471e9b58712165d25acdce399355f29e2bc74d381ba20100000000ffffffff1aa35769284e2822b65a98ac46472bb5c455831927da993dbe9ad1959c296eaf0000000000ffffffff01565400000000000017a91480b2477411a78b2a939d7da08bfa1939a871a4b98700000000\",\n    signature: [\"304402207e9ed7746415d01ebf54e84367f5767fdcd36834b24a09518209689c2ca77b6502207123faaa61953f1c3f7b723bc8cff43bb3a007ec46079b46c4f260d2c1c998db01\", \"3045022100d8d052f50b1a996e1738a94a28d762bcd6ec26d3658ed9a66aeb39b41688154d02206cc815d5b7ef6f14647856fc5481f12a32abc077c51c60a4b19a545e072a5cf301\", \"3045022100f26c0ab42123f342c878894d496d62d154f10fffa0949d4356f0bb134d80ae3302207c5aa6892da2e3392b8488c999b76df31633e31209c34b3eb847fccb70a0b6e101\"]\n  }\n}];\nvar MULTISIGS = MULTISIGS_BASE.map(function (test) {\n  var multisig = _multisig.generateMultisigFromPublicKeys.apply(void 0, [test.network, test.type, 2].concat(_toConsumableArray(test.publicKeys)));\n\n  return _objectSpread({}, test, {}, {\n    description: \"\".concat(test.network, \" \").concat(test.type, \" 2-of-2 multisig address\"),\n    utxos: test.utxos.map(function (utxo) {\n      return _objectSpread({}, utxo, {}, {\n        amountSats: (0, _bignumber[\"default\"])(utxo.amountSats),\n        multisig: multisig\n      });\n    }),\n    transaction: _objectSpread({}, test.transaction, {}, {\n      outputs: test.transaction.outputs.map(function (output) {\n        return _objectSpread({}, output, {}, {\n          amountSats: (0, _bignumber[\"default\"])(output.amountSats)\n        });\n      })\n    }),\n    multisig: multisig,\n    multisigScript: test.type === _p2sh.P2SH ? (0, _multisig.multisigRedeemScript)(multisig) : (0, _multisig.multisigWitnessScript)(multisig),\n    multisigScriptOps: test.type === _p2sh.P2SH ? test.redeemScriptOps : test.witnessScriptOps,\n    multisigScriptHex: test.type === _p2sh.P2SH ? test.redeemScriptHex : test.witnessScriptHex\n  });\n});\n\nfunction selectFirstUTXOFromEach(tests) {\n  var unsortedUTXOs = [];\n  var unsortedBIP32Paths = [];\n  var unsortedPublicKeys = [];\n  tests.forEach(function (test) {\n    unsortedUTXOs.push(test.utxos[0]);\n    unsortedBIP32Paths.push(test.bip32Path);\n    unsortedPublicKeys.push(test.publicKey);\n  });\n  var sortedUTXOs = (0, _inputs.sortInputs)(unsortedUTXOs);\n  var sortedBIP32Paths = [];\n  var sortedPublicKeys = [];\n  sortedUTXOs.forEach(function (utxo) {\n    var unsortedIndex = unsortedUTXOs.findIndex(function (otherUTXO) {\n      return otherUTXO.txid === utxo.txid && otherUTXO.index === utxo.index;\n    });\n    sortedBIP32Paths.push(unsortedBIP32Paths[unsortedIndex]);\n    sortedPublicKeys.push(unsortedPublicKeys[unsortedIndex]);\n  });\n  return {\n    inputs: sortedUTXOs,\n    bip32Paths: sortedBIP32Paths,\n    publicKeys: sortedPublicKeys\n  };\n}\n\nfunction singleMultisigTransaction(test) {\n  return _objectSpread({}, {\n    name: \"Sign \".concat(test.description),\n    description: \"spends multiple UTXOs from a single \".concat(test.description),\n    network: test.network,\n    inputs: (0, _inputs.sortInputs)(test.utxos),\n    bip32Paths: test.utxos.map(function (utxo) {\n      return test.bip32Path;\n    }),\n    publicKeys: test.utxos.map(function (utxo) {\n      return test.publicKey;\n    }),\n    segwit: test.type !== _p2sh.P2SH\n  }, {}, test.transaction);\n}\n\nvar TRANSACTIONS = MULTISIGS.map(function (test) {\n  return singleMultisigTransaction(test);\n}).concat([_objectSpread({}, selectFirstUTXOFromEach(MULTISIGS.filter(function (test) {\n  return test.network === _networks.TESTNET;\n})), {}, {\n  name: \"Sign across \".concat(_networks.TESTNET, \" 2-of-2 multisig address types\"),\n  description: \"spends a UTXO from each \".concat(_networks.TESTNET, \" 2-of-2 address type\"),\n  network: _networks.TESTNET,\n  segwit: true,\n  outputs: [{\n    address: RECEIVING_ADDRESSES[_networks.TESTNET],\n    amountSats: (0, _bignumber[\"default\"])('291590')\n  }]\n}, {\n  hex: \"0100000003236ac393a0ee9e05973cbaad15abfa476d1e03151be906c0d769db051da49d420000000000ffffffff845266686d5d2473fb09982c72da0d6d66b057c3e13a6eb4bfda304076efe7650100000000ffffffff01f5a14392f39c55c9a597df640b0f75ec77f5a90bce39bbc7e8869bcc8ddf840000000000ffffffff01067304000000000017a914e3ba1151b75effbf7adc4673c83c8feec3ddc3678700000000\",\n  signature: [\"30440220583a0f9f0dec594d16cee927dc10d10e99b075c2cbdaad75daf1adf1a9f34900022058311ae12f952a4707f8c4966a50ed96b21e049ef35afc91e77c9a1b991f93b801\", \"304502210084f12880a76b33e4bbf7bc896e76ccd726f59e24876261d1f9c999a2203d10c70220327e7daf28cf6dca83ff24c2b1dbded308e71f11941c14fa2b3bb1623d240b7201\", \"3045022100aeeaa8c07be892ff1dcbbcf76ab6f202fa3f6b3f41e0476294f8df2d0afb457f02206d7eecc49e1ff32f1f25b7649a127e4334c0f9272aa92051364f5094b3d796ad01\"]\n}), _objectSpread({}, selectFirstUTXOFromEach(MULTISIGS.filter(function (test) {\n  return test.network === _networks.MAINNET;\n})), {}, {\n  name: \"Sign across \".concat(_networks.TESTNET, \" 2-of-2 multisig address types\"),\n  description: \"spends a UTXO from each \".concat(_networks.MAINNET, \" 2-of-2 address type\"),\n  network: _networks.MAINNET,\n  segwit: true,\n  outputs: [{\n    address: RECEIVING_ADDRESSES[_networks.MAINNET],\n    amountSats: (0, _bignumber[\"default\"])('21590')\n  }],\n  hex: \"010000000340eb206da209badf4b8a3e758dda0f6a1cd24aa7855c4a0d7444668c2a2862200100000000ffffffffb0e7bdea1e52e6bc471172c6b78b26a7382911b5910b5c947ed18983be1368450000000000ffffffff583f1c099fe18ce21ebba0efcd8e4b8cf1948e4e92b4963b5a20b8f8fe56b34a0000000000ffffffff01565400000000000017a91480b2477411a78b2a939d7da08bfa1939a871a4b98700000000\",\n  signature: [\"304502210088188fe088e22872e06ddad13c2586f6abb5d8040b2bb919bf00f6a855e3788902202517f77ae39ac37c0522864dfb996dc86272f328ee4d7b614cad17899f5bbc3a01\", \"3044022078e151ce21dab691a35f8aa2a080478cd15369653bc8ecd250019e62f2d1557102204349f260f9233558b8a71c9e2dc9888b6666451de97ea12b890ee7526f9f404001\", \"3044022005e44b81d321ce6cc27e7d64cf482844e0dd30220a776c62199d2fac33c6a41502201beacca9c4d4f00d31c797b9441222e67ada8d4e0706d1cd29805af363de615c01\"]\n})]);\nvar EXTENDED_PUBLIC_KEY_CONVERSIONS = {\n  xpub: \"xpub6CCHViYn5VzKFqrKjAzSSqP8XXSU5fEC6ZYSncX5pvSKoRLrPDcF8cEaZkrQvvnuwRUXeKVjoGmAqvbwVkNBFLaRiqcdVhWPyuShUrbcZsv\",\n  ypub: \"ypub6X2YoPDhEBXo793SZXn4evUdhVav2HDh1g4fa1QyCvpCrXA5dsmokftiaxozvqSqM4bLPo6JFw7ijDDWDSnC3aG2bBK45cKtFdWLsUKgtyo\",\n  zpub: \"zpub6qrp73tcNs5GxSEZPtZgs1a8sTjMxuDBvnatMQJrawC5ucyJtXwNNjYrcAmavk6kkhi99GgribUGcVq4w9CCqowdTX1UfX9NXMZzG2XWQdj\",\n  Ypub: \"Ypub6hvdvcx8o96AXiCpWCF3UzpSRHdBEduHKwiLVGgWahecUhizQHA5qnkePfmUVGfjaXfKGP6R99WDrNqGWfw9C4NhReRTV1nt9MnDTNALmuh\",\n  Zpub: \"Zpub72kuEHd3wpdeP1PwLZ2fh5uwbFmdBFtnF4EZGfaPxi2VXoYDewKeTrQnQsj4VBKezAn81rgybormjfSqENM9zJ4JHz7t4vcNR5qrqv8qja7\",\n  tpub: \"tpubDCZv1xNTnmwmXe3BBMyXekiVreY853jFeC8k9AaEAqCDYi1ZTSTLH3uQonwCTRk9jL1SFu1cLNbDY76YtcDR8n2inSMwBEAdZs37EpYS9px\",\n  upub: \"upub5DhVaiY2dTMshxGyE6dZpa6d1d18FoFhMDynSRqRguJge7uAdF7ZGRGAW8yewCq9iW87Pti4RHhXC4mFLf88rdXd7pXMjy3wAjFmK6jyHiX\",\n  vpub: \"vpub5YXktPCwn8uMZFU64TRC2fC8Bb9aCRFCGLW1DpjK4ugZhDiPsuH7tUvJXLwEw7V589Ev9NJcsx455MNp4MY9esDDzADnKssRSTKQhgCrtoZ\",\n  Upub: \"Upub5QbahxGUCQvF8XSMAm6YeeSRjR3PU9wHfVdTMh6y4g96GJU5PeVqMY86Jqw8Ve43wyC6GUiBJW62KEP1dtH617eHxHdm9NWw4TXdu1aWzdx\",\n  Vpub: \"Vpub5jRr1cwPM6TiypdU17tArjXvuPBqQmvnac9g95zrSgWyKQHJeJfPybnEL3tiVYhyMcJu1xJjmASaCWzaMah6oMKtpdLBjHLRLBbHHcy3jDH\"\n};\n/**\n * A set of test fixtures all built from the same [BIP39 seed phrase]{@link https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki}.\n *\n * Initializing your keystore with this seed phrase will allow you to\n * replicate many of the unit tests in this library on your\n * hardware/software.  This is useful for functional testing.\n *\n * Includes the following properties:\n *\n * - `bip39Phrase` -- the BIP39 seed phrase used for all other fixtures\n * - `nodes` -- an object mapping BIP32 paths to the corresponding [HD node]{@link module:fixtures.HDNode} derived from the BIP39 seed phrase above.\n * - `multisigs` -- an array of [multisig addresses]{@link module:fixtures.MultisigAddress} derived from the HD nodes above.\n * - `transactions` -- an array of [transactions]{@link module:fixtures.MultisigTransaction} from the multisig address above.\n *\n * @example\n * import {TEST_FIXTURES} from \"unchained-bitcoin\";\n * console.log(TEST_FIXTURES.bip39Phrase);\n * // merge alley lucky axis penalty manage latin gasp virus captain wheel deal chase fragile chapter boss zero dirt stadium tooth physical valve kid plunge\n *\n */\n\nexports.EXTENDED_PUBLIC_KEY_CONVERSIONS = EXTENDED_PUBLIC_KEY_CONVERSIONS;\nvar TEST_FIXTURES = {\n  bip39Phrase: BIP39_PHRASE,\n  nodes: NODES,\n  multisigs: MULTISIGS,\n  transactions: TRANSACTIONS,\n  extendedPublicKeyConversions: EXTENDED_PUBLIC_KEY_CONVERSIONS\n};\n/**\n * An HD node fixture derived from the BIP39 seed phrase fixture.\n *\n * Not all HD node fixtures have all properties below.\n *\n * @typedef module:fixtures.HDNode\n * @type {Object}\n * @property {string} pub - the (compressed) public key in hex\n * @property {string} xpub - the extended public key formatted for mainnet\n * @property {string} tpub - the extended public key formatted for testnet\n */\n\n/**\n * A multisig address fixture.  At least one of the public\n * keys in the redeem/witness script for each address is derived from\n * the BIP39 seed phrase fixture.\n *\n * @typedef module:fixtures.MultisigAddress\n * @type {Object}\n * @property {module:networks.NETWORKS} network - bitcoin network\n * @property {module:multisig.MULTISIG_ADDRESS_TYPES} type - multisig address type\n * @property {string} description - describes the multisig address\n * @property {string} bip32Path - BIP32 derivation path to the public key used in this address from the BIP39 seed phrase fixture\n * @property {string} publicKey - (compressed) public key (in hex) corresponding to BIP32 path\n * @property {string[]} publicKeys - (compressed) public keys (in hex) (order matters)\n * @property {string} multisigScriptHex - multisig script in hex (redeem/witneess script as appropriate)\n * @property {string} multisigScriptOps - multisig script in opcodes (redeem/witneess script as appropriate)\n * @property {string} redeemScriptHex - redeem script in hex (missing for P2WSH)\n * @property {string} redeemScriptOps - redeem script in opcodes (missing for P2WSH)\n * @property {string} witnessScriptHex - witness script in hex (missing for P2SH)\n * @property {string} witnessScriptOps - witness script in opcodes (missing for P2SH)\n * @property {string} address - bitcoin address\n * @property {string} scriptHex - script in hex\n * @property {string} scriptOps - script in opcodes\n * @property {module:multisig.Multisig} multisig - `Multisig` object for address\n * @property {module:transactions.UTXO[]} utxos - UTXOs at this address\n *\n */\n\n/**\n * A transaction fixture with inputs from one or more multisig\n * addresses.\n *\n * Each address contains at least one public key derived from the\n * BIP39 seed phrase fixture.\n *\n * The signatures in these transaction fixtures can therefore be\n * created by any keystore which loads this seed phrase.\n *\n * The inputs to these transactions should survive as the other\n * signature(s) required to spend them cannot be produced publicly\n * (their private keys are held by Unchained Capital).\n *\n * @typedef module:fixtures.MultisigTransaction\n * @type {Object}\n * @property {string} description - describes the transaction\n * @property {module:networks.NETWORKS} network - bitcoin network\n * @property {boolean} segwit - does the transaction have segwit inputs?\n * @property {string[]} bip32Paths - BIP32 paths to the public key derived from the BIP39 seed phrase fixture, one per input\n * @property {string[]} publicKeys - (compressed) public keys  (in hex) corresponding to each BIP32 path, one per input\n * @property {module:transactions.UTXO[]} inputs - transaction inputs\n * @property {module:transactions.TransactionOutput[]} outputs - transaction outputs\n * @property {string} hex - unsigned transaction in hex\n * @property {string[]} signature - one signature for the transaction (consisting of one signature per input)\n *\n */\n\nexports.TEST_FIXTURES = TEST_FIXTURES;"],"sourceRoot":""}